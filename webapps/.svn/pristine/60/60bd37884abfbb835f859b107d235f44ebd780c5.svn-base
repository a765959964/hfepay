/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2016
 */
package com.hfepay.scancode.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hfepay.scancode.commons.ScanBaseController;
import com.hfepay.commons.utils.PagingResult;
import com.hfepay.scancode.commons.Constants;
import com.hfepay.scancode.entity.MerchantInfo;
import com.hfepay.scancode.entity.MerchantPayway;
import net.sf.json.JSONSerializer;
import com.hfepay.commons.utils.Pager;
import com.hfepay.scancode.service.operator.AgentPaywayService;
import com.hfepay.scancode.service.operator.MerchantInfoService;
import com.hfepay.scancode.service.operator.MerchantPaywayService;
import com.hfepay.scancode.condition.AgentPaywayCondition;
import com.hfepay.scancode.condition.MerchantPaywayCondition;

import net.sf.json.JSON;

import com.hfepay.commons.base.collection.Maps;
import com.hfepay.commons.base.lang.Strings;
import com.alibaba.fastjson.JSONObject;

@Controller
@RequestMapping("/adminManage/merchantpayway")
public class MerchantPaywayController extends ScanBaseController{
	
	@Autowired
	private MerchantPaywayService merchantPaywayService;
	
	@Autowired
	private MerchantInfoService merchantInfoService;
	
	@Autowired
	private AgentPaywayService agentPaywayService;
	
	/** 列表 */
	@RequestMapping(method= {RequestMethod.GET,RequestMethod.POST})
	public String list(HttpServletRequest request) {
		AgentPaywayCondition agentPaywayCondition = new AgentPaywayCondition();
		request.setAttribute("agentPays", agentPaywayService.findAll(agentPaywayCondition));
		return "admin/merchantpayway/list";
	}
	
	/**
	 * 列表显示
	 * @param request merchantPaywayCondition
	 * 
	 * @author panq
	 * @return page
	 */
	@RequestMapping(value = "/content", method= {RequestMethod.POST})
	public String listContent(HttpServletRequest request,ModelMap model,MerchantPaywayCondition merchantPaywayCondition){	
		merchantPaywayCondition.setRecordStatus(Constants.RECORD_STATUS_YES);
		PagingResult<MerchantPayway> page = merchantPaywayService.findPagingResult(merchantPaywayCondition);
		Pager<MerchantPayway> pager = new Pager<MerchantPayway>();
		pager.setPageNo(merchantPaywayCondition.getPageNo());
		pager.setPageSize(merchantPaywayCondition.getPageSize());
		pager.setResult(page.getResult());
		pager.setTotalCount(page.getTotalCount());
 		if(pager.getOrder() == null){
			pager.setOrder("");
		}
		model.addAttribute("pager",pager);
		return "admin/merchantpayway/listContent";
	}
	
	/**
	 * 列表显示(不分页)
	 * @param request merchantPaywayCondition
	 * 
	 * @author panq
	 * @return json
	 */
	@RequestMapping(value="/list",method=RequestMethod.POST)
	@ResponseBody
	public JSONObject list(HttpServletRequest request,MerchantPaywayCondition merchantPaywayCondition){
		merchantPaywayCondition.setRecordStatus(Constants.RECORD_STATUS_YES);
        List<MerchantPayway> list = merchantPaywayService.findAll(merchantPaywayCondition);
        JSONObject json = new JSONObject();
        json.put("objList", list);
		return json;
	}
	
	/**
	 * 进入新增、更新页面
	 * @param 主键
	 * 
	 * @author panq
	 * @return page
	 */
	@RequestMapping(value="/edit/{id}/{merNo}", method= {RequestMethod.GET})
	public String show(ModelMap model,@PathVariable String id,@PathVariable String merNo) throws Exception {
		if(!"0".equalsIgnoreCase(id)){
			MerchantPayway entity = merchantPaywayService.findById(id);
			 model.addAttribute("Obj", entity);
		}
		MerchantInfo entity = merchantInfoService.findByMerchantNo(merNo);
		model.addAttribute("mer", entity);
		
		AgentPaywayCondition agentPaywayCondition = new AgentPaywayCondition();
		agentPaywayCondition.setAgentNo(entity.getAgentNo());
		agentPaywayCondition.setRecordStatus(Constants.RECORD_STATUS_YES);
		agentPaywayCondition.setStatus(Constants.STATUS_ACTIVE);
		model.addAttribute("agentPays", agentPaywayService.findAll(agentPaywayCondition));
		
		return "admin/merchantpayway/edit";
	}

	/**
	 * 新增、更新
	 * @param merchantPaywayCondition
	 * 
	 * @author panq
	 * @return json
	 */
	@RequestMapping(value="/save", method= {RequestMethod.POST})
	@ResponseBody
	public JSON _new(HttpServletRequest request,ModelMap model,MerchantPaywayCondition merchantPaywayCondition) throws Exception {
		Map<Object, Object> map = new HashMap<Object, Object>();
		merchantPaywayCondition.setOperator(getCurrentUserId());
		try {
			if(Strings.isEmpty(merchantPaywayCondition.getId())){
				//新增
				merchantPaywayCondition.setCreateTime(new Date());
				merchantPaywayCondition.setId(Strings.getUUID());
				merchantPaywayCondition.setRecordStatus(Constants.RECORD_STATUS_YES);
				merchantPaywayCondition.setStatus(Constants.SUCCESS_STATE);
				merchantPaywayCondition.setAcceptStatus(Constants.FAIL_STATE);
				merchantPaywayService.insert(merchantPaywayCondition);
			}else{
				merchantPaywayCondition.setUpdateTime(new Date());
				merchantPaywayService.update(merchantPaywayCondition);
			}
			map = Maps.mapByAarray(EXECUTE_STATUS,SUCCESS,VALUES,Constants.SUCCESS_MSG,"url","/adminManage/merchantpayway");
		} catch (Exception e) {
			map = Maps.mapByAarray(EXECUTE_STATUS,FAILED,VALUES,Constants.FAIL_MSG);
		}
		return JSONSerializer.toJSON(map);
	}
	
	/**
	 * 删除
	 *  
	 * @author panq
	 * @return json
	 */
	@RequestMapping(value="/del",method=RequestMethod.POST)
	@ResponseBody
	public JSON del(HttpServletRequest request,MerchantPaywayCondition merchantPaywayCondition){		
		merchantPaywayCondition.setOperator(getCurrentUserId());
		merchantPaywayCondition.setRecordStatus(Constants.RECORD_STATUS_NO);
		merchantPaywayCondition.setUpdateTime(new Date());
        Map<Object, Object> map = new HashMap<Object, Object>();
		try {
			merchantPaywayService.update(merchantPaywayCondition);
			map = Maps.mapByAarray(EXECUTE_STATUS,SUCCESS,VALUES,Constants.SUCCESS_MSG);
		} catch (Exception e) {
			map = Maps.mapByAarray(EXECUTE_STATUS,FAILED,VALUES,Constants.FAIL_MSG);
		}
		return JSONSerializer.toJSON(map);
	}
	
	/**
	 * 状态变更
	 * @param request
	 * 
	 * @author panq
	 * @return json
	 */
	@RequestMapping(value = "/updateStatus", method= {RequestMethod.POST})
	@ResponseBody
	public JSON updateStatus(HttpServletRequest request,MerchantPaywayCondition merchantPaywayCondition){		
        Map<Object, Object> map = new HashMap<Object, Object>();
		try {
			merchantPaywayCondition.setOperator(getCurrentUserId());
			merchantPaywayCondition.setUpdateTime(new Date());
			merchantPaywayService.update(merchantPaywayCondition);
			
			map = Maps.mapByAarray(EXECUTE_STATUS,SUCCESS,VALUES,Constants.SUCCESS_MSG);
		} catch (Exception e) {
			map = Maps.mapByAarray(EXECUTE_STATUS,FAILED,VALUES,Constants.FAIL_MSG);
		}
		return JSONSerializer.toJSON(map);
	}	
	
	/** 查看详情 
	 * @param 主键
	 * 
	 * @author panq
	 * @return page
	 */
	@RequestMapping(value="/detail/{id}", method= {RequestMethod.POST})
	public String show(HttpServletRequest request,ModelMap model,@PathVariable String id) throws Exception {
		MerchantPayway entity = merchantPaywayService.findById(id);
		model.addAttribute("item",entity);
		return "admin/merchantpayway/detail";
	}
}

