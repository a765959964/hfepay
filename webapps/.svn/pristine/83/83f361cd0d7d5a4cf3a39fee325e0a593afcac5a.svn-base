/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2016
 */
package com.hfepay.scancode.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hfepay.common.web.controller.BaseController;
import com.hfepay.commons.utils.PagingResult;
import com.hfepay.scancode.commons.Constants;
import com.hfepay.scancode.entity.AgentBase;
import com.hfepay.scancode.entity.MerchantInfo;
import com.hfepay.scancode.entity.MerchantPayway;
import com.hfepay.scancode.entity.PlatformQrcode;

import net.sf.json.JSONSerializer;

import com.hfepay.scancode.entity.Admin;
import com.hfepay.scancode.service.operator.AgentBaseService;
import com.hfepay.scancode.service.operator.MerchantInfoService;
import com.hfepay.scancode.service.operator.MerchantPaywayService;
import com.hfepay.scancode.service.operator.PlatformQrcodeService;
import com.hfepay.commons.utils.Pager;
import com.hfepay.scancode.condition.AgentBaseCondition;
import com.hfepay.scancode.condition.MerchantInfoCondition;
import com.hfepay.scancode.condition.MerchantPaywayCondition;
import com.hfepay.scancode.condition.PlatformQrcodeCondition;

import net.sf.json.JSON;

import com.hfepay.commons.base.collection.Maps;
import com.hfepay.commons.base.lang.Strings;
import com.alibaba.fastjson.JSONObject;

@Controller
@RequestMapping("/adminManage/merchantinfo")
public class MerchantInfoController extends BaseController{
	
	@Autowired
	private MerchantInfoService merchantInfoService;
	@Autowired
	private AgentBaseService agentBaseService;
	@Autowired
	private PlatformQrcodeService platformQrcodeService;
	@Autowired
	private MerchantPaywayService merchantPaywayService;
	
	/** 列表 */
	@RequestMapping(method= {RequestMethod.GET,RequestMethod.POST})
	public String list(HttpServletRequest request) {
		return "admin/merchantinfo/list";
	}
	
	/**
	 * 列表显示
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/content", method= {RequestMethod.POST})
	public String listContent(HttpServletRequest request,ModelMap model,MerchantInfoCondition merchantInfoCondition){		
		PagingResult<MerchantInfo> page = merchantInfoService.findPagingResult(merchantInfoCondition);
		Pager<MerchantInfo> pager = new Pager<MerchantInfo>();
		pager.setPageNo(merchantInfoCondition.getPageNo());
		pager.setPageSize(merchantInfoCondition.getPageSize());
		pager.setResult(page.getResult());
		pager.setTotalCount(page.getTotalCount());
 		if(pager.getOrder() == null){
			pager.setOrder("");
		}
		model.addAttribute("pager",pager);
		return "admin/merchantinfo/listContent";
	}
	
	/** 列表无分页 */
	@RequestMapping(value="/list",method=RequestMethod.POST)
	@ResponseBody
	public JSONObject list(HttpServletRequest request,MerchantInfoCondition merchantInfoCondition){		
        List<MerchantInfo> list = merchantInfoService.findAll(merchantInfoCondition);
        JSONObject json = new JSONObject();
        json.put("objList", list);
		return json;
	}
	
	/** 进入新增/更新 */
	@RequestMapping(value="/{id}", method= {RequestMethod.GET})
	public String show(ModelMap model,@PathVariable String id) throws Exception {
		if(!"0".equalsIgnoreCase(id)){
			MerchantInfo entity = merchantInfoService.findById(id);
			 model.addAttribute("Obj", entity);
		}
		return "admin/merchantinfo/edit";
	}
	
	/** 
	 *商户审核，新增费率
	 */
	@RequestMapping(value="/addAerchantpayway/{id}", method= {RequestMethod.GET})
	public String add(HttpServletRequest request,ModelMap model,@PathVariable String id) throws Exception {
		MerchantInfo entity = merchantInfoService.findById(id);
		
		
		MerchantPayway merchantPayway =new MerchantPayway();
		merchantPayway.setMerchantNo(entity.getMerchantNo());
		merchantPayway.setMerchantName(entity.getMerchantName());
		model.addAttribute("Obj",merchantPayway );
		return "admin/merchantpayway/edit";
	}
	
	
	/** 新增/更新 */
	@RequestMapping(value="/save", method= {RequestMethod.POST})
	@ResponseBody
	public JSON _new(HttpServletRequest request,ModelMap model,MerchantInfoCondition merchantInfoCondition) throws Exception {
		Map<Object, Object> map = new HashMap<Object, Object>();
		Admin user = (Admin) request.getSession().getAttribute("currentUser");
		merchantInfoCondition.setOperater(user.getUserName());
		try {
			if(Strings.isEmpty(merchantInfoCondition.getId())){
				//调用查询该代理商下的二维码
				PlatformQrcode platformQrcode = platformQrcodeService.findPlatformQrcode(merchantInfoCondition.getAgentNo());
				merchantInfoCondition.setCreateTime(new Date());
				merchantInfoCondition.setId(Strings.getUUID());
				merchantInfoCondition.setStatus(Constants.SUCCESS_STATE);
				if(platformQrcode != null){
					merchantInfoCondition.setQrCode(platformQrcode.getQrCode());
				}else{
					map = Maps.mapByAarray(EXECUTE_STATUS,FAILED,VALUES,"代理商二维码已用完，请联系上级代理商!");
				}
				//新增商户
				merchantInfoService.insert(merchantInfoCondition);
				//将使用过的二维码绑定给商户
				PlatformQrcodeCondition  platformQrcodeCondition=new PlatformQrcodeCondition();
				platformQrcodeCondition.setId(platformQrcode.getId());
				platformQrcodeCondition.setMerchantNo(merchantInfoCondition.getMerchantNo());
				platformQrcodeCondition.setMerchantName(merchantInfoCondition.getMerchantName());
				platformQrcodeCondition.setUpdateTime(new Date());
				platformQrcodeService.update(platformQrcodeCondition);
				//修改代理商二维码剩余数量
				AgentBaseCondition agentBaseCondition =new AgentBaseCondition();
				agentBaseCondition.setAgentNo(merchantInfoCondition.getAgentNo());
				List<AgentBase> agentBase = agentBaseService.findAll(agentBaseCondition);
				if(agentBase.size() > 0){
					if(agentBase.get(0).getLessTotal() == 0){
						map = Maps.mapByAarray(EXECUTE_STATUS,FAILED,VALUES,"代理商二维码已用完，请联系上级代理商!");
					}else{
						agentBaseCondition.setId(agentBase.get(0).getId());
						agentBaseCondition.setUseTotal(agentBase.get(0).getUseTotal()+1);
						agentBaseCondition.setLessTotal(agentBase.get(0).getLessTotal()-1);
						agentBaseCondition.setUpdateTime(new Date());
						agentBaseService.update(agentBaseCondition);
					}
				}
			}else{
				merchantInfoCondition.setUpdateTime(new Date());
				merchantInfoService.update(merchantInfoCondition);
			}
			map = Maps.mapByAarray(EXECUTE_STATUS,SUCCESS,VALUES,Constants.SUCCESS_MSG,"url","/adminManage/merchantinfo");
		} catch (Exception e) {
			map = Maps.mapByAarray(EXECUTE_STATUS,FAILED,VALUES,Constants.FAIL_MSG);
		}
		return JSONSerializer.toJSON(map);
	}
	
	/** 删除 */
	@RequestMapping(value="/del",method=RequestMethod.POST)
	@ResponseBody
	public JSON del(HttpServletRequest request,MerchantInfoCondition merchantInfoCondition){		
		Admin user = (Admin) request.getSession().getAttribute("currentUser");
		merchantInfoCondition.setOperater(user.getUserName());
		//merchantInfoCondition.setRecordStatus(RecordStatus.LOCKED);
		merchantInfoCondition.setUpdateTime(new Date());
        Map<Object, Object> map = new HashMap<Object, Object>();
		try {
			merchantInfoService.update(merchantInfoCondition);
			map = Maps.mapByAarray(EXECUTE_STATUS,SUCCESS,VALUES,Constants.SUCCESS_MSG);
		} catch (Exception e) {
			map = Maps.mapByAarray(EXECUTE_STATUS,FAILED,VALUES,Constants.FAIL_MSG);
		}
		return JSONSerializer.toJSON(map);
	}
	
	/**
	 * 状态变更
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/updateStatus", method= {RequestMethod.POST})
	@ResponseBody
	public JSON updateStatus(HttpServletRequest request,MerchantInfoCondition merchantInfoCondition){		
        Map<Object, Object> map = new HashMap<Object, Object>();
		try {
			merchantInfoService.updateStatus(merchantInfoCondition.getId(),merchantInfoCondition.getStatus());
			map = Maps.mapByAarray(EXECUTE_STATUS,SUCCESS,VALUES,Constants.SUCCESS_MSG);
		} catch (Exception e) {
			map = Maps.mapByAarray(EXECUTE_STATUS,FAILED,VALUES,Constants.FAIL_MSG);
		}
		return JSONSerializer.toJSON(map);
	}	
	
	/** 查看详情 */
	@RequestMapping(value="/detail/{id}", method= {RequestMethod.POST})
	public String show(HttpServletRequest request,ModelMap model,@PathVariable String id) throws Exception {
		MerchantInfo entity = merchantInfoService.findById(id);
		model.addAttribute("item",entity);
		return "admin/merchantinfo/detail";
	}
}

