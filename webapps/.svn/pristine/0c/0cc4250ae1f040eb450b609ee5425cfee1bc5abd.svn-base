package com.hfepay.notify.refund.controller;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.exceptions.ServiceException;
import com.hfepay.epay.channel.service.AlipayPayRefundNotifyService;
import com.hfepay.notify.util.NotifyConstants;
import com.hfepay.order.bo.OrderRefundCallBackBo;
import com.hfepay.order.service.OrderRefundCallBackService;

@Controller
@RequestMapping("/refundNotify")
public class AlipayRefundNotifyController {
	
	Logger logger = LoggerFactory.getLogger(AlipayRefundNotifyController.class);
	
	@Autowired
	private AlipayPayRefundNotifyService alipayPayRefundNotifyService;
	
	@Autowired
	private OrderRefundCallBackService orderRefundCallBackService;
	
	@RequestMapping("/alipayRefundNotify")
	@ResponseBody
	public String getAlipayInfo(HttpServletRequest request, HttpServletResponse response) {
		//获取支付宝退款反馈信息      
		Map<String, String> params = new HashMap<String, String>();
		Map requestParams = request.getParameterMap();
		for(Iterator iter = requestParams.keySet().iterator();iter.hasNext();){           
			String name = (String) iter.next();   
			String[] values = (String[]) requestParams.get(name);
			String valueStr = "";
			for (int i = 0; i < values.length; i++) {
				valueStr = (i == values.length - 1) ? valueStr + values[i] : valueStr + values[i] + ",";
			}
			params.put(name, valueStr);
		}
		logger.info("----支付宝退款请求参数："+params.toString());
		logger.info("----开始验证签名-----");
		// 根据支付宝的通知返回参数 计算得出通知验证结果 
		if(!alipayPayRefundNotifyService.isValidate(params)) {
			logger.info("----验证签名失败-----");
			return NotifyConstants.NOTIFY_FAIL;
		}
		logger.info("----签名验证成功-----");
		logger.info("----begin 封装支付宝退款参数-----");
		OrderRefundCallBackBo refundBO = alipayPayRefundNotifyService.alipayRefundRequsetHandle(params);
		logger.info("----退款参数列表：-----");
		logger.info("refund_fee="+params.get("refund_fee")+"  &&tradeId="+params.get("out_trade_no")
		+"  &&tradeStatus="+params.get("refund_status"));
		if(refundBO.getRefundStatus().equalsIgnoreCase("REFUND_SUCCESS")){
			refundBO.setRefundStatus("00");
		}else{
			refundBO.setRefundStatus("01");
		}
		logger.info("----end 封装支付宝退款参数-----");
		logger.info("----调用修改订单金额和状态的方法-----");
		try{
			//调用修改订单金额的方法。。。
			orderRefundCallBackService.callbackRefund(refundBO);
			logger.info("----退款成功-----");
			return NotifyConstants.NOTIFY_SUCCESS;
		}catch(ServiceException e){
			e.printStackTrace();
			logger.info("----退款失败-----");
		}
		
		return null;
	}
}
