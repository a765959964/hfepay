/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2016
 */
package com.hfepay.scancode.controller;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.hfepay.common.web.controller.BaseController;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.commons.utils.Pager;
import com.hfepay.commons.utils.PagingResult;
import com.hfepay.scancode.commons.Constants;
import com.hfepay.scancode.commons.FileUploadConfig;
import com.hfepay.scancode.condition.ChannelBaseCondition;
import com.hfepay.scancode.condition.PlatformQrcodeCondition;
import com.hfepay.scancode.condition.QrcodeAssignedLogCondition;
import com.hfepay.scancode.entity.Admin;
import com.hfepay.scancode.entity.ChannelBase;
import com.hfepay.scancode.entity.ChannelExpand;
import com.hfepay.scancode.service.operator.ChannelBaseService;
import com.hfepay.scancode.service.operator.ChannelExpandService;
import com.hfepay.scancode.service.operator.PlatformQrcodeService;
import com.hfepay.scancode.service.operator.QrcodeAssignedLogService;

@Controller
@RequestMapping("/adminManage/channelbase")
public class ChannelBaseController extends BaseController{
	
	@Autowired
	private ChannelBaseService channelBaseService;
	@Autowired
	private ChannelExpandService channelExpandService;
	@Autowired
	private PlatformQrcodeService platformQrcodeService;
	@Autowired
	private QrcodeAssignedLogService qrcodeAssignedLogService;
	@Autowired
	private FileUploadConfig fileUploadConfig;
	
	private static String viralPath = "super";//二维码访问路径标识
	private static String qrFile = "files";//二维码访问路径标识
	private static String qrPath = "qr";//二维码访问路径标识
	private static String qrFileType = ".png";//二维码文件类型
	
	/**
	 * @Title: saveOrUpdateById
	 * @Description: 查询列表
	 * @author: Ricky
	 * @param 
	 * @return: String
	 * @date CreateDate : 2016-10-13 09:50:44
	 */
	@RequestMapping(method= {RequestMethod.GET,RequestMethod.POST})
	public String list() {
		return "admin/channel/channelbase/list";
	}
	
	/**
	 * @Title: listContent
	 * @Description: 列表查询
	 * @author: Ricky
	 * @param ChannelBaseCondition
	 * @return: String
	 * @date CreateDate : 2016-10-13 09:50:44
	 */
	@RequestMapping(value = "/content", method= {RequestMethod.POST})
	public String listContent(ModelMap model,ChannelBaseCondition channelBaseCondition){		
		PagingResult<ChannelBase> page = channelBaseService.findPagingResult(channelBaseCondition);
		Pager<ChannelBase> pager = new Pager<ChannelBase>();
		pager.setPageNo(channelBaseCondition.getPageNo());
		pager.setPageSize(channelBaseCondition.getPageSize());
		pager.setResult(page.getResult());
		pager.setTotalCount(page.getTotalCount());
 		if(pager.getOrder() == null){
			pager.setOrder("");
		}
		model.addAttribute("pager",pager);
		return "admin/channel/channelbase/listContent";
	}
	

	/**
	 * @Title: list
	 * @Description: 列表查询，无分页
	 * @author: Ricky
	 * @param ChannelBaseCondition
	 * @return: JSONObject
	 * @date CreateDate : 2016-10-13 09:50:44
	 */
	@RequestMapping(value="/list",method=RequestMethod.POST)
	@ResponseBody
	public JSONObject list(HttpServletRequest request,ChannelBaseCondition channelBaseCondition){		
        List<ChannelBase> list = channelBaseService.findAll(channelBaseCondition);
        JSONObject json = new JSONObject();
        json.put("objList", list);
		return json;
	}
	
	/**
	 * @Title: saveOrUpdateById
	 * @Description: 删除
	 * @author: Ricky
	 * @param ChannelBaseCondition
	 * @return: JSONObject
	 * @date CreateDate : 2016-10-13 09:50:44
	 */
	@RequestMapping(value="/del",method=RequestMethod.POST)
	@ResponseBody
	public JSONObject del(HttpServletRequest request,ChannelBaseCondition channelBaseCondition){		
        long flag = channelBaseService.deleteById(channelBaseCondition.getId());
        JSONObject json = new JSONObject();
        if(flag == 0){
        	json.put("message", Constants.FAIL_MSG);
        	json.put("status", Constants.FAIL_STATE);
        }else{
        	json.put("message", Constants.SUCCESS_MSG);
        	json.put("status", Constants.SUCCESS_STATE);
        }
		return json;
	}
	


	/**
	 * @Title: saveOrUpdateById
	 * @Description: 状态变更
	 * @author: wh
	 * @param ChannelBaseCondition
	 * @return: JSONObject
	 * @date CreateDate : 2016-10-13 09:50:44
	 */
	@RequestMapping(value = "/updateStatus", method= {RequestMethod.POST})
	@ResponseBody
	public JSONObject updateStatus(HttpServletRequest request,ChannelBaseCondition channelBaseCondition){		
        long flag = channelBaseService.updateStatus(channelBaseCondition.getId(),channelBaseCondition.getStatus());
        ChannelBase entity = channelBaseService.findById(channelBaseCondition.getId());
        if(entity != null){
        	ChannelExpand channelExpand = channelExpandService.findByChannelNo(entity.getChannelNo());
        	if(channelExpand != null){
        		flag = channelExpandService.updateStatus(channelExpand.getId(),channelBaseCondition.getStatus());
        	}
        	
        }
        JSONObject json = new JSONObject();
        if(flag == 0){
        	json.put("message", Constants.FAIL_MSG);
        	json.put("status", Constants.FAIL_STATE);
        }else{
        	json.put("message", Constants.SUCCESS_MSG);
        	json.put("status", Constants.SUCCESS_STATE);
        }
		return json;
	}	
	
	/**
	 * @Title: saveOrUpdateById
	 * @Description: addQrcode
	 * @author: wh
	 * @param ChannelBaseCondition
	 * @return: JSONObject
	 * @date CreateDate : 2016-10-13 09:50:44
	 */
	@RequestMapping(value = "/addQrcode", method= {RequestMethod.POST})
	@ResponseBody
	public JSONObject addQrcode(HttpServletRequest request,String channelNo ,String qrcodeNum){	
		Admin user = (Admin) request.getSession().getAttribute("currentUser");
		JSONObject json = new JSONObject();
        try {
			ChannelExpand channelExpand = channelExpandService.findByChannelNo(channelNo);
			String imgUrl = fileUploadConfig.getFilePath() + Constants.SPT + viralPath + Constants.SPT + qrFile + Constants.SPT + qrPath;//二维码访问路径
			String path = fileUploadConfig.getPath() + Constants.SPT + qrPath;//二维码存放路径
			int qrNumber = Integer.parseInt(qrcodeNum);
			if(channelExpand != null){
				for(int i=0;i<qrNumber;i++ ){
					String qrCode = platformQrcodeService.getQrcodeCode();
					String qrName = qrCode + qrFileType ;//二维码名称
					StringBuffer content = new StringBuffer();//域名+渠道编码+二维码编码
					content.append(channelExpand.getDomainName());
					content.append("?channelNo=");
					content.append(channelExpand.getChannelNo());
					content.append("&qrCode=");
					content.append(qrCode);
						channelBaseService.encode(content.toString(), "", path, true,qrName);//生成二维码
						
						PlatformQrcodeCondition platformQrcodeCondition = new PlatformQrcodeCondition();
						platformQrcodeCondition.setId(Strings.getUUID());
						platformQrcodeCondition.setChannelNo(channelExpand.getChannelNo());
						platformQrcodeCondition.setChannelName(channelExpand.getChannelName());
						platformQrcodeCondition.setQrName(qrName);
						platformQrcodeCondition.setQrCode(qrCode);
						platformQrcodeCondition.setImage(imgUrl + Constants.SPT + qrName);
						platformQrcodeCondition.setQrDesc("");
						platformQrcodeCondition.setUseStatus(Constants.STATUS_USE);
						platformQrcodeCondition.setQrStatus(Constants.STATUS_ACTIVE);
						platformQrcodeCondition.setRecordStatus(Constants.Y);
						platformQrcodeCondition.setCreateTime(new Date());
						platformQrcodeCondition.setOperator(user.getUserName());
						platformQrcodeService.insert(platformQrcodeCondition);//保存二维码
				}
				ChannelBaseCondition channelBaseCondition = new ChannelBaseCondition();
				ChannelBase channelBase = channelBaseService.findByChannelNo(channelNo);
				BeanUtils.copyProperties(channelBase, channelBaseCondition);
				int qrTotal = qrNumber + channelBase.getQrTotal();
				int lessTotal = qrNumber + channelBase.getLessTotal();
				channelBaseCondition.setQrTotal(qrTotal);
				channelBaseCondition.setLessTotal(lessTotal);
				channelBaseService.update(channelBaseCondition);//更新二维码数量
				QrcodeAssignedLogCondition qrcodeAssignedLogCondition = new QrcodeAssignedLogCondition();
				qrcodeAssignedLogCondition.setId(Strings.getUUID());
				qrcodeAssignedLogCondition.setAssignment(Constants.OPERATOR_SYSTEM);
				qrcodeAssignedLogCondition.setRecipients(channelExpand.getChannelNo());				
				qrcodeAssignedLogCondition.setQrNumber(qrNumber);
				qrcodeAssignedLogCondition.setAssignedType(Constants.ASSIGNEDTYPE_ACTIVE);
				qrcodeAssignedLogCondition.setCreateTime(new Date());
				qrcodeAssignedLogCondition.setOperator(user.getUserName());
				qrcodeAssignedLogService.insert(qrcodeAssignedLogCondition);//二维码流水日志
			}
			
		} catch (Exception e) {
			json.put("message", Constants.FAIL_MSG);
        	json.put("status", Constants.FAIL_STATE);
		}
        json.put("message", Constants.SUCCESS_MSG);
    	json.put("status", Constants.SUCCESS_STATE);
		return json;
	}	
	
}

