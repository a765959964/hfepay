/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2016
 */
package com.hfepay.scancode.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hfepay.common.web.controller.BaseController;
import com.hfepay.commons.utils.PagingResult;
import com.hfepay.scancode.commons.Constants;

import com.hfepay.scancode.entity.AgentBase;
import com.hfepay.scancode.entity.ChannelBase;
import com.hfepay.scancode.entity.MappingDicion;
import com.hfepay.scancode.service.operator.AgentBaseService;
import com.hfepay.scancode.service.operator.ChannelBaseService;
import com.hfepay.scancode.service.operator.IdCreateService;
import com.hfepay.scancode.service.operator.MappingDicionService;

import net.sf.json.JSONSerializer;
import com.hfepay.scancode.entity.Admin;
import com.hfepay.commons.utils.Pager;
import com.hfepay.scancode.condition.AgentBaseCondition;
import com.hfepay.scancode.condition.ChannelBaseCondition;
import com.hfepay.scancode.condition.MappingDicionCondition;

import net.sf.json.JSON;

import com.hfepay.commons.base.collection.Maps;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.commons.entity.RecordStatus;
import com.alibaba.fastjson.JSONObject;

@Controller
@RequestMapping("/adminManage/agentbase")
public class AgentBaseController extends BaseController{
	
	@Autowired
	private AgentBaseService agentBaseService;
	
	@Autowired
	private ChannelBaseService channelBaseService;
	
	@Autowired
	private MappingDicionService mappingDicionService;
	
	@Autowired
	private IdCreateService idCreateService;
	
	/** 列表 */
	@RequestMapping(method= {RequestMethod.GET,RequestMethod.POST})
	public String list(HttpServletRequest request) {
		return "admin/agentbase/list";
	}
	
	/**
	 * 列表显示
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/content", method= {RequestMethod.POST})
	public String listContent(HttpServletRequest request,ModelMap model,AgentBaseCondition agentBaseCondition){		
		PagingResult<AgentBase> page = agentBaseService.findPagingResult(agentBaseCondition);
		Pager<AgentBase> pager = new Pager<AgentBase>();
		pager.setPageNo(agentBaseCondition.getPageNo());
		pager.setPageSize(agentBaseCondition.getPageSize());
		pager.setResult(page.getResult());
		pager.setTotalCount(page.getTotalCount());
 		if(pager.getOrder() == null){
			pager.setOrder("");
		}
		model.addAttribute("pager",pager);
		return "admin/agentbase/listContent";
	}
	
	/** 列表无分页 */
	@RequestMapping(value="/list",method=RequestMethod.POST)
	@ResponseBody
	public JSONObject list(HttpServletRequest request,AgentBaseCondition agentBaseCondition){		
        List<AgentBase> list = agentBaseService.findAll(agentBaseCondition);
        JSONObject json = new JSONObject();
        json.put("objList", list);
		return json;
	}
	
	/** 进入新增/更新 */
	@RequestMapping(value="/{id}", method= {RequestMethod.GET})
	public String show(ModelMap model,@PathVariable String id) throws Exception {
		if(!"0".equalsIgnoreCase(id)){
			AgentBase entity = agentBaseService.findById(id);
			 model.addAttribute("Obj", entity);
		}
		ChannelBaseCondition channelBaseCondition = new ChannelBaseCondition();
		channelBaseCondition.setStatus("1");
		List<ChannelBase> channelList =  channelBaseService.findAll(channelBaseCondition);
		model.addAttribute("channelList", channelList);
		
		MappingDicionCondition mappingDicionCondition = new MappingDicionCondition();
		mappingDicionCondition.setKeyNo("DLSJB");
		List<MappingDicion> agentLevelList = mappingDicionService.findAll(mappingDicionCondition);
		model.addAttribute("agentLevelList", agentLevelList);
		
		String agentNo = idCreateService.createParamNo("HFJK");
		model.addAttribute("agentNo", agentNo);
		return "admin/agentbase/edit";
	}

	/** 新增/更新 */
	@RequestMapping(value="/save", method= {RequestMethod.POST})
	@ResponseBody
	public JSON _new(HttpServletRequest request,ModelMap model,AgentBaseCondition agentBaseCondition) throws Exception {
		Map<Object, Object> map = new HashMap<Object, Object>();
		Admin user = (Admin) request.getSession().getAttribute("currentUser");
		agentBaseCondition.setOperator(user.getId());
		try {
			if(Strings.isEmpty(agentBaseCondition.getId())){
				//新增
				agentBaseCondition.setCreateTime(new Date());
				agentBaseCondition.setId(Strings.getUUID());
				agentBaseCondition.setRecordStatus(Constants.RECORD_STATUS_YES);
				agentBaseCondition.setRecordStatus(Constants.Y);
				agentBaseCondition.setStatus(Constants.SUCCESS_STATE);
				agentBaseService.insert(agentBaseCondition);
			}else{
				agentBaseCondition.setUpdateTime(new Date());
				agentBaseService.update(agentBaseCondition);
			}
			map = Maps.mapByAarray(EXECUTE_STATUS,SUCCESS,VALUES,Constants.SUCCESS_MSG,"url","/adminManage/agentbase");
		} catch (Exception e) {
			map = Maps.mapByAarray(EXECUTE_STATUS,FAILED,VALUES,Constants.FAIL_MSG);
		}
		return JSONSerializer.toJSON(map);
	}
	
	/** 删除 */
	@RequestMapping(value="/del",method=RequestMethod.POST)
	@ResponseBody
	public JSON del(HttpServletRequest request,AgentBaseCondition agentBaseCondition){		
		Admin user = (Admin) request.getSession().getAttribute("currentUser");
		agentBaseCondition.setOperator(user.getId());
		agentBaseCondition.setRecordStatus(Constants.N);
		agentBaseCondition.setUpdateTime(new Date());
        Map<Object, Object> map = new HashMap<Object, Object>();
		try {
			agentBaseService.update(agentBaseCondition);
			map = Maps.mapByAarray(EXECUTE_STATUS,SUCCESS,VALUES,Constants.SUCCESS_MSG);
		} catch (Exception e) {
			map = Maps.mapByAarray(EXECUTE_STATUS,FAILED,VALUES,Constants.FAIL_MSG);
		}
		return JSONSerializer.toJSON(map);
	}
	
	/**
	 * 状态变更
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/updateStatus", method= {RequestMethod.POST})
	@ResponseBody
	public JSON updateStatus(HttpServletRequest request,AgentBaseCondition agentBaseCondition){		
        Map<Object, Object> map = new HashMap<Object, Object>();
		try {
			agentBaseService.updateStatus(agentBaseCondition.getId(),agentBaseCondition.getStatus());
			map = Maps.mapByAarray(EXECUTE_STATUS,SUCCESS,VALUES,Constants.SUCCESS_MSG);
		} catch (Exception e) {
			map = Maps.mapByAarray(EXECUTE_STATUS,FAILED,VALUES,Constants.FAIL_MSG);
		}
		return JSONSerializer.toJSON(map);
	}	
	
	/** 查看详情 */
	@RequestMapping(value="/detail/{id}", method= {RequestMethod.POST})
	public String show(HttpServletRequest request,ModelMap model,@PathVariable String id) throws Exception {
		AgentBase entity = agentBaseService.findById(id);
		model.addAttribute("item",entity);
		return "admin/agentbase/detail";
	}
	
	/**
	 * 校验代理商级别
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/checkAgentLevel", method= {RequestMethod.POST})
	@ResponseBody
	public JSONObject checkAgentLevel(HttpServletRequest request,String agentLevel){		
        AgentBaseCondition agentBaseCondition = new AgentBaseCondition();
        agentBaseCondition.setAgentLevel(agentLevel);
        List<AgentBase> agentBaseList = agentBaseService.findAll(agentBaseCondition);
        JSONObject json = new JSONObject();
        if(agentBaseList != null && agentBaseList.size()>0){
        	json.put("check", true);
        }else{
        	json.put("check", false);
        }
		return json;
	}
	/** 分配二维码 */
	@RequestMapping(value="/assign/{id}", method= {RequestMethod.POST})
	@ResponseBody
	public JSON assign(HttpServletRequest request,ModelMap model,@PathVariable String id,String qrTotal) throws Exception {
		Map<Object, Object> map = new HashMap<Object, Object>();
		Admin user = (Admin) request.getSession().getAttribute("currentUser");
		try{
			AgentBase agentBase = agentBaseService.findById(id);
			int total = 0;
			if(agentBase.getQrTotal()!=null){
				total = agentBase.getQrTotal()+Integer.parseInt(qrTotal);
			}else{
				total = Integer.parseInt(qrTotal);
			}
			int lessTotal = 0;
			if(agentBase.getLessTotal()!=null){
				lessTotal = agentBase.getLessTotal()+Integer.parseInt(qrTotal);
			}else{
				lessTotal = Integer.parseInt(qrTotal);
			}
			AgentBaseCondition agentBaseCondition = new AgentBaseCondition();
			agentBaseCondition.setId(id);
			agentBaseCondition.setQrTotal(total);
			agentBaseCondition.setLessTotal(lessTotal);
			agentBaseCondition.setOperator(user.getId());
			agentBaseService.updateByCriteria(agentBaseCondition);
			
			map = Maps.mapByAarray(EXECUTE_STATUS,SUCCESS,VALUES,"分配成功","url","/adminManage/agentbase");
		} catch (Exception e) {
			map = Maps.mapByAarray(EXECUTE_STATUS,FAILED,VALUES,"分配失败");
		}
		return JSONSerializer.toJSON(map);
	}
}

