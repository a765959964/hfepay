package com.hfepay.scancode.controller;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hfepay.common.web.controller.BaseController;
import com.hfepay.commons.base.lang.IpUtil;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.scancode.bo.OrderBo;
import com.hfepay.scancode.commons.Constants;
import com.hfepay.scancode.commons.ScanCodeGetWayErrorCode;
import com.hfepay.scancode.condition.MerchantCashierCondition;
import com.hfepay.scancode.condition.MerchantPaywayCondition;
import com.hfepay.scancode.condition.OrderPaymentCondition;
import com.hfepay.scancode.condition.ScanPayCondition;
import com.hfepay.scancode.entity.ChannelAdmin;
import com.hfepay.scancode.entity.MerchantCashier;
import com.hfepay.scancode.entity.MerchantPayway;
import com.hfepay.scancode.entity.OrderPayment;
import com.hfepay.scancode.enumeration.PayCode;
import com.hfepay.scancode.enumeration.ScanCodeErrorCode;
import com.hfepay.scancode.service.operator.MerchantActivityService;
import com.hfepay.scancode.service.operator.MerchantCashierService;
import com.hfepay.scancode.service.operator.MerchantPaywayService;
import com.hfepay.scancode.service.order.OrderPaymentService;
import com.hfepay.scancode.service.payway.ScanCodeService;

import net.sf.json.JSONSerializer;

@Controller
@RequestMapping("/scancode")
public class ScanPayController  extends BaseController{
	public static final Logger log = LoggerFactory.getLogger(ScanPayController.class);
	@Autowired
	private ScanCodeService scanCodeService;
	@Autowired
	private MerchantPaywayService merchantPaywayService;
	@Autowired
	private OrderPaymentService orderPaymentService;
	@Autowired
	private MerchantCashierService merchantCashierService;
	@Autowired
	private MerchantActivityService merchantcashingActive;
	
	/**
	 * 商户扫码收款
	 * @param request
	 * @param response
	 * @return String
	 */
	@RequestMapping("/sweepcollection")
	public String sweepCollection(ModelMap model,HttpServletRequest request,ScanPayCondition condition){
		Map<String,String> map = PayCode.toMap();
		Map<String,String> paywayMap = new HashMap<>();
		ChannelAdmin admin = (ChannelAdmin) request.getSession().getAttribute(Constants.CURRENTUSER);
		//查询商户的支付方式
		MerchantPaywayCondition merchantPaywayCondition = new MerchantPaywayCondition();
		merchantPaywayCondition.setStatus("1");//状态正常
		merchantPaywayCondition.setAcceptStatus("1");//入网成功
		merchantPaywayCondition.setMerchantNo(admin.getMerchantNo());
		List<MerchantPayway> list = merchantPaywayService.findAll(merchantPaywayCondition);
		for (MerchantPayway merchantPayway : list) {
			String payCode =  merchantPayway.getPayCode();
			paywayMap.put(payCode, map.get(payCode));//商户配置的可用的支付方式
		}
		request.setAttribute("payWays", paywayMap);
		return "scancode/wechat/sweepCollection"; 
	}
	
	/**
	 * 生成付款二维码
	 * @param request
	 * @param response
	 * @return String
	 */
	@RequestMapping("/sweeppay")
	public String sweepPay(ModelMap model,HttpServletRequest request,ScanPayCondition condition){
		ChannelAdmin admin = (ChannelAdmin) request.getSession().getAttribute(Constants.CURRENTUSER);
		log.info("扫码收款用户信息:"+JSONSerializer.toJSON(admin));
		Map<String,String> returnInfo = new HashMap<String,String>();
		String ip = IpUtil.getIpAddr(request);
		OrderBo orderBo = new OrderBo();
		BigDecimal payCash = condition.getOrderAmt();//支付金额
		BigDecimal discountCash = BigDecimal.ZERO;//优惠金额
		BigDecimal actualPayCash = BigDecimal.ZERO;//实际支付金额
		try {
			
			if(!("4".equals(admin.getIdentityFlag()) || "3".equals(admin.getIdentityFlag()))){
				returnInfo.put("returnCode",ScanCodeGetWayErrorCode.SYSTEM_999999.getCode());
				returnInfo.put("returnMsg","该角色不支持扫码收款");
				model.addAttribute("returnInfo", returnInfo);
				return "scancode/paymentResult";
			}
			
			Map<String,BigDecimal> map = merchantcashingActive.calculateCheapCash(admin.getMerchantNo(), condition.getOrderAmt());
			if(map==null||map.isEmpty()){
				actualPayCash = payCash;
			}
			discountCash = map.get("discountCash");
			actualPayCash = map.get("actualPayCash");
			log.info("支付金额:"+payCash+"，优惠金额" + discountCash +"，实际支付金额" + actualPayCash);
			
			//接收参数
			log.info("########pay:"+condition+"########");
			orderBo.setChannelNo(admin.getChannelCode());
			orderBo.setAgentNo(admin.getAgentNo());
			orderBo.setMerchantNo(admin.getMerchantNo());
			orderBo.setCashier(admin.getIdentityNo());
			orderBo.setIp(ip);
			
			//如果说收银员则获取门店信息传入
			if("4".equals(admin.getIdentityFlag())){//收银员是否被禁用
				MerchantCashierCondition merchantCashierCondition = new MerchantCashierCondition();
				merchantCashierCondition.setRecordStatus("Y");
				merchantCashierCondition.setOpenId(admin.getOpenId());
				MerchantCashier cashier = merchantCashierService.findByCondition(merchantCashierCondition);
				if(cashier==null){
					returnInfo.put("returnCode",ScanCodeGetWayErrorCode.SYSTEM_999999.getCode());
					returnInfo.put("returnMsg","收银员被删除,不能执行该操作");
					model.addAttribute("returnInfo", returnInfo);
					return "scancode/paymentResult";
				}
				if(Strings.isEmpty(cashier.getStatus())||"2".equals(cashier.getStatus())){
					returnInfo.put("returnCode",ScanCodeGetWayErrorCode.SYSTEM_999999.getCode());
					returnInfo.put("returnMsg","收银员状态无效,不能执行该操作");
					model.addAttribute("returnInfo", returnInfo);
					return "scancode/paymentResult";
				}
				if(Strings.isEmpty(cashier.getStoreNo())){
					returnInfo.put("returnCode",ScanCodeGetWayErrorCode.SYSTEM_999999.getCode());
					returnInfo.put("returnMsg","收银员门店尚未绑定,不能执行该操作");
					model.addAttribute("returnInfo", returnInfo);
					return "scancode/paymentResult";
				}
				orderBo.setStoreNo(cashier.getStoreNo());
			}
			
			//调用支付逻辑
			orderBo.setQrCode(null);
			orderBo.setPayCode(condition.getPayCode());
			orderBo.setPrice(actualPayCash);
			returnInfo = scanCodeService.pay(orderBo);
			if (!ScanCodeErrorCode.SYSTEM_000000.getCode().equals(returnInfo.get("returnCode"))) {
				model.addAttribute("returnInfo", returnInfo);
				return "scancode/paymentResult";
			}
			
			
		} catch (Exception e) {
			log.error("#########系统错误:"+e+"########"+e);
			returnInfo.put("returnCode",ScanCodeGetWayErrorCode.SYSTEM_999999.getCode());
			returnInfo.put("returnMsg",e.getMessage());
			model.addAttribute("returnInfo", returnInfo);
			return "scancode/paymentResult";
		}
		request.setAttribute("payCode", condition.getPayCode());
		request.setAttribute("payCash", payCash);
		request.setAttribute("discountCash", discountCash);
		request.setAttribute("actualPayCash", actualPayCash);
		request.setAttribute("returnInfo", returnInfo);
		return "scancode/wechat/sweepPay"; 
	}
	
	/**
	 * 获取订单状态
	 * @param request
	 * @param response
	 * @return OrderPayment
	 */
	@RequestMapping("/payresult")
	@ResponseBody
	public OrderPayment payResult(ModelMap model,HttpServletRequest request){
		OrderPaymentCondition orderPaymentCondition = new OrderPaymentCondition();
		orderPaymentCondition.setTradeNo(request.getParameter("tradeNo"));
		List<OrderPayment> list = orderPaymentService.findAll(orderPaymentCondition);
		if(list.size() == 1){
			return list.get(0);
		}
		return null;
	}
}
