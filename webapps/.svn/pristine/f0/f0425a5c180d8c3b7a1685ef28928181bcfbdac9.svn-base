package com.hfepay.scancode.channel.filter;

import java.io.IOException;
import java.util.List;
import java.util.regex.Pattern;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSON;
import com.hfepay.commons.utils.Springs;
import com.hfepay.scancode.api.entity.vo.DataNodeVO;
import com.hfepay.scancode.api.service.ApiChannelWxParamsService;
import com.hfepay.scancode.channel.commons.Constants;
import com.hfepay.scancode.commons.condition.ChannelExpandCondition;
import com.hfepay.scancode.commons.contants.ScanCodeConstants;
import com.hfepay.scancode.commons.entity.ChannelExpand;
import com.hfepay.scancode.commons.vo.ChannelAdminVo;
import com.hfepay.scancode.service.operator.ChannelExpandService;

/**
 * 用于检查用户是否登录了系统的过滤器<br>
 * 创建日期：2016-05-05
 */
public class SessionFilter implements Filter {
 
    /** 要检查的 session 的名称 */
    private String sessionKey;
     
    /** 需要排除（不拦截）的URL的正则表达式 */
    private Pattern excepUrlPattern;
     
    /** 检查不通过时，转发的URL */
    private String forwardUrl;
    private Logger logger = LoggerFactory.getLogger(SessionFilter.class);
    
    private ChannelExpandService channelExpandService = Springs.getBean("channelExpandService");
    private ApiChannelWxParamsService apiChannelWxParamsService = Springs.getBean("apiChannelWxParamsService");
 
    @Override
    public void init(FilterConfig cfg) throws ServletException {
        sessionKey = cfg.getInitParameter("sessionKey");
 
        String excepUrlRegex = cfg.getInitParameter("excepUrlRegex");
        if (!StringUtils.isBlank(excepUrlRegex)) {
            excepUrlPattern = Pattern.compile(excepUrlRegex);
        }
 
        forwardUrl = cfg.getInitParameter("forwardUrl");
    }
 
    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
    	// 如果 sessionKey 为空，则直接放行
        if (StringUtils.isBlank(sessionKey)) {
            chain.doFilter(req, res);
            return;
        }
 
        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) res;
        String servletPath = request.getServletPath();
        String channelCode = null;
        
//        logger.info("#########servletPath["+servletPath+"]#########");
        
        //判断session中的渠道信息是否存在
        Object obj = request.getSession().getAttribute("currentChannelInfo");
        if(null == obj){
        	Object info = null;
			try {
				//截取请求渠道code
				StringBuffer basePath = request.getRequestURL();
				logger.info("#########basePath["+basePath+"]#########");
				
				String path = basePath.substring(0, basePath.indexOf("/", 8));
				logger.info(path.substring(path.indexOf("//")+2, path.length()));
				//判断是否为华付的二级域名
				if(path.indexOf("huaepay.com") == -1){
					path = path.substring(path.indexOf("//")+2, path.length());
					logger.info("#########path["+path+"]#########");
					
					ChannelExpandCondition channelExpandCondition = new ChannelExpandCondition();
					channelExpandCondition.setDomainName(path);	
					List<ChannelExpand> list = channelExpandService.findAll(channelExpandCondition);
					if(list.size() != 0){
						ChannelExpand entity = channelExpandService.findById(list.get(0).getId());
						if(null != entity){
							channelCode = entity.getChannelCode();
						}
					}
					
				}else{
					channelCode = path.substring(path.indexOf("//")+2, path.indexOf("."));
				}
				if(null != channelCode){
					info = channelExpandService.findByChannelCode(channelCode);
				}
				
				logger.info("#########channelCode["+channelCode+"]#########");
				
				//如果渠道被禁用,则404
				if(info != null){
					logger.info("#########info["+JSON.toJSONString(info)+"]#########");
					
					ChannelExpand channelExpand = (ChannelExpand)info;
					if(ScanCodeConstants.STATUS_DISABLE.equals(channelExpand.getStatus())){
						request.getRequestDispatcher("404.jsp").forward(request, response);
			            return;
					}else{
						request.getSession().setAttribute("currentChannelInfo", info);
					}
				}else{
					request.getRequestDispatcher("404.jsp").forward(request, response);
		            return;

				}
				obj = info;
			} catch (Exception e) {
				e.printStackTrace();
				logger.info("*********channelCode:"+channelCode+",渠道信息不存在**********");
			}
        }
        
        ChannelExpand channel = (ChannelExpand) obj;
        // 如果请求的路径与forwardUrl相同，或请求的路径是排除的URL时，则直接放行
        if (servletPath.equals(forwardUrl) || excepUrlPattern.matcher(servletPath).matches()) {
            chain.doFilter(req, res);
            return;
        }
        
        if(Constants.FAIL_STATE.equals(channel.getStatus())){
        	String contextPath = request.getContextPath();
            response.sendRedirect(contextPath + StringUtils.defaultIfEmpty(forwardUrl, "/"));
        }
 
        Object sessionObj = request.getSession().getAttribute(sessionKey);
//        logger.info("#########sessionObj["+JSONObject.fromObject(sessionObj)+"]#########");
        
        // 如果Session为空，则跳转到指定页面
        if (sessionObj == null) {
            String contextPath = request.getContextPath();
            response.sendRedirect(contextPath + StringUtils.defaultIfEmpty(forwardUrl, "/"));
        } else {
        	//根据用户类型判定机构
        	ChannelAdminVo user = (ChannelAdminVo) sessionObj;
        	String organNo = "";
        	if (user.getIdentityFlag().equals(Constants.IDENTITYFLAG_CHANNEL)) {
        		organNo = user.getChannelCode();
			}else {
				organNo = user.getAgentNo();
			}
        	DataNodeVO vo = apiChannelWxParamsService.getWechatConfigEntity(organNo);
        	if(channel.getChannelNo().equalsIgnoreCase(vo.getOrganNo())){
        		chain.doFilter(req, res);
        	}else{
        		 String contextPath = request.getContextPath();
                 response.sendRedirect(contextPath + StringUtils.defaultIfEmpty(forwardUrl, "/"));
        	}
        }
    }
 
    @Override
    public void destroy() {
    }
}
