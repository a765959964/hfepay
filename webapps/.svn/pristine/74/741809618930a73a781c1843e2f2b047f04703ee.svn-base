package com.hfepay.scancode.controller;

import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.hfepay.commons.base.lang.HttpRequestClient;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.scancode.commons.Constants;
import com.hfepay.scancode.commons.WechatConfig;
import com.hfepay.scancode.condition.ChannelAdminCondition;
import com.hfepay.scancode.condition.PlatformQrcodeCondition;
import com.hfepay.scancode.entity.ChannelAdmin;
import com.hfepay.scancode.entity.PlatformQrcode;
import com.hfepay.scancode.enumeration.UseStatus;
import com.hfepay.scancode.service.channel.ChannelAdminService;
import com.hfepay.scancode.service.commons.ScanCodeConstants;
import com.hfepay.scancode.service.operator.PlatformQrcodeService;

import net.sf.json.JSONObject;

/**
 * @ClassName: WechatLoginController
 * @Description: 微信公众号进入
 * @author: husain
 * @date: 2016年10月25日 上午9:53:32
 */
@Controller
@RequestMapping("/user")
public class WechatLoginController {
	public static final Logger logger = LoggerFactory.getLogger(WechatLoginController.class);
	
	@Autowired
	private ChannelAdminService channelAdminService;
	@Autowired
	private PlatformQrcodeService platformQrcodeService;
	@Autowired
	private WechatConfig wechatConfig;
	
	@RequestMapping("/wechat/in")
	public String wechatIn(ModelMap model,HttpServletRequest request){
		String type=request.getParameter("type");
		String browerType = request.getHeader("User-Agent").toLowerCase();
		if(browerType.toLowerCase().indexOf("micromessenger")==-1){//注册只能微信浏览器进入
			request.setAttribute("error", "新用户入驻必须使用微信扫描二维码.");
			return "scancode/wechat/scan_error";
		}
		return "redirect:/user/auth?type="+type;
	}
	
	//静默授权
	@RequestMapping(value = "/auth")
	private void handleAuth(HttpServletResponse response,HttpServletRequest request){
		try {
			String type=request.getParameter("type");
			String backUrl = URLEncoder.encode(wechatConfig.getBackPublicCallback(), "UTF-8");
			String backgo=wechatConfig.getBackgo();//"https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECTURL&response_type=code&scope=snsapi_base#wechat_redirect";
			backgo = backgo.replace("REDIRECTURL", backUrl);
			backgo = backgo.replace("APPID", Constants.APPID);
			backgo = backgo.replace("ORDERID", type);
			response.sendRedirect(backgo);
		}catch(Exception e){
			logger.error("handleAuth error..... "+e);
			e.printStackTrace();
		}
	}
	
	/**
	* @Description 微信授权回调
	* @param
	* @author husain 
	* @Date 2016年10月7日 下午7:32:56
	 */
	@RequestMapping(value = "/callback")
	public String callback(HttpServletRequest request){
		String type = request.getParameter("state");//微信进入的类型：账单，我的，收款
		String code = request.getParameter("code");
		logger.debug("==========code:"+code+"==========");
		Map<String, String> sParaTemp = new HashMap<String, String>();
		sParaTemp.put("appid", Constants.APPID);
		sParaTemp.put("secret", Constants.SECRET);
		sParaTemp.put("code", code);
		sParaTemp.put("grant_type", "authorization_code");
		try {
			String resultJson =HttpRequestClient.invoke_http(Constants.WX_GATEWAY_NEW, generatNameValuePair(sParaTemp), "utf-8");
			JSONObject result= JSONObject.fromObject(resultJson);
			logger.debug("微信获取openId返回json："+resultJson);
			String openId = result.getString("openid");
			logger.debug("公众号进入openid="+openId);
			if(Strings.isNotEmpty(openId)){
				ChannelAdminCondition condition = new ChannelAdminCondition();
				condition.setOpenId(openId);
				ChannelAdmin admin = channelAdminService.findByCondition(condition);
				if(admin==null){//还没有注册
					logger.debug("微信公账号进入还没有注册========admin=null"+" type="+type);
					PlatformQrcodeCondition platformQrcodeCondition = new PlatformQrcodeCondition();
					platformQrcodeCondition.setUseStatus(UseStatus.UNUSE.value());
					platformQrcodeCondition.setAgentNo(ScanCodeConstants.DEFAULE_AGENTNO);
					platformQrcodeCondition.setChannelNo(ScanCodeConstants.DEFAULT_CHANNELNO);
					PlatformQrcode codePlate = platformQrcodeService.findByCondition(platformQrcodeCondition);
					if(codePlate==null){
						logger.debug("微信公账号进入注册,二维码已用完=======codePlate="+codePlate+" type="+type);
						request.setAttribute("error", "二维码已用完，请联系管理员.");
						return "scancode/wechat/scan_error";
					}
					String qrCode = codePlate.getQrCode();
					
					logger.info("in WechatLoginController callback createMerchant start........................openId="+openId);
					long resultCreate = channelAdminService.createMerchantByQrCode(qrCode,openId);
					logger.info("in WechatLoginController callback createMerchant end........................openId="+openId+"  result="+result);
					if(resultCreate>0){//新用户注册成功
						logger.debug("微信公账号进入注册成功========resultCreate="+resultCreate+" type="+type);
						ChannelAdmin adminRE = findByOpenId(openId);
						request.getSession().setAttribute("currentUser",adminRE);
						return "redirect:/scancode/my?type="+type;
					}
					else{//新用户注册失败
						logger.debug("微信公账号进入注册成功========resultCreate="+resultCreate+" type="+type);
						request.setAttribute("error", "内部错误，请联系管理员.");
						return "scancode/wechat/scan_error";
					}
				}
				else{//已注册用户
					logger.debug("已注册用户微信公众号进入========admin.merchantNo="+admin.getMerchantNo()+" type="+type);
					request.getSession().setAttribute("currentUser",admin);
					return "redirect:/scancode/my?type="+type;
				}
			}
			else{
				logger.debug("微信公账号为空========"+" type="+type);
				request.setAttribute("error", "系统获取公众号信息失败.");
				return "scancode/wechat/scan_error";
			}
		} catch (Exception e) {
			logger.error("获取openId异常"+" type="+type, e);
			request.setAttribute("error", "系统获取公众号信息失败.");
			return "scancode/wechat/scan_error";
		}
	}
	
	private static List<NameValuePair> generatNameValuePair(Map<String, String> properties) {
        List<NameValuePair> list = new ArrayList<NameValuePair>();
        for (Map.Entry<String, String> entry : properties.entrySet()) {
        	NameValuePair nameValuePair = new BasicNameValuePair(entry.getKey(),entry.getValue());
        	list.add(nameValuePair);
        }
        return list;
    }
	
	/***根据openId检测用户是否注册过**/
	private ChannelAdmin findByOpenId(String openId){
		ChannelAdminCondition condition = new ChannelAdminCondition();
		condition.setOpenId(openId);
		ChannelAdmin admin = channelAdminService.findByCondition(condition);
		return admin;
	}
}
