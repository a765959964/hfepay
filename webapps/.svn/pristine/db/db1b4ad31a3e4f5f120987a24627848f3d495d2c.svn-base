package com.hfepay.scancode.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.hfepay.scancode.commons.QrStatus;
import com.hfepay.scancode.condition.PlatformQrcodeCondition;
import com.hfepay.scancode.entity.AgentBase;
import com.hfepay.scancode.entity.PlatformQrcode;
import com.hfepay.scancode.enumeration.UseStatus;
import com.hfepay.scancode.service.operator.AgentBaseService;
import com.hfepay.scancode.service.operator.PlatformQrcodeService;

/**
 * 扫码支付、商户入驻页面
 * @author Administrator
 *
 */
@Controller
@RequestMapping("/agentScan")
public class ScanCodeAgentPromotionController {
	
	public static final Logger log = LoggerFactory.getLogger(ScanCodeAgentPromotionController.class);
	
	@Autowired
	private AgentBaseService agentBaseService;
	
	@Autowired
	private PlatformQrcodeService platformQrcodeService;
	
	@RequestMapping("/operate")
	public String paymentpage(ModelMap model,HttpServletRequest request){
		String agentNo = request.getParameter("agentNo");
		log.info("###########代理商推广注册agentNo["+agentNo+"]###########");
		
		String browerType = request.getHeader("User-Agent").toLowerCase();
		if(browerType.toLowerCase().indexOf("micromessenger")==-1){//注册只能微信浏览器进入
			request.setAttribute("error", "新用户入驻必须使用微信扫描二维码");
			log.error("###########代理商推广注册agentNo["+agentNo+"],新用户入驻必须使用微信扫描二维码###########");
			return "scancode/wechat/scan_error";
		}
		
		//判定代理商是否存在
		AgentBase agentBase = agentBaseService.findByAgentNo(agentNo);
		if (null == agentBase) {
			request.setAttribute("error", "代理商不存在");
			log.error("###########代理商推广注册agentNo["+agentNo+"],代理商不存在###########");
			return "scancode/wechat/scan_error";
		}
		
		//判定代理商二维码
		if (agentBase.getLessTotal() <= 0) {
			request.setAttribute("error", "代理商无可用二维码");
			log.error("###########代理商推广注册agentNo["+agentNo+"],代理商无可用二维码###########");
			return "scancode/wechat/scan_error";
		}
		
		//获取代理商二维码
		PlatformQrcodeCondition platformQrcodeCondition = new PlatformQrcodeCondition();
		platformQrcodeCondition.setAgentNo(agentNo);
		platformQrcodeCondition.setQrStatus(QrStatus.QR_1.getCode());
		platformQrcodeCondition.setUseStatus(UseStatus.UNUSE.value());
		List<PlatformQrcode> platfromQrCodeList = platformQrcodeService.findAll(platformQrcodeCondition);
		if (null == platfromQrCodeList || platfromQrCodeList.size() < 0) {
			request.setAttribute("error", "代理商无可用二维码");
			log.error("###########代理商推广注册agentNo["+agentNo+"],平台二维码中无代理商对应二维码,代码有问题###########");
			return "scancode/wechat/scan_error";
		}
		
		String qrCode = platfromQrCodeList.get(0).getQrCode();
		String channelNo = platfromQrCodeList.get(0).getChannelNo();
		log.info("###########代理商推广注册agentNo["+agentNo+"],qrCode["+qrCode+"]开始注册###########");
		
		return "redirect:/scan/authNew?qrCode="+qrCode+"&channelNo="+channelNo;
	}
	
}
