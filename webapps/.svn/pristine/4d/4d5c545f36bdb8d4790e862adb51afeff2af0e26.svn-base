package com.hfepay.scancode.controller;

import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.hfepay.common.web.controller.BaseController;
import com.hfepay.commons.base.lang.HttpRequestClient;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.scancode.commons.Constants;
import com.hfepay.scancode.condition.ChannelAdminCondition;
import com.hfepay.scancode.entity.ChannelAdmin;
import com.hfepay.scancode.entity.MerchantInfo;
import com.hfepay.scancode.entity.PlatformQrcode;
import com.hfepay.scancode.enumeration.UseStatus;
import com.hfepay.scancode.service.channel.ChannelAdminService;
import com.hfepay.scancode.service.operator.MerchantInfoService;
import com.hfepay.scancode.service.operator.PlatformQrcodeService;

import net.sf.json.JSONObject;

/**
 * @ClassName: ScanCodeOperatorController
 * @Description: 扫码的之后的动作：未被注册：注册，已被注册：付款
 * @author: husain
 * @date: 2016年10月24日 下午3:02:13
 */
@Controller
@RequestMapping("/scan")
public class ScanCodeOperatorController extends BaseController{

	private Logger logger = LoggerFactory.getLogger(getClass());
	
	@Autowired
	private PlatformQrcodeService platformQrcodeService;
	@Autowired
	private ChannelAdminService channelAdminService;
	@Autowired
	private MerchantInfoService merchantInfoService;
	
	@RequestMapping("/operate")
	public String apply2(ModelMap model,HttpServletRequest request,HttpServletResponse response){
		String browerType = request.getHeader("User-Agent").toLowerCase();
		//else if(browerType.toLowerCase().indexOf("alipayclient")!=-1){//支付宝
		String qrCode = request.getParameter("qrCode");
		if(Strings.isEmpty(qrCode)){//参数为空
			request.setAttribute("error", "二维码不存在");
			return "scancode/wechat/scan_error";
		}
		PlatformQrcode code = platformQrcodeService.findByQrcode(qrCode);
		if(null==code||null==code.getUseStatus()){//马不存在
			request.setAttribute("error", "二维码不存在或状态有问题");
			return "scancode/wechat/scan_error";
		}else{
			//使用状态是否为1
			String status = code.getUseStatus();
			if(status.equals(UseStatus.UNUSE.value())){//未使用相当于注册操作
				if(browerType.toLowerCase().indexOf("micromessenger")==-1){//注册只能微信浏览器进入
					request.setAttribute("error", "新用户入驻必须使用微信扫描二维码.");
					return "scancode/wechat/scan_error";
				}
				return "redirect:/scan/auth?qrCode="+qrCode;
			}else if(status.equals(UseStatus.USED.value())){//支付页面
				request.setAttribute("qrCode", qrCode);
				MerchantInfo info = merchantInfoService.findByMerchantNo(code.getMerchantNo());
				request.setAttribute("name", info.getMerchantName());
				return "scancode/payment";
			}
		}
		
		return null;
	}
	
	//静默授权
	@RequestMapping(value = "/auth")
	private void handleAuth(HttpServletResponse response,HttpServletRequest request){
		try {
			String qrCode = request.getParameter("qrCode");
			String backUrl = URLEncoder.encode("http://wx.hfepay.cn/hfepay-scancode-gateway-webapp/scan/callback", "UTF-8");
			String backgo="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECTURL&response_type=code&scope=snsapi_base&state=ORDERID#wechat_redirect";
			backgo = backgo.replace("REDIRECTURL", backUrl);
			backgo = backgo.replace("APPID", Constants.APPID);
			backgo = backgo.replace("ORDERID", qrCode);
			response.sendRedirect(backgo);
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	/**
	* @Description 微信授权回调
	* @param
	* @author husain 
	* @Date 2016年10月7日 下午7:32:56
	 */
	@RequestMapping(value = "/callback")
	public String callback(HttpServletRequest request){
		String qrCode = request.getParameter("state");
		String code = request.getParameter("code");
		logger.debug("==========code:"+code+",qrCode:"+qrCode+"==========");
		Map<String, String> sParaTemp = new HashMap<String, String>();
		sParaTemp.put("appid", Constants.APPID);
		sParaTemp.put("secret", Constants.SECRET);
		sParaTemp.put("code", code);
		sParaTemp.put("grant_type", "authorization_code");
		try {
			String resultJson =HttpRequestClient.invoke_http(Constants.WX_GATEWAY_NEW, generatNameValuePair(sParaTemp), "utf-8");
			JSONObject result= JSONObject.fromObject(resultJson);
			logger.debug("微信获取openId返回json："+resultJson);
			logger.debug(resultJson);
			String openId = result.getString("openid");
			System.out.println(openId);
			return "redirect:/scan/createMerchant?qrCode="+qrCode+"&openId="+openId;
		} catch (Exception e) {
			logger.error("获取openId异常", e);
			request.setAttribute("error", "授权公众号失败");
			return "scancode/wechat/scan_error";
		}
	}
	
	/**获取openId之后,添加一个商户信息，和一个登录账号*/
	@RequestMapping("/createMerchant")
	public String createMerchant(ModelMap model,HttpServletRequest request){
		String qrCode = request.getParameter("qrCode");
		String openId = request.getParameter("openId");
		long result = channelAdminService.createMerchantByQrCode(qrCode,openId);
		//将登录信息放入session
		if(result>0){
			ChannelAdminCondition condition = new ChannelAdminCondition();
			condition.setOpenId(openId);
			ChannelAdmin admin = channelAdminService.findByCondition(condition);
			request.getSession().setAttribute("currentUser",admin);
		}
		return "redirect:/scancode/my";
	}
	
	private static List<NameValuePair> generatNameValuePair(Map<String, String> properties) {
        List<NameValuePair> list = new ArrayList<NameValuePair>();
        for (Map.Entry<String, String> entry : properties.entrySet()) {
        	NameValuePair nameValuePair = new BasicNameValuePair(entry.getKey(),entry.getValue());
        	list.add(nameValuePair);
        }
        return list;
    }
}
