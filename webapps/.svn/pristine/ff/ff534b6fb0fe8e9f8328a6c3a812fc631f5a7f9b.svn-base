package com.hfepay.notify.controller;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hfepay.epay.service.WeChatNotifyService;
import com.hfepay.notify.util.NotifyConstants;
import com.tencent.common.Util;

@Controller
@RequestMapping("/notify")
public class WeChatPayPubController {
	
	Logger logger = LoggerFactory.getLogger(WeChatPayPubController.class);
	
	@Autowired
	private WeChatNotifyService wechatNotifyService;
	
	@RequestMapping("/weChatPayPubNotify")
	@ResponseBody
	public void getWeChatPubInfo(HttpServletRequest request, HttpServletResponse response) {
		PrintWriter out = null;
		InputStream inStream = null;
		try {
			out = response.getWriter();
			inStream = request.getInputStream();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		logger.info("----微信公众号回调参数 二进制处理---begin--");
		ByteArrayOutputStream outSteam = new ByteArrayOutputStream();
		try {
			byte[] buffer = new byte[1024];
			int len = 0;
			while ((len = inStream.read(buffer)) != -1) {
				outSteam.write(buffer, 0, len);
			}
			outSteam.close();
			inStream.close();
			
			
			//测试代码
			StringBuffer sb = new StringBuffer();
			Map m = new HashMap();
			
			m.put("out_trade_no", "JY20160714000045");
			m.put("total_fee", "1");
			m.put("return_code", "SUCCESS");
			m.put("result_code", "SUCCESS");
			sb.append("<xml>");
			
			for (Iterator iterator = m.entrySet().iterator(); iterator.hasNext();) {
				Map.Entry entry = (Map.Entry)iterator.next();
				String k = (String)entry.getKey();
				String v = (String)entry.getValue();
				if ("attach".equalsIgnoreCase(k)||"body".equalsIgnoreCase(k)||"sign".equalsIgnoreCase(k)) {
					sb.append("<"+k+">"+"<![CDATA["+v+"]]></"+k+">");
				}else {
					sb.append("<"+k+">"+v+"</"+k+">");
				}
			}
			sb.append("</xml>");
			String resultXml = sb.toString();
			
			
			
			//String resultXml = new String(outSteam.toByteArray(), "utf-8");
			logger.info("----微信回调参数 二进制处理---end--");
			logger.info("微信回调参数xml格式："+resultXml);
			logger.info("处理微信回调参数和签名验证");
			String returnXml = wechatNotifyService.handleCallBackOrderHandelFunction(resultXml,NotifyConstants.WECHATJS);
			logger.info("微信回调成功");
			out.print(new ByteArrayInputStream(returnXml.getBytes(Charset.forName("UTF-8"))));
		}catch(Exception e1) {
			e1.printStackTrace();
			logger.info("微信回调失败");
		    out.print(new ByteArrayInputStream(Util.setXML(Util.FAIL, "后台系统异常").getBytes(Charset.forName("UTF-8"))));
		}
		out.close();
	}
}
