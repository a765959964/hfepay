package com.hfepay.notify.controller;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hfepay.epay.service.AlipayPayNotifyService;
import com.hfepay.notify.util.NotifyConstants;
import com.hfepay.order.bo.OrderPayCallBackBo;
import com.hfepay.order.service.OrderPayCallBackService;

@Controller
@RequestMapping("/notify")
public class AlipayController {
	
	Logger logger = LoggerFactory.getLogger(AlipayController.class);
	
	@Autowired
	private OrderPayCallBackService orderPayCallBackService;
	
	@Autowired
	private AlipayPayNotifyService aliPayNotifyService;
	
	@RequestMapping("/alipayNotify")
	@ResponseBody
	public String getAlipayInfo(HttpServletRequest request, HttpServletResponse response) {
		//获取支付宝反馈信息      
		Map<String, String> params = new HashMap<String, String>();
		Map requestParams = request.getParameterMap();
		for(Iterator iter = requestParams.keySet().iterator();iter.hasNext();){           
			String name = (String) iter.next();   
			String[] values = (String[]) requestParams.get(name);
			String valueStr = "";
			for (int i = 0; i < values.length; i++) {
				valueStr = (i == values.length - 1) ? valueStr + values[i] : valueStr + values[i] + ",";
			}
			// 乱码解决
//			try {
//				valueStr = new String(valueStr.getBytes("ISO-8859-1"), "gbk");
//			} catch (UnsupportedEncodingException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
			params.put(name, valueStr);
		}
		logger.info("----支付宝请求参数："+params.toString());
		logger.info("----开始验证签名-----");
		// 根据支付宝的通知返回参数 计算得出通知验证结果 
		if(!aliPayNotifyService.isValidate(params)) {
			logger.info("----验证签名失败-----");
			return NotifyConstants.NOTIFY_FAIL;
		}
		//封装参数
		logger.info("----获取回调参数-----");
		OrderPayCallBackBo order = aliPayNotifyService.alipayRequsetHandle(params);
		if(order != null){
			logger.info("total_fee="+order.getTranAmt()+"  &&tradeId="+order.getTradeId()
			+"  &&tradeStatus="+order.getTradeStatus());
			try {
				if(order.getTradeStatus().equals(NotifyConstants.AIL_WAIT_BUYER_PAY)){
					//交易等待付款
					return NotifyConstants.NOTIFY_SUCCESS;
				}else if(order.getTradeStatus().equals(NotifyConstants.AIL_TRADE_FINISHED)){
					//交易完成
					return NotifyConstants.NOTIFY_SUCCESS;
				}else if(order.getTradeStatus().equals(NotifyConstants.AIL_TRADE_SUCCESS)){
					order.setTradeStatus(NotifyConstants.RETURN_SUCCESS);
					//调用回调接口
					orderPayCallBackService.callbackPay(order);
					logger.info("----回调成功-----");
					return NotifyConstants.NOTIFY_SUCCESS;
				}else{
					order.setTradeStatus(NotifyConstants.RETURN_FAIL);
					//调用回调接口
					orderPayCallBackService.callbackPay(order);
					logger.info("----回调失败----");
					return NotifyConstants.NOTIFY_FAIL;
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				logger.info("----回调失败-----");
				return NotifyConstants.NOTIFY_FAIL;
			}
		}
		return null;
	}
}
