package com.hfepay.scancode.controller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.alibaba.fastjson.JSON;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.scancode.bo.MerchantNotifyMessage;
import com.hfepay.scancode.commons.ScanCodeGetWayErrorCode;
import com.hfepay.scancode.service.operator.PlatformSecretKeyService;
import com.hfepay.scancode.service.payway.CallBackService;
import com.hfepay.scancode.signature.EncrypterUtil;

/**
 * 回调
 * @author Administrator
 *
 */
@Controller
@RequestMapping("/scancodecallback")
public class CallbackController {
	
	public static final Logger log = LoggerFactory.getLogger(ScanCodeController.class);
	
	@Autowired
	private CallBackService callBackService;
	
	/**
	 * 支付回调
	 * @param request
	 * @param response
	 * @return returnInfo
	 */
	@RequestMapping("/payCallBack")
	public void scanCodePayCallBack(HttpServletRequest request,HttpServletResponse response){
		Map<String,String> returnInfo = new HashMap<String,String>();
		
		log.info("#########开始执行支付回调#######");
		String inputLine;
		String notityJson = "";
		
		try {
			while ((inputLine = request.getReader().readLine()) != null) {
				notityJson += inputLine;
			}
			request.getReader().close();
			log.info("==>请求数据包:"+notityJson);
			Map responseMap = JSON.parseObject(notityJson, Map.class);
			Map header= JSON.parseObject(responseMap.get("head").toString(), Map.class);
			String content = (String) responseMap.get("body");
			String sign = (String) header.get("sign");
			String encryptKey = (String) header.get("encryptKey");
			log.info("==>解密前body:"+content);
			log.info("==>解密前sign:"+sign);
			log.info("==>解密前encryptKey:"+encryptKey);
			
			if (content != null && sign != null && encryptKey != null) {
				responseMap.put("body", EncrypterUtil.decode(content, sign, encryptKey));
			}
			log.info("==>解密后body:"+responseMap.toString());
			
			String body = (String) responseMap.get("body");
			
			MerchantNotifyMessage merchantNotifyMessage = JSON.parseObject(body, MerchantNotifyMessage.class);
		
			
			//校验参数
			returnInfo = checkCallBackOrder(merchantNotifyMessage);
			if (null != returnInfo) {
				log.error("#########系统错误:"+JSON.toJSONString(returnInfo)+"########");
			}
			
			//回调逻辑
			callBackService.payCallBack(merchantNotifyMessage);
			
			response.getWriter().print(ScanCodeGetWayErrorCode.SYSTEM_000000.getCode());
			response.getWriter().close();
		} catch (Exception e) {
			log.error("#########支付回调异常#######");
			e.printStackTrace();
		}
	}

	/**
	 * 支付回调数据校验
	 * @param bo
	 * @return Map<String,String>
	 */
	private Map<String,String> checkCallBackOrder(MerchantNotifyMessage bo) {
		if (Strings.isEmpty(bo.getChannelNo())) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"渠道编号不能为空");
		}
		if (Strings.isEmpty(bo.getOrderNo())) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"订单编号不能为空");
		}
		if (Strings.isEmpty(bo.getUserOrderNo())) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"商户订单号不能为空");
		}
		if (Strings.isEmpty(bo.getMerchantNo())) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"商户支付编号不能为空");
		}
		if (Strings.isEmpty(bo.getMerchantName())) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"商户名称不能为空");
		}
		if (Strings.isEmpty(bo.getPayType())) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"支付类型不能为空");
		}
		if (null == bo.getOrderAmt()) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"支付总金额不能为空");
		}
		if (Strings.isEmpty(bo.getOrderTitle())) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"订单标题不能为空");
		}
		if (Strings.isEmpty(bo.getOrderDesc())) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"订单描述不能为空");
		}
		if (Strings.isEmpty(bo.getBeginTime())) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"订单开始时间不能为空");
		}
		if (Strings.isEmpty(bo.getEndTime())) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"订单结束时间不能为空");
		}
		if (Strings.isEmpty(bo.getStatus())) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"支付状态不能为空");
		}
		if (Strings.isEmpty(bo.getErrorMsg())) {
			return returnInfo(ScanCodeGetWayErrorCode.VALIDAT_100002.getCode(),"支付错误消息");
		}
		
		return null;
	}
	
	private Map<String,String> returnInfo(String returnCode,String returnMsg) {
		Map<String,String> returnInfo = new HashMap<String,String>();
		returnInfo.put("returnCode", returnCode);
		returnInfo.put("returnMsg", returnMsg);
		return returnInfo;
	}
}
