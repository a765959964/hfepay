/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2016
 */package com.hfepay.scancode.service.operator.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.hfepay.commons.criteria.Criteria;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.commons.criteria.Cnd;
import com.hfepay.commons.criteria.CriteriaBuilder;
import com.hfepay.commons.criteria.Order;
import com.hfepay.commons.utils.PagingResult;

import com.hfepay.scancode.dao.AgentBaseDAO;
import com.hfepay.scancode.entity.AgentBase;
import com.hfepay.scancode.service.channel.DataNodeService;
import com.hfepay.scancode.service.commons.ScanCodeConstants;
import com.hfepay.scancode.service.operator.AgentBaseService;
import com.hfepay.scancode.condition.AgentBaseCondition;
import com.hfepay.scancode.condition.DataNodeCondition;

@Service("agentBaseService")
public class AgentBaseServiceImpl implements AgentBaseService {
	
	@Autowired
    private AgentBaseDAO agentBaseDAO;
	
	@Autowired
	private DataNodeService dataNodeService;
    
    /**
	 * 列表(分页)
	 * @param agentBaseCondition 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-19 16:04:33
	 */
    @Override
	public PagingResult<AgentBase> findPagingResult(AgentBaseCondition agentBaseCondition){
		CriteriaBuilder cb = Cnd.builder(AgentBase.class);
		if(!Strings.isEmpty(agentBaseCondition.getId())){
			cb.andEQ("id", agentBaseCondition.getId());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentNo())){
			cb.andEQ("agentNo", agentBaseCondition.getAgentNo());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentName())){
			cb.andEQ("agentName", agentBaseCondition.getAgentName());
		}
		if(!Strings.isEmpty(agentBaseCondition.getChannelNo())){
			cb.andEQ("channelNo", agentBaseCondition.getChannelNo());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentPreCode())){
			cb.andEQ("agentPreCode", agentBaseCondition.getAgentPreCode());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentType())){
			cb.andEQ("agentType", agentBaseCondition.getAgentType());
		}
		if(!Strings.isEmpty(agentBaseCondition.getName())){
			cb.andEQ("name", agentBaseCondition.getName());
		}
		if(!Strings.isEmpty(agentBaseCondition.getMobile())){
			cb.andEQ("mobile", agentBaseCondition.getMobile());
		}
		if(!Strings.isEmpty(agentBaseCondition.getParentNo())){
			cb.andEQ("parentNo", agentBaseCondition.getParentNo());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentLevel())){
			cb.andEQ("agentLevel", agentBaseCondition.getAgentLevel());
		}
		if(null != agentBaseCondition.getQrTotal()){
			cb.andEQ("qrTotal", agentBaseCondition.getQrTotal());
		}
		if(null != agentBaseCondition.getUseTotal()){
			cb.andEQ("useTotal", agentBaseCondition.getUseTotal());
		}
		if(null != agentBaseCondition.getLessTotal()){
			cb.andEQ("lessTotal", agentBaseCondition.getLessTotal());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentFlag())){
			cb.andEQ("agentFlag", agentBaseCondition.getAgentFlag());
		}
		if(!Strings.isEmpty(agentBaseCondition.getStatus())){
			cb.andEQ("status", agentBaseCondition.getStatus());
		}
		if(!Strings.isEmpty(agentBaseCondition.getRecordStatus())){
			cb.andEQ("recordStatus", agentBaseCondition.getRecordStatus());
		}
		if(null != agentBaseCondition.getCreateTime()){
			cb.andEQ("createTime", agentBaseCondition.getCreateTime());
		}

		if(!Strings.isEmpty(agentBaseCondition.getOperator())){
			cb.andEQ("operator", agentBaseCondition.getOperator());
		}

		if(!Strings.isEmpty(agentBaseCondition.getRemark())){
			cb.andLike("remark", agentBaseCondition.getRemark());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp1())){
			cb.andEQ("temp1", agentBaseCondition.getTemp1());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp2())){
			cb.andEQ("temp2", agentBaseCondition.getTemp2());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp3())){
			cb.andEQ("temp3", agentBaseCondition.getTemp3());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp4())){
			cb.andEQ("temp4", agentBaseCondition.getTemp4());
		}
		cb.orderBy("createTime", Order.DESC);
		//排序
		if(!Strings.isEmpty(agentBaseCondition.getOrderBy())){
			if(agentBaseCondition.getOrderBy().indexOf(",")>0){
				String[] orderBys = agentBaseCondition.getOrderBy().split(",");
				String[] orders = agentBaseCondition.getOrder().split(",");
				for(int i=0; i<orderBys.length && i<orders.length; i++){
					cb.orderBy(orderBys[i], Order.valueOf(orders[i]));
				}
			}else{
				cb.orderBy(agentBaseCondition.getOrderBy(), Order.valueOf(agentBaseCondition.getOrder()));
			}
		}
		Criteria buildCriteria = cb.buildCriteria();
		buildCriteria.limit(Long.valueOf(agentBaseCondition.getFirst()), Long.valueOf(agentBaseCondition.getLast()));
		return agentBaseDAO.findPagingResult(buildCriteria);
	}
	
	/**
	 * 列表
	 * @param agentBase 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-19 16:04:33
	 */
	@Override
	public List<AgentBase> findAll(AgentBaseCondition agentBaseCondition){
		CriteriaBuilder cb = Cnd.builder(AgentBase.class);
		if(!Strings.isEmpty(agentBaseCondition.getId())){
			cb.andEQ("id", agentBaseCondition.getId());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentNo())){
			cb.andEQ("agentNo", agentBaseCondition.getAgentNo());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentName())){
			cb.andEQ("agentName", agentBaseCondition.getAgentName());
		}
		if(!Strings.isEmpty(agentBaseCondition.getChannelNo())){
			cb.andEQ("channelNo", agentBaseCondition.getChannelNo());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentPreCode())){
			cb.andEQ("agentPreCode", agentBaseCondition.getAgentPreCode());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentType())){
			cb.andEQ("agentType", agentBaseCondition.getAgentType());
		}
		if(!Strings.isEmpty(agentBaseCondition.getName())){
			cb.andEQ("name", agentBaseCondition.getName());
		}
		if(!Strings.isEmpty(agentBaseCondition.getMobile())){
			cb.andEQ("mobile", agentBaseCondition.getMobile());
		}
		if(!Strings.isEmpty(agentBaseCondition.getParentNo())){
			cb.andEQ("parentNo", agentBaseCondition.getParentNo());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentLevel())){
			cb.andEQ("agentLevel", agentBaseCondition.getAgentLevel());
		}
		if(null != agentBaseCondition.getQrTotal()){
			cb.andEQ("qrTotal", agentBaseCondition.getQrTotal());
		}
		if(null != agentBaseCondition.getUseTotal()){
			cb.andEQ("useTotal", agentBaseCondition.getUseTotal());
		}
		if(null != agentBaseCondition.getLessTotal()){
			cb.andEQ("lessTotal", agentBaseCondition.getLessTotal());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentFlag())){
			cb.andEQ("agentFlag", agentBaseCondition.getAgentFlag());
		}
		if(!Strings.isEmpty(agentBaseCondition.getStatus())){
			cb.andEQ("status", agentBaseCondition.getStatus());
		}
		if(!Strings.isEmpty(agentBaseCondition.getRecordStatus())){
			cb.andEQ("recordStatus", agentBaseCondition.getRecordStatus());
		}
		if(null != agentBaseCondition.getCreateTime()){
			cb.andEQ("createTime", agentBaseCondition.getCreateTime());
		}

		if(!Strings.isEmpty(agentBaseCondition.getOperator())){
			cb.andEQ("operator", agentBaseCondition.getOperator());
		}

		if(!Strings.isEmpty(agentBaseCondition.getRemark())){
			cb.andLike("remark", agentBaseCondition.getRemark());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp1())){
			cb.andEQ("temp1", agentBaseCondition.getTemp1());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp2())){
			cb.andEQ("temp2", agentBaseCondition.getTemp2());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp3())){
			cb.andEQ("temp3", agentBaseCondition.getTemp3());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp4())){
			cb.andEQ("temp4", agentBaseCondition.getTemp4());
		}
		Criteria buildCriteria = cb.buildCriteria();
		return agentBaseDAO.findByCriteria(buildCriteria);
	}
	
	/**
	 * 主键查找
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-19 16:04:33
	 */
	@Override
	public AgentBase findById(String id){
		return agentBaseDAO.get(id);
	}
	
	/**
	 * 新增
	 * @param agentBaseCondition
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-19 16:04:33
	 */
	@Override
	public long insert(AgentBaseCondition agentBaseCondition){
		AgentBase agentBase = new AgentBase();
		BeanUtils.copyProperties(agentBaseCondition, agentBase);
		return agentBaseDAO.insert(agentBase);
	}

	/**
	 * 删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-19 16:04:33
	 */
	@Override
	public long deleteById(String id){
		return agentBaseDAO.deleteById(id);
	}
	
	/**
	 * 条件删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-19 16:04:33
	 */
	@Override
	public long deleteByCriteria(Criteria criteria){
		return agentBaseDAO.deleteByCriteria(criteria);
	}
	
	/**
	 * 行数汇总
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-19 16:04:33
	 */
	@Override
	public long countByCriteria(Criteria criteria){
		return agentBaseDAO.countByCriteria(criteria);
	}
	
	/**
	 * 更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-19 16:04:33
	 */
	@Override
	public long update(AgentBaseCondition agentBaseCondition){
		AgentBase agentBase = new AgentBase();
		BeanUtils.copyProperties(agentBaseCondition, agentBase);
		return agentBaseDAO.update(agentBase);
	}
	
	/**
	 * 条件更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-19 16:04:33
	 */
	@Override
	public long updateByCriteria(AgentBaseCondition agentBaseCondition){
		AgentBase agentBase = new AgentBase();
		BeanUtils.copyProperties(agentBaseCondition, agentBase);
		CriteriaBuilder cb = Cnd.builder(AgentBase.class);
		if(!Strings.isEmpty(agentBaseCondition.getId())){
			cb.andEQ("id", agentBaseCondition.getId());
		}
		Criteria buildCriteria = cb.buildCriteria();
		return agentBaseDAO.updateByCriteria(agentBase,buildCriteria);
	}
	
	/**
	 * 状态更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-19 16:04:33
	 */
	@Override
	public long updateStatus(String id,String status){
		return agentBaseDAO.updateStatus(id,status);
	}

	@Override
	public List<AgentBase> findAllByAgentNo(AgentBaseCondition agentBaseCondition, List<String> list) {
		CriteriaBuilder cb = Cnd.builder(AgentBase.class);
		if(!Strings.isEmpty(agentBaseCondition.getId())){
			cb.andEQ("id", agentBaseCondition.getId());
		}
//		if(!Strings.isEmpty(agentBaseCondition.getAgentNo())){
//			cb.andEQ("agentNo", agentBaseCondition.getAgentNo());
//		}
		if(list != null && list.size() > 0){
			cb.andIn("agentNo", list);
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentName())){
			cb.andEQ("agentName", agentBaseCondition.getAgentName());
		}
		if(!Strings.isEmpty(agentBaseCondition.getChannelNo())){
			cb.andEQ("channelNo", agentBaseCondition.getChannelNo());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentPreCode())){
			cb.andEQ("agentPreCode", agentBaseCondition.getAgentPreCode());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentType())){
			cb.andEQ("agentType", agentBaseCondition.getAgentType());
		}
		if(!Strings.isEmpty(agentBaseCondition.getName())){
			cb.andEQ("name", agentBaseCondition.getName());
		}
		if(!Strings.isEmpty(agentBaseCondition.getMobile())){
			cb.andEQ("mobile", agentBaseCondition.getMobile());
		}
		if(!Strings.isEmpty(agentBaseCondition.getParentNo())){
			cb.andEQ("parentNo", agentBaseCondition.getParentNo());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentLevel())){
			cb.andEQ("agentLevel", agentBaseCondition.getAgentLevel());
		}
		if(null != agentBaseCondition.getQrTotal()){
			cb.andEQ("qrTotal", agentBaseCondition.getQrTotal());
		}
		if(null != agentBaseCondition.getUseTotal()){
			cb.andEQ("useTotal", agentBaseCondition.getUseTotal());
		}
		if(null != agentBaseCondition.getLessTotal()){
			cb.andEQ("lessTotal", agentBaseCondition.getLessTotal());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentFlag())){
			cb.andEQ("agentFlag", agentBaseCondition.getAgentFlag());
		}
		if(!Strings.isEmpty(agentBaseCondition.getStatus())){
			cb.andEQ("status", agentBaseCondition.getStatus());
		}
		if(!Strings.isEmpty(agentBaseCondition.getRecordStatus())){
			cb.andEQ("recordStatus", agentBaseCondition.getRecordStatus());
		}
		if(null != agentBaseCondition.getCreateTime()){
			cb.andEQ("createTime", agentBaseCondition.getCreateTime());
		}

		if(!Strings.isEmpty(agentBaseCondition.getOperator())){
			cb.andEQ("operator", agentBaseCondition.getOperator());
		}

		if(!Strings.isEmpty(agentBaseCondition.getRemark())){
			cb.andLike("remark", agentBaseCondition.getRemark());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp1())){
			cb.andEQ("temp1", agentBaseCondition.getTemp1());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp2())){
			cb.andEQ("temp2", agentBaseCondition.getTemp2());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp3())){
			cb.andEQ("temp3", agentBaseCondition.getTemp3());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp4())){
			cb.andEQ("temp4", agentBaseCondition.getTemp4());
		}
		Criteria buildCriteria = cb.buildCriteria();
		return agentBaseDAO.findByCriteria(buildCriteria);
	}
	@Override
	public void saveAgentBaseAndNode(AgentBaseCondition agentBaseCondition){
		AgentBase agentBase = new AgentBase();
		BeanUtils.copyProperties(agentBaseCondition, agentBase);
		agentBaseDAO.insert(agentBase);
		DataNodeCondition dataNodeCondition = new DataNodeCondition();
		dataNodeCondition.setId(Strings.getUUID());
		dataNodeCondition.setCurrentNode(agentBaseCondition.getAgentNo());
		dataNodeCondition.setParentNode(agentBaseCondition.getParentNo());
		dataNodeCondition.setCurrentNodeLevel(agentBaseCondition.getAgentLevel());
		dataNodeCondition.setCreateTime(new Date());
		dataNodeCondition.setIdentityFlag("2");
		dataNodeCondition.setOperator(agentBaseCondition.getOperator());
		dataNodeService.doSaveNodeRelations(dataNodeCondition);
	}
	
	/**
	 * 列表(分页)
	 * @param agentBaseCondition 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-19 16:04:33
	 */
    @Override
	public PagingResult<AgentBase> findPagingResultByAgentNo(AgentBaseCondition agentBaseCondition,List<String> list){
		CriteriaBuilder cb = Cnd.builder(AgentBase.class);
		if(!Strings.isEmpty(agentBaseCondition.getId())){
			cb.andEQ("id", agentBaseCondition.getId());
		}
		if(list != null && list.size() > 0){
			cb.andIn("agentNo", list);
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentNo())){
			cb.andEQ("agentNo", agentBaseCondition.getAgentNo());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentName())){
			cb.andEQ("agentName", agentBaseCondition.getAgentName());
		}
		if(!Strings.isEmpty(agentBaseCondition.getChannelNo())){
			cb.andEQ("channelNo", agentBaseCondition.getChannelNo());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentPreCode())){
			cb.andEQ("agentPreCode", agentBaseCondition.getAgentPreCode());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentType())){
			cb.andEQ("agentType", agentBaseCondition.getAgentType());
		}
		if(!Strings.isEmpty(agentBaseCondition.getName())){
			cb.andEQ("name", agentBaseCondition.getName());
		}
		if(!Strings.isEmpty(agentBaseCondition.getMobile())){
			cb.andEQ("mobile", agentBaseCondition.getMobile());
		}
		if(!Strings.isEmpty(agentBaseCondition.getParentNo())){
			cb.andEQ("parentNo", agentBaseCondition.getParentNo());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentLevel())){
			cb.andEQ("agentLevel", agentBaseCondition.getAgentLevel());
		}
		if(null != agentBaseCondition.getQrTotal()){
			cb.andEQ("qrTotal", agentBaseCondition.getQrTotal());
		}
		if(null != agentBaseCondition.getUseTotal()){
			cb.andEQ("useTotal", agentBaseCondition.getUseTotal());
		}
		if(null != agentBaseCondition.getLessTotal()){
			cb.andEQ("lessTotal", agentBaseCondition.getLessTotal());
		}
		if(!Strings.isEmpty(agentBaseCondition.getAgentFlag())){
			cb.andEQ("agentFlag", agentBaseCondition.getAgentFlag());
		}
		if(!Strings.isEmpty(agentBaseCondition.getStatus())){
			cb.andEQ("status", agentBaseCondition.getStatus());
		}
		if(!Strings.isEmpty(agentBaseCondition.getRecordStatus())){
			cb.andEQ("recordStatus", agentBaseCondition.getRecordStatus());
		}
		if(null != agentBaseCondition.getCreateTime()){
			cb.andEQ("createTime", agentBaseCondition.getCreateTime());
		}

		if(!Strings.isEmpty(agentBaseCondition.getOperator())){
			cb.andEQ("operator", agentBaseCondition.getOperator());
		}

		if(!Strings.isEmpty(agentBaseCondition.getRemark())){
			cb.andLike("remark", agentBaseCondition.getRemark());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp1())){
			cb.andEQ("temp1", agentBaseCondition.getTemp1());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp2())){
			cb.andEQ("temp2", agentBaseCondition.getTemp2());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp3())){
			cb.andEQ("temp3", agentBaseCondition.getTemp3());
		}
		if(!Strings.isEmpty(agentBaseCondition.getTemp4())){
			cb.andEQ("temp4", agentBaseCondition.getTemp4());
		}
		cb.orderBy("createTime", Order.DESC);
		//排序
		if(!Strings.isEmpty(agentBaseCondition.getOrderBy())){
			if(agentBaseCondition.getOrderBy().indexOf(",")>0){
				String[] orderBys = agentBaseCondition.getOrderBy().split(",");
				String[] orders = agentBaseCondition.getOrder().split(",");
				for(int i=0; i<orderBys.length && i<orders.length; i++){
					cb.orderBy(orderBys[i], Order.valueOf(orders[i]));
				}
			}else{
				cb.orderBy(agentBaseCondition.getOrderBy(), Order.valueOf(agentBaseCondition.getOrder()));
			}
		}
		Criteria buildCriteria = cb.buildCriteria();
		buildCriteria.limit(Long.valueOf(agentBaseCondition.getFirst()), Long.valueOf(agentBaseCondition.getLast()));
		return agentBaseDAO.findPagingResult(buildCriteria);
	}
    
	@Override
	public long updateUsedTimes(String agentNo) {
		return agentBaseDAO.updateUsedTimes(agentNo);
	}

	@Override
	public AgentBase findByAgentNo(String agentNo) {
		CriteriaBuilder cb = Cnd.builder(AgentBase.class);
		cb.andEQ("agentNo", agentNo);
		cb.andEQ("status", ScanCodeConstants.STATUS_ACTIVE);
		Criteria buildCriteria = cb.buildCriteria();
		return agentBaseDAO.findOneByCriteria(buildCriteria);
	}

	
}

