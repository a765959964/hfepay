/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2017
 */package com.hfepay.scancode.service.operator.impl;

import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hfepay.commons.base.lang.Strings;
import com.hfepay.commons.criteria.Cnd;
import com.hfepay.commons.criteria.Criteria;
import com.hfepay.commons.criteria.CriteriaBuilder;
import com.hfepay.commons.utils.PagingResult;
import com.hfepay.scancode.commons.condition.OrganLimitCondition;
import com.hfepay.scancode.commons.dao.OrganLimitDAO;
import com.hfepay.scancode.commons.entity.OrganLimit;
import com.hfepay.scancode.service.operator.OrganLimitService;

@Service("organLimitService")
public class OrganLimitServiceImpl implements OrganLimitService {
	
	@Autowired
    private OrganLimitDAO organLimitDAO;
    
    /**
	 * @Title: findPagingResult
	 * @Description: 列表(分页)
	 * @author: Ricky
	 * @param organLimitCondition
	 * @return: PagingResult<OrganLimit>
	 * @date CreateDate : 2017-01-17 15:03:25
	 */
    @Override
	public PagingResult<OrganLimit> findPagingResult(OrganLimitCondition organLimitCondition){
		CriteriaBuilder cb = Cnd.builder(OrganLimit.class);
		if(!Strings.isEmpty(organLimitCondition.getId())){
			cb.andEQ("id", organLimitCondition.getId());
		}
		if(!Strings.isEmpty(organLimitCondition.getOrganNo())){
			cb.andEQ("organNo", organLimitCondition.getOrganNo());
		}
		if(!Strings.isEmpty(organLimitCondition.getLimitType())){
			cb.andEQ("limitType", organLimitCondition.getLimitType());
		}
		if(!Strings.isEmpty(organLimitCondition.getLimitPayCode())){
			cb.andEQ("limitPayCode", organLimitCondition.getLimitPayCode());
		}
		if(!Strings.isEmpty(organLimitCondition.getLimitMode())){
			cb.andEQ("limitMode", organLimitCondition.getLimitMode());
		}
		if(null != organLimitCondition.getMinLimit()){
			cb.andEQ("minLimit", organLimitCondition.getMinLimit());
		}
		if(null != organLimitCondition.getMaxLimit()){
			cb.andEQ("maxLimit", organLimitCondition.getMaxLimit());
		}
		if(!Strings.isEmpty(organLimitCondition.getStatus())){
			cb.andEQ("status", organLimitCondition.getStatus());
		}
		if(!Strings.isEmpty(organLimitCondition.getRecordStatus())){
			cb.andEQ("recordStatus", organLimitCondition.getRecordStatus());
		}
		if(null != organLimitCondition.getCreateTime()){
			cb.andEQ("createTime", organLimitCondition.getCreateTime());
		}

		if(!Strings.isEmpty(organLimitCondition.getOperator())){
			cb.andEQ("operator", organLimitCondition.getOperator());
		}

		if(!Strings.isEmpty(organLimitCondition.getRemark())){
			cb.andLike("remark", organLimitCondition.getRemark());
		}
		if(!Strings.isEmpty(organLimitCondition.getTemp1())){
			cb.andEQ("temp1", organLimitCondition.getTemp1());
		}
		if(!Strings.isEmpty(organLimitCondition.getTemp2())){
			cb.andEQ("temp2", organLimitCondition.getTemp2());
		}
		Criteria buildCriteria = cb.buildCriteria();
		buildCriteria.limit(Long.valueOf(organLimitCondition.getFirst()), Long.valueOf(organLimitCondition.getLast()));
		return organLimitDAO.findPagingResult(buildCriteria);
	}
	
	/**
	 * @Title: findAll
	 * @Description: 列表
	 * @author: Ricky
	 * @param organLimitCondition
	 * @return: List<OrganLimit>
	 * @date CreateDate : 2017-01-17 15:03:25
	 */
	@Override
	public List<OrganLimit> findAll(OrganLimitCondition organLimitCondition){
		CriteriaBuilder cb = Cnd.builder(OrganLimit.class);
		if(!Strings.isEmpty(organLimitCondition.getId())){
			cb.andEQ("id", organLimitCondition.getId());
		}
		if(!Strings.isEmpty(organLimitCondition.getOrganNo())){
			cb.andEQ("organNo", organLimitCondition.getOrganNo());
		}
		if(!Strings.isEmpty(organLimitCondition.getLimitType())){
			cb.andEQ("limitType", organLimitCondition.getLimitType());
		}
		if(!Strings.isEmpty(organLimitCondition.getLimitPayCode())){
			cb.andEQ("limitPayCode", organLimitCondition.getLimitPayCode());
		}
		if(!Strings.isEmpty(organLimitCondition.getLimitMode())){
			cb.andEQ("limitMode", organLimitCondition.getLimitMode());
		}
		if(null != organLimitCondition.getMinLimit()){
			cb.andEQ("minLimit", organLimitCondition.getMinLimit());
		}
		if(null != organLimitCondition.getMaxLimit()){
			cb.andEQ("maxLimit", organLimitCondition.getMaxLimit());
		}
		if(!Strings.isEmpty(organLimitCondition.getStatus())){
			cb.andEQ("status", organLimitCondition.getStatus());
		}
		if(!Strings.isEmpty(organLimitCondition.getRecordStatus())){
			cb.andEQ("recordStatus", organLimitCondition.getRecordStatus());
		}
		if(null != organLimitCondition.getCreateTime()){
			cb.andEQ("createTime", organLimitCondition.getCreateTime());
		}

		if(!Strings.isEmpty(organLimitCondition.getOperator())){
			cb.andEQ("operator", organLimitCondition.getOperator());
		}

		if(!Strings.isEmpty(organLimitCondition.getRemark())){
			cb.andLike("remark", organLimitCondition.getRemark());
		}
		if(!Strings.isEmpty(organLimitCondition.getTemp1())){
			cb.andEQ("temp1", organLimitCondition.getTemp1());
		}
		if(!Strings.isEmpty(organLimitCondition.getTemp2())){
			cb.andEQ("temp2", organLimitCondition.getTemp2());
		}
		Criteria buildCriteria = cb.buildCriteria();
		return organLimitDAO.findByCriteria(buildCriteria);
	}
	
	/**
	 * @Title: findById
	 * @Description: 主键查找
	 * @author: Ricky
	 * @param id
	 * @return: OrganLimit
	 * @date CreateDate : 2017-01-17 15:03:25
	 */
	@Override
	public OrganLimit findById(String id){
		return organLimitDAO.get(id);
	}
	
	/**
	 * @Title: insert
	 * @Description: 新增
	 * @author: Ricky
	 * @param organLimitCondition
	 * @return: long
	 * @date CreateDate : 2017-01-17 15:03:25
	 */
	@Override
	public long insert(OrganLimitCondition organLimitCondition){
		OrganLimit organLimit = new OrganLimit();
		BeanUtils.copyProperties(organLimitCondition, organLimit);
		return organLimitDAO.insert(organLimit);
	}

	/**
	 * @Title: deleteById
	 * @Description: 删除
	 * @author: Ricky
	 * @param id
	 * @return: long
	 * @date CreateDate : 2017-01-17 15:03:25
	 */
	@Override
	public long deleteById(String id){
		return organLimitDAO.deleteById(id);
	}
	
	/**
	 * @Title: deleteByCriteria
	 * @Description: 条件删除
	 * @author: Ricky
	 * @param Criteria
	 * @return: long
	 * @date CreateDate : 2017-01-17 15:03:25
	 */
	@Override
	public long deleteByCriteria(Criteria criteria){
		return organLimitDAO.deleteByCriteria(criteria);
	}
	
	/**
	 * @Title: countByCriteria
	 * @Description: 行数汇总
	 * @author: Ricky
	 * @param Criteria
	 * @return: long
	 * @date CreateDate : 2017-01-17 15:03:25
	 */
	@Override
	public long countByCriteria(Criteria criteria){
		return organLimitDAO.countByCriteria(criteria);
	}
	
	/**
	 * @Title: update
	 * @Description: 更新
	 * @author: Ricky
	 * @param organLimitCondition
	 * @return: long
	 * @date CreateDate : 2017-01-17 15:03:25
	 */
	@Override
	public long update(OrganLimitCondition organLimitCondition){
		OrganLimit organLimit = new OrganLimit();
		BeanUtils.copyProperties(organLimitCondition, organLimit);
		return organLimitDAO.update(organLimit);
	}
	
	/**
	 * @Title: updateByCriteria
	 * @Description: 条件更新
	 * @author: Ricky
	 * @param organLimitCondition
	 * @param Criteria
	 * @return: long
	 * @date CreateDate : 2017-01-17 15:03:25
	 */
	@Override
	public long updateByCriteria(OrganLimitCondition organLimitCondition,Criteria criteria){
		OrganLimit organLimit = new OrganLimit();
		BeanUtils.copyProperties(organLimitCondition, organLimit);
		return organLimitDAO.updateByCriteria(organLimit,criteria);
	}
	
	/**
	 * @Title: updateStatus
	 * @Description: 状态更新
	 * @author: Ricky
	 * @param id
	 * @return: long
	 * @date CreateDate : 2017-01-17 15:03:25
	 */
	@Override
	public long updateStatus(String id,String status){
		return organLimitDAO.updateStatus(id,status);
	}	
}

