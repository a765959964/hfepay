/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2016
 */package com.hfepay.scancode.service.operator.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.mortbay.log.Log;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hfepay.common.sms.services.SmsService;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.commons.criteria.Cnd;
import com.hfepay.commons.criteria.Criteria;
import com.hfepay.commons.criteria.CriteriaBuilder;
import com.hfepay.commons.utils.PagingResult;
import com.hfepay.scancode.condition.UserSmsCondition;
import com.hfepay.scancode.dao.UserSmsDAO;
import com.hfepay.scancode.entity.MerchantInfo;
import com.hfepay.scancode.entity.ParamsInfo;
import com.hfepay.scancode.entity.UserSms;
import com.hfepay.scancode.service.commons.ScanCodeConstants;
import com.hfepay.scancode.service.operator.MerchantInfoService;
import com.hfepay.scancode.service.operator.ParamsInfoService;
import com.hfepay.scancode.service.operator.UserSmsService;

import net.sf.json.JSONObject;

@Service("userSmsService")
public class UserSmsServiceImpl implements UserSmsService {
	public static final Logger log = LoggerFactory.getLogger(UserSmsServiceImpl.class);
	
	@Autowired
    private UserSmsDAO userSmsDAO;
	@Autowired
	private SmsService smsService;
	@Autowired
	private MerchantInfoService merchantInfoService;
	
	@Autowired
	private ParamsInfoService paramsInfoService;
    
    /**
	 * @Title: findPagingResult
	 * @Description: 列表(分页)
	 * @author: Ricky
	 * @param userSmsCondition
	 * @return: PagingResult<UserSms>
	 * @date CreateDate : 2016-11-28 17:28:09
	 */
    @Override
	public PagingResult<UserSms> findPagingResult(UserSmsCondition userSmsCondition){
		CriteriaBuilder cb = Cnd.builder(UserSms.class);
		if(!Strings.isEmpty(userSmsCondition.getId())){
			cb.andEQ("id", userSmsCondition.getId());
		}
		if(!Strings.isEmpty(userSmsCondition.getChannelNo())){
			cb.andEQ("channelNo", userSmsCondition.getChannelNo());
		}
		if(!Strings.isEmpty(userSmsCondition.getAgentNo())){
			cb.andEQ("agentNo", userSmsCondition.getAgentNo());
		}
		if(!Strings.isEmpty(userSmsCondition.getMerchantNo())){
			cb.andEQ("merchantNo", userSmsCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(userSmsCondition.getPhone())){
			cb.andEQ("phone", userSmsCondition.getPhone());
		}
		if(!Strings.isEmpty(userSmsCondition.getContent())){
			cb.andEQ("content", userSmsCondition.getContent());
		}
		if(!Strings.isEmpty(userSmsCondition.getSendResult())){
			cb.andEQ("sendResult", userSmsCondition.getSendResult());
		}
		if(null != userSmsCondition.getCreateTime()){
			cb.andEQ("createTime", userSmsCondition.getCreateTime());
		}

		if(!Strings.isEmpty(userSmsCondition.getRemark())){
			cb.andLike("remark", userSmsCondition.getRemark());
		}
		Criteria buildCriteria = cb.buildCriteria();
		buildCriteria.limit(Long.valueOf(userSmsCondition.getFirst()), Long.valueOf(userSmsCondition.getLast()));
		return userSmsDAO.findPagingResult(buildCriteria);
	}
	
	/**
	 * @Title: findAll
	 * @Description: 列表
	 * @author: Ricky
	 * @param userSmsCondition
	 * @return: List<UserSms>
	 * @date CreateDate : 2016-11-28 17:28:09
	 */
	@Override
	public List<UserSms> findAll(UserSmsCondition userSmsCondition){
		CriteriaBuilder cb = Cnd.builder(UserSms.class);
		if(!Strings.isEmpty(userSmsCondition.getId())){
			cb.andEQ("id", userSmsCondition.getId());
		}
		if(!Strings.isEmpty(userSmsCondition.getChannelNo())){
			cb.andEQ("channelNo", userSmsCondition.getChannelNo());
		}
		if(!Strings.isEmpty(userSmsCondition.getAgentNo())){
			cb.andEQ("agentNo", userSmsCondition.getAgentNo());
		}
		if(!Strings.isEmpty(userSmsCondition.getMerchantNo())){
			cb.andEQ("merchantNo", userSmsCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(userSmsCondition.getPhone())){
			cb.andEQ("phone", userSmsCondition.getPhone());
		}
		if(!Strings.isEmpty(userSmsCondition.getContent())){
			cb.andEQ("content", userSmsCondition.getContent());
		}
		if(!Strings.isEmpty(userSmsCondition.getSendResult())){
			cb.andEQ("sendResult", userSmsCondition.getSendResult());
		}
		if(null != userSmsCondition.getCreateTime()){
			cb.andEQ("createTime", userSmsCondition.getCreateTime());
		}

		if(!Strings.isEmpty(userSmsCondition.getRemark())){
			cb.andLike("remark", userSmsCondition.getRemark());
		}
		Criteria buildCriteria = cb.buildCriteria();
		return userSmsDAO.findByCriteria(buildCriteria);
	}
	
	/**
	 * @Title: findById
	 * @Description: 主键查找
	 * @author: Ricky
	 * @param id
	 * @return: UserSms
	 * @date CreateDate : 2016-11-28 17:28:09
	 */
	@Override
	public UserSms findById(String id){
		return userSmsDAO.get(id);
	}
	
	/**
	 * @Title: insert
	 * @Description: 新增
	 * @author: Ricky
	 * @param userSmsCondition
	 * @return: long
	 * @date CreateDate : 2016-11-28 17:28:09
	 */
	@Override
	public long insert(UserSmsCondition userSmsCondition){
		UserSms userSms = new UserSms();
		BeanUtils.copyProperties(userSmsCondition, userSms);
		return userSmsDAO.insert(userSms);
	}

	/**
	 * @Title: deleteById
	 * @Description: 删除
	 * @author: Ricky
	 * @param id
	 * @return: long
	 * @date CreateDate : 2016-11-28 17:28:09
	 */
	@Override
	public long deleteById(String id){
		return userSmsDAO.deleteById(id);
	}
	
	/**
	 * @Title: deleteByCriteria
	 * @Description: 条件删除
	 * @author: Ricky
	 * @param Criteria
	 * @return: long
	 * @date CreateDate : 2016-11-28 17:28:09
	 */
	@Override
	public long deleteByCriteria(Criteria criteria){
		return userSmsDAO.deleteByCriteria(criteria);
	}
	
	/**
	 * @Title: countByCriteria
	 * @Description: 行数汇总
	 * @author: Ricky
	 * @param Criteria
	 * @return: long
	 * @date CreateDate : 2016-11-28 17:28:09
	 */
	@Override
	public long countByCriteria(Criteria criteria){
		return userSmsDAO.countByCriteria(criteria);
	}
	
	/**
	 * @Title: update
	 * @Description: 更新
	 * @author: Ricky
	 * @param userSmsCondition
	 * @return: long
	 * @date CreateDate : 2016-11-28 17:28:09
	 */
	@Override
	public long update(UserSmsCondition userSmsCondition){
		UserSms userSms = new UserSms();
		BeanUtils.copyProperties(userSmsCondition, userSms);
		return userSmsDAO.update(userSms);
	}
	
	/**
	 * @Title: updateByCriteria
	 * @Description: 条件更新
	 * @author: Ricky
	 * @param userSmsCondition
	 * @param Criteria
	 * @return: long
	 * @date CreateDate : 2016-11-28 17:28:09
	 */
	@Override
	public long updateByCriteria(UserSmsCondition userSmsCondition,Criteria criteria){
		UserSms userSms = new UserSms();
		BeanUtils.copyProperties(userSmsCondition, userSms);
		return userSmsDAO.updateByCriteria(userSms,criteria);
	}
	
	public static void main(String[] args) {
		Object a = null;
		Map<String, String> map = new HashMap<>();
		map.put("123", "");
		if (null != a && (!map.get("123").equals(""))) {
			
		}
	}
	
	/** 发送短信并记录*/
	@Override
	public boolean sendSms(String content, String mobile,String merchantNo) throws Exception {
		MerchantInfo merchantInfo = merchantInfoService.findByMerchantNo(merchantNo);
		String user= "";
		String password = "";
		String sendUrl = "";
		
		ParamsInfo paramsInfo = paramsInfoService.findParamsKey(merchantInfo.getChannelNo());
		
		if (null == paramsInfo) {
			ParamsInfo paramsInfoInit = paramsInfoService.findParamsKey(ScanCodeConstants.INIT_SMS_SYSTEM);
			JSONObject json = JSONObject.fromObject(paramsInfoInit.getParamsValue());
			user= json.getString("smsuser");
			password = json.getString("smspassword");
			sendUrl = json.getString("sendUrl");
		}else {
			log.info("#########["+paramsInfo+"]########");
			JSONObject json = JSONObject.fromObject(paramsInfo.getParamsValue());
			user= json.getString("smsuser");
			password = json.getString("smspassword");
			sendUrl = json.getString("sendUrl");
			if ("".equals(user) || "".equals(password) || "".equals(sendUrl)) {
				log.info("#########user["+user+"],password["+password+"],sendUrl["+sendUrl+"]########");
				ParamsInfo paramsInfoInit = paramsInfoService.findParamsKey(ScanCodeConstants.INIT_SMS_SYSTEM);
				JSONObject jsonInit = JSONObject.fromObject(paramsInfoInit.getParamsValue());
				user= jsonInit.getString("smsuser");
				password = jsonInit.getString("smspassword");
				sendUrl = jsonInit.getString("sendUrl");
			}
		}
		log.info("#########user["+user+"],password["+password+"],sendUrl["+sendUrl+"]########");
		
		Boolean isSuccess = true;
		isSuccess = smsService.sendSmsByCustom(content, mobile, user, password, sendUrl);//发送短信
		UserSmsCondition userSmsCondition = new UserSmsCondition();
		userSmsCondition.setChannelNo(merchantInfo.getChannelNo());
		userSmsCondition.setAgentNo(merchantInfo.getAgentNo());
		userSmsCondition.setMerchantNo(merchantInfo.getMerchantNo());
		userSmsCondition.setPhone(mobile);
		userSmsCondition.setContent(content);
		userSmsCondition.setSendResult(isSuccess == true ? "1":"0");
		userSmsCondition.setCreateTime(new Date());
		this.insert(userSmsCondition);//记录发送短信
		return isSuccess;
	}
	
}

