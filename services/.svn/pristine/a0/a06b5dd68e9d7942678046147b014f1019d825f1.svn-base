package com.hfepay.scancode.service.operator.impl;

import java.math.BigDecimal;
import java.util.Date;

/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2016
 */

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hfepay.commons.base.lang.Strings;
import com.hfepay.commons.criteria.Cnd;
import com.hfepay.commons.criteria.Criteria;
import com.hfepay.commons.criteria.CriteriaBuilder;
import com.hfepay.commons.criteria.Order;
import com.hfepay.commons.utils.PagingResult;
import com.hfepay.scancode.api.service.ApiMappingDicionService;
import com.hfepay.scancode.api.service.MerchantBusinessService;
import com.hfepay.scancode.condition.MerchantBankcardCondition;
import com.hfepay.scancode.condition.MerchantInfoCondition;
import com.hfepay.scancode.dao.MerchantBankcardDAO;
import com.hfepay.scancode.entity.ChannelAdmin;
import com.hfepay.scancode.entity.MerchantBankcard;
import com.hfepay.scancode.entity.MerchantInfo;
import com.hfepay.scancode.service.operator.MerchantBankcardService;
import com.hfepay.scancode.service.operator.MerchantInfoService;
import com.hfepay.scancode.service.operator.MerchantStoreService;

@Service("merchantBankcardService")
public class MerchantBankcardServiceImpl implements MerchantBankcardService {
	public static final Logger logger = LoggerFactory.getLogger(MerchantBankcardServiceImpl.class);

	@Autowired
    private MerchantBankcardDAO merchantBankcardDAO;
	@Autowired
	private MerchantInfoService merchantInfoService;
	@Autowired
	private MerchantStoreService merchantStoreService;
	@Autowired
	private MerchantBusinessService merchantBusinessService;
	@Autowired
	private ApiMappingDicionService apiMappingDicionService;
    
    /**
	 * 列表(分页)
	 * @param merchantBankcardCondition 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
    @Override
	public PagingResult<MerchantBankcard> findPagingResult(MerchantBankcardCondition merchantBankcardCondition){
		CriteriaBuilder cb = Cnd.builder(MerchantBankcard.class);
		if(!Strings.isEmpty(merchantBankcardCondition.getId())){
			cb.andEQ("id", merchantBankcardCondition.getId());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getMerchantNo())){
			cb.andEQ("merchantNo", merchantBankcardCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getMerchantName())){
			cb.andLike("merchantName", merchantBankcardCondition.getMerchantName());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getIdCard())){
			cb.andEQ("idCard", merchantBankcardCondition.getIdCard());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getName())){
			cb.andEQ("name", merchantBankcardCondition.getName());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getBankCode())){
			cb.andEQ("bankCode", merchantBankcardCondition.getBankCode());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getBankName())){
			cb.andEQ("bankName", merchantBankcardCondition.getBankName());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getBankCard())){
			cb.andEQ("bankCard", merchantBankcardCondition.getBankCard());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getMobile())){
			cb.andEQ("mobile", merchantBankcardCondition.getMobile());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getIsRealAccount())){
			cb.andEQ("isRealAccount", merchantBankcardCondition.getIsRealAccount());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getAccountType())){
			cb.andEQ("accountType", merchantBankcardCondition.getAccountType());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getStatus())){
			cb.andEQ("status", merchantBankcardCondition.getStatus());
		}
		if(null != merchantBankcardCondition.getCreateTime()){
			cb.andEQ("createTime", merchantBankcardCondition.getCreateTime());
		}

		if(!Strings.isEmpty(merchantBankcardCondition.getOperator())){
			cb.andEQ("operator", merchantBankcardCondition.getOperator());
		}

		if(!Strings.isEmpty(merchantBankcardCondition.getRemark())){
			cb.andLike("remark", merchantBankcardCondition.getRemark());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getTemp1())){
			cb.andEQ("temp1", merchantBankcardCondition.getTemp1());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getTemp2())){
			cb.andEQ("temp2", merchantBankcardCondition.getTemp2());
		}
		if(merchantBankcardCondition.getChannelAdmin() != null){
			ChannelAdmin admin = merchantBankcardCondition.getChannelAdmin();
			channelFilter(cb, admin);
		}
		cb.orderBy("createTime", Order.DESC);
		//排序
		if(!Strings.isEmpty(merchantBankcardCondition.getOrderBy())){
			if(merchantBankcardCondition.getOrderBy().indexOf(",")>0){
				String[] orderBys = merchantBankcardCondition.getOrderBy().split(",");
				String[] orders = merchantBankcardCondition.getOrder().split(",");
				for(int i=0; i<orderBys.length && i<orders.length; i++){
					cb.orderBy(orderBys[i], Order.valueOf(orders[i]));
				}
			}else{
				cb.orderBy(merchantBankcardCondition.getOrderBy(), Order.valueOf(merchantBankcardCondition.getOrder()));
			}
		}
		Criteria buildCriteria = cb.buildCriteria();
		buildCriteria.limit(Long.valueOf(merchantBankcardCondition.getFirst()), Long.valueOf(merchantBankcardCondition.getLast()));
		return merchantBankcardDAO.findPagingResult(buildCriteria);
	}
	
    private void channelFilter(CriteriaBuilder cb, ChannelAdmin admin) {
		switch (admin.getIdentityFlag()) {
		case "1":
			cb.addParam("type", admin.getIdentityFlag());
			cb.addParam("valueNo", admin.getChannelCode());
			break;
		case "2":
			cb.addParam("type", admin.getIdentityFlag());
			cb.addParam("valueNo", admin.getAgentNo());
			break;
		case "3":
			cb.andEQ("merchantNo", admin.getMerchantNo());
			break;
		default:
			break;
		}
	}
    
	/**
	 * 列表
	 * @param merchantBankcard 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public List<MerchantBankcard> findAll(MerchantBankcardCondition merchantBankcardCondition){
		CriteriaBuilder cb = Cnd.builder(MerchantBankcard.class);
		if(!Strings.isEmpty(merchantBankcardCondition.getId())){
			cb.andEQ("id", merchantBankcardCondition.getId());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getMerchantNo())){
			cb.andEQ("merchantNo", merchantBankcardCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getMerchantName())){
			cb.andLike("merchantName", merchantBankcardCondition.getMerchantName());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getIdCard())){
			cb.andEQ("idCard", merchantBankcardCondition.getIdCard());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getName())){
			cb.andEQ("name", merchantBankcardCondition.getName());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getBankCode())){
			cb.andEQ("bankCode", merchantBankcardCondition.getBankCode());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getBankName())){
			cb.andEQ("bankName", merchantBankcardCondition.getBankName());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getBankCard())){
			cb.andEQ("bankCard", merchantBankcardCondition.getBankCard());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getMobile())){
			cb.andEQ("mobile", merchantBankcardCondition.getMobile());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getIsRealAccount())){
			cb.andEQ("isRealAccount", merchantBankcardCondition.getIsRealAccount());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getAccountType())){
			cb.andEQ("accountType", merchantBankcardCondition.getAccountType());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getStatus())){
			cb.andEQ("status", merchantBankcardCondition.getStatus());
		}
		if(null != merchantBankcardCondition.getCreateTime()){
			cb.andEQ("createTime", merchantBankcardCondition.getCreateTime());
		}

		if(!Strings.isEmpty(merchantBankcardCondition.getOperator())){
			cb.andEQ("operator", merchantBankcardCondition.getOperator());
		}

		if(!Strings.isEmpty(merchantBankcardCondition.getRemark())){
			cb.andLike("remark", merchantBankcardCondition.getRemark());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getTemp1())){
			cb.andEQ("temp1", merchantBankcardCondition.getTemp1());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getTemp2())){
			cb.andEQ("temp2", merchantBankcardCondition.getTemp2());
		}
		if(merchantBankcardCondition.getChannelAdmin() != null){
			ChannelAdmin admin = merchantBankcardCondition.getChannelAdmin();
			channelFilter(cb, admin);
		}
		Criteria buildCriteria = cb.buildCriteria();
		return merchantBankcardDAO.findByCriteria(buildCriteria);
	}
	
	/**
	 * 商户银行账户id
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public MerchantBankcard findById(String id){
		return merchantBankcardDAO.get(id);
	}
	
	/**
	 * 新增
	 * @param merchantBankcardCondition
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long insert(MerchantBankcardCondition merchantBankcardCondition){
		MerchantBankcard merchantBankcard = new MerchantBankcard();
		BeanUtils.copyProperties(merchantBankcardCondition, merchantBankcard);
		return merchantBankcardDAO.insert(merchantBankcard);
	}

	/**
	 * 删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long deleteById(String id){
		return merchantBankcardDAO.deleteById(id);
	}
	
	/**
	 * 条件删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long deleteByCriteria(Criteria criteria){
		return merchantBankcardDAO.deleteByCriteria(criteria);
	}
	
	/**
	 * 行数汇总
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long countByCriteria(Criteria criteria){
		return merchantBankcardDAO.countByCriteria(criteria);
	}
	
	/**
	 * 更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long update(MerchantBankcardCondition merchantBankcardCondition){
		MerchantBankcard merchantBankcard = new MerchantBankcard();
		BeanUtils.copyProperties(merchantBankcardCondition, merchantBankcard);
		return merchantBankcardDAO.update(merchantBankcard);
	}
	
	/**
	 * 条件更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long updateByCriteria(MerchantBankcardCondition merchantBankcardCondition,Criteria criteria){
		MerchantBankcard merchantBankcard = new MerchantBankcard();
		BeanUtils.copyProperties(merchantBankcardCondition, merchantBankcard);
		return merchantBankcardDAO.updateByCriteria(merchantBankcard,criteria);
	}
	
	/**
	 * 状态更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long updateStatus(String id,String status){
		return merchantBankcardDAO.updateStatus(id,status);
	}	
	
	
	@Override
	public MerchantBankcard findByMerchantNo(String merchantNo) {
		if(Strings.isEmpty(merchantNo)){
			throw new RuntimeException("商户编号不能为空");
		}
		CriteriaBuilder cb = Cnd.builder(MerchantBankcard.class);
		cb.andEQ("merchantNo", merchantNo);
		Criteria buildCriteria = cb.buildCriteria();
		return merchantBankcardDAO.findOneByCriteria(buildCriteria);
	}
	
	@Override
	public long updateByMerchantNo(MerchantBankcardCondition condition) {
		MerchantBankcard MerchantBankcard = new MerchantBankcard();
		BeanUtils.copyProperties(condition, MerchantBankcard);
		return merchantBankcardDAO.updateByMerchantNo(MerchantBankcard);
	}
	
	@Override
	public long updateBalance(String merchantNo, BigDecimal balance) {
		// TODO Auto-generated method stub
		return merchantBankcardDAO.updateBalance(merchantNo,balance);
	}
	
	@Override
	public long applyStoreStep3(MerchantBankcardCondition condition) {
		MerchantBankcard MerchantBankcard = new MerchantBankcard();
		MerchantBankcard existBean = findByMerchantNo(condition.getMerchantNo());
		MerchantInfo info = merchantInfoService.findByMerchantNo(condition.getMerchantNo());
		condition.setStatus("3");
		condition.setIsRealAccount("Y");
		if(null!=info){
			condition.setIdCard(info.getIdCard());
			condition.setName(info.getName());
		}
		long result = 0L;
		MerchantInfoCondition minfo = new MerchantInfoCondition();
		minfo.setMerchantNo(condition.getMerchantNo());
		minfo.setMobile(condition.getMobile());
		minfo.setStatus("0");
		minfo.setCheck(false);
		result = merchantInfoService.updateByMerchantNo(minfo);
		checkResult(result);
		if(existBean==null){//不存在插入
			BeanUtils.copyProperties(condition, MerchantBankcard);
			MerchantBankcard.setId(Strings.getUUID());
			MerchantBankcard.setCreateTime(new Date());
			result = merchantBankcardDAO.insert(MerchantBankcard);
			checkResult(result);
		}else{
			if(!isUpdate(condition)){//没修改直接返回
				return 1;
			}
			BeanUtils.copyProperties(condition, MerchantBankcard);
			MerchantBankcard.setId(existBean.getId());
			MerchantBankcard.setMerchantNo(condition.getMerchantNo());
			MerchantBankcard.setUpdateTime(new Date());
			result = merchantBankcardDAO.update(MerchantBankcard);
			checkResult(result);
		}
		return result;
	}
	private void checkResult(long result){
		logger.info("0-------------update result is "+ result);
		if(result<0){
			throw new RuntimeException("失败了..");
		}
	}

	private boolean isUpdate(MerchantBankcardCondition condition) {
		MerchantBankcard card = this.findByMerchantNo(condition.getMerchantNo());
		boolean isUpdate = false;
		if(!condition.getBankName().equals(card.getBankName())){
			isUpdate = true;
		}
		if(!condition.getBankCard().equals(card.getBankCard())){
			isUpdate = true;
		}
		if(!condition.getMobile().equals(card.getMobile())){
			isUpdate = true;
		}
		if(!condition.getBankCode().equals(card.getBankCode())){
			isUpdate = true;
		}
		return isUpdate;
	}
}

