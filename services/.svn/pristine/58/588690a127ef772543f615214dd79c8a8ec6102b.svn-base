package com.hfepay.scancode.service.operator.impl;

import java.io.File;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;

/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2016
 */

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hfepay.commons.base.lang.HttpRequestClient;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.commons.criteria.Cnd;
import com.hfepay.commons.criteria.Criteria;
import com.hfepay.commons.criteria.CriteriaBuilder;
import com.hfepay.commons.criteria.Order;
import com.hfepay.commons.utils.PagingResult;
import com.hfepay.scancode.api.condition.ApiMappingDicionCondition;
import com.hfepay.scancode.api.entity.ApiMappingDicion;
import com.hfepay.scancode.api.service.ApiMappingDicionService;
import com.hfepay.scancode.api.service.MerchantBusinessService;
import com.hfepay.scancode.api.service.config.HfepayConfig;
import com.hfepay.scancode.condition.MerchantBankcardCondition;
import com.hfepay.scancode.condition.MerchantInfoCondition;
import com.hfepay.scancode.condition.MerchantStoreCondition;
import com.hfepay.scancode.dao.MerchantBankcardDAO;
import com.hfepay.scancode.entity.ChannelAdmin;
import com.hfepay.scancode.entity.MerchantBankcard;
import com.hfepay.scancode.entity.MerchantInfo;
import com.hfepay.scancode.entity.MerchantStore;
import com.hfepay.scancode.service.commons.ScanCodeConstants;
import com.hfepay.scancode.service.operator.MerchantBankcardService;
import com.hfepay.scancode.service.operator.MerchantInfoService;
import com.hfepay.scancode.service.operator.MerchantStoreService;
import com.hfepay.scancode.service.utils.PhotoUtil;

@Service("merchantBankcardService")
public class MerchantBankcardServiceImpl implements MerchantBankcardService {
	public static final Logger logger = LoggerFactory.getLogger(MerchantBankcardServiceImpl.class);

	@Autowired
    private MerchantBankcardDAO merchantBankcardDAO;
	@Autowired
	private MerchantInfoService merchantInfoService;
	@Autowired
	private MerchantStoreService merchantStoreService;
	@Autowired
	private MerchantBusinessService merchantBusinessService;
	@Autowired
	private ApiMappingDicionService apiMappingDicionService;
    
    /**
	 * 列表(分页)
	 * @param merchantBankcardCondition 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
    @Override
	public PagingResult<MerchantBankcard> findPagingResult(MerchantBankcardCondition merchantBankcardCondition){
		CriteriaBuilder cb = Cnd.builder(MerchantBankcard.class);
		if(!Strings.isEmpty(merchantBankcardCondition.getId())){
			cb.andEQ("id", merchantBankcardCondition.getId());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getMerchantNo())){
			cb.andEQ("merchantNo", merchantBankcardCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getMerchantName())){
			cb.andLike("merchantName", merchantBankcardCondition.getMerchantName());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getIdCard())){
			cb.andEQ("idCard", merchantBankcardCondition.getIdCard());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getName())){
			cb.andEQ("name", merchantBankcardCondition.getName());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getBankCode())){
			cb.andEQ("bankCode", merchantBankcardCondition.getBankCode());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getBankName())){
			cb.andEQ("bankName", merchantBankcardCondition.getBankName());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getBankCard())){
			cb.andEQ("bankCard", merchantBankcardCondition.getBankCard());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getMobile())){
			cb.andEQ("mobile", merchantBankcardCondition.getMobile());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getIsRealAccount())){
			cb.andEQ("isRealAccount", merchantBankcardCondition.getIsRealAccount());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getStatus())){
			cb.andEQ("status", merchantBankcardCondition.getStatus());
		}
		if(null != merchantBankcardCondition.getCreateTime()){
			cb.andEQ("createTime", merchantBankcardCondition.getCreateTime());
		}

		if(!Strings.isEmpty(merchantBankcardCondition.getOperator())){
			cb.andEQ("operator", merchantBankcardCondition.getOperator());
		}

		if(!Strings.isEmpty(merchantBankcardCondition.getRemark())){
			cb.andLike("remark", merchantBankcardCondition.getRemark());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getTemp1())){
			cb.andEQ("temp1", merchantBankcardCondition.getTemp1());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getTemp2())){
			cb.andEQ("temp2", merchantBankcardCondition.getTemp2());
		}
		if(merchantBankcardCondition.getChannelAdmin() != null){
			ChannelAdmin admin = merchantBankcardCondition.getChannelAdmin();
			channelFilter(cb, admin);
		}
		cb.orderBy("createTime", Order.DESC);
		//排序
		if(!Strings.isEmpty(merchantBankcardCondition.getOrderBy())){
			if(merchantBankcardCondition.getOrderBy().indexOf(",")>0){
				String[] orderBys = merchantBankcardCondition.getOrderBy().split(",");
				String[] orders = merchantBankcardCondition.getOrder().split(",");
				for(int i=0; i<orderBys.length && i<orders.length; i++){
					cb.orderBy(orderBys[i], Order.valueOf(orders[i]));
				}
			}else{
				cb.orderBy(merchantBankcardCondition.getOrderBy(), Order.valueOf(merchantBankcardCondition.getOrder()));
			}
		}
		Criteria buildCriteria = cb.buildCriteria();
		buildCriteria.limit(Long.valueOf(merchantBankcardCondition.getFirst()), Long.valueOf(merchantBankcardCondition.getLast()));
		return merchantBankcardDAO.findPagingResult(buildCriteria);
	}
	
    private void channelFilter(CriteriaBuilder cb, ChannelAdmin admin) {
		switch (admin.getIdentityFlag()) {
		case "1":
			cb.addParam("type", admin.getIdentityFlag());
			cb.addParam("valueNo", admin.getChannelCode());
			break;
		case "2":
			cb.addParam("type", admin.getIdentityFlag());
			cb.addParam("valueNo", admin.getAgentNo());
			break;
		case "3":
			cb.andEQ("merchantNo", admin.getMerchantNo());
			break;
		default:
			break;
		}
	}
    
	/**
	 * 列表
	 * @param merchantBankcard 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public List<MerchantBankcard> findAll(MerchantBankcardCondition merchantBankcardCondition){
		CriteriaBuilder cb = Cnd.builder(MerchantBankcard.class);
		if(!Strings.isEmpty(merchantBankcardCondition.getId())){
			cb.andEQ("id", merchantBankcardCondition.getId());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getMerchantNo())){
			cb.andEQ("merchantNo", merchantBankcardCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getMerchantName())){
			cb.andLike("merchantName", merchantBankcardCondition.getMerchantName());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getIdCard())){
			cb.andEQ("idCard", merchantBankcardCondition.getIdCard());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getName())){
			cb.andEQ("name", merchantBankcardCondition.getName());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getBankCode())){
			cb.andEQ("bankCode", merchantBankcardCondition.getBankCode());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getBankName())){
			cb.andEQ("bankName", merchantBankcardCondition.getBankName());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getBankCard())){
			cb.andEQ("bankCard", merchantBankcardCondition.getBankCard());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getMobile())){
			cb.andEQ("mobile", merchantBankcardCondition.getMobile());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getIsRealAccount())){
			cb.andEQ("isRealAccount", merchantBankcardCondition.getIsRealAccount());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getStatus())){
			cb.andEQ("status", merchantBankcardCondition.getStatus());
		}
		if(null != merchantBankcardCondition.getCreateTime()){
			cb.andEQ("createTime", merchantBankcardCondition.getCreateTime());
		}

		if(!Strings.isEmpty(merchantBankcardCondition.getOperator())){
			cb.andEQ("operator", merchantBankcardCondition.getOperator());
		}

		if(!Strings.isEmpty(merchantBankcardCondition.getRemark())){
			cb.andLike("remark", merchantBankcardCondition.getRemark());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getTemp1())){
			cb.andEQ("temp1", merchantBankcardCondition.getTemp1());
		}
		if(!Strings.isEmpty(merchantBankcardCondition.getTemp2())){
			cb.andEQ("temp2", merchantBankcardCondition.getTemp2());
		}
		if(merchantBankcardCondition.getChannelAdmin() != null){
			ChannelAdmin admin = merchantBankcardCondition.getChannelAdmin();
			channelFilter(cb, admin);
		}
		Criteria buildCriteria = cb.buildCriteria();
		return merchantBankcardDAO.findByCriteria(buildCriteria);
	}
	
	/**
	 * 商户银行账户id
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public MerchantBankcard findById(String id){
		return merchantBankcardDAO.get(id);
	}
	
	/**
	 * 新增
	 * @param merchantBankcardCondition
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long insert(MerchantBankcardCondition merchantBankcardCondition){
		MerchantBankcard merchantBankcard = new MerchantBankcard();
		BeanUtils.copyProperties(merchantBankcardCondition, merchantBankcard);
		return merchantBankcardDAO.insert(merchantBankcard);
	}

	/**
	 * 删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long deleteById(String id){
		return merchantBankcardDAO.deleteById(id);
	}
	
	/**
	 * 条件删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long deleteByCriteria(Criteria criteria){
		return merchantBankcardDAO.deleteByCriteria(criteria);
	}
	
	/**
	 * 行数汇总
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long countByCriteria(Criteria criteria){
		return merchantBankcardDAO.countByCriteria(criteria);
	}
	
	/**
	 * 更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long update(MerchantBankcardCondition merchantBankcardCondition){
		MerchantBankcard merchantBankcard = new MerchantBankcard();
		BeanUtils.copyProperties(merchantBankcardCondition, merchantBankcard);
		return merchantBankcardDAO.update(merchantBankcard);
	}
	
	/**
	 * 条件更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long updateByCriteria(MerchantBankcardCondition merchantBankcardCondition,Criteria criteria){
		MerchantBankcard merchantBankcard = new MerchantBankcard();
		BeanUtils.copyProperties(merchantBankcardCondition, merchantBankcard);
		return merchantBankcardDAO.updateByCriteria(merchantBankcard,criteria);
	}
	
	/**
	 * 状态更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 13:50:11
	 */
	@Override
	public long updateStatus(String id,String status){
		return merchantBankcardDAO.updateStatus(id,status);
	}	
	
	
	@Override
	public MerchantBankcard findByMerchantNo(String merchantNo) {
		if(Strings.isEmpty(merchantNo)){
			throw new RuntimeException("商户编号不能为空");
		}
		CriteriaBuilder cb = Cnd.builder(MerchantBankcard.class);
		cb.andEQ("merchantNo", merchantNo);
		Criteria buildCriteria = cb.buildCriteria();
		return merchantBankcardDAO.findOneByCriteria(buildCriteria);
	}
	
	@Override
	public long updateByMerchantNo(MerchantBankcardCondition condition) {
		MerchantBankcard MerchantBankcard = new MerchantBankcard();
		BeanUtils.copyProperties(condition, MerchantBankcard);
		return merchantBankcardDAO.updateByMerchantNo(MerchantBankcard);
	}
	
	@Override
	public long updateBalance(String merchantNo, BigDecimal balance) {
		// TODO Auto-generated method stub
		return merchantBankcardDAO.updateBalance(merchantNo,balance);
	}
	
	@Override
	public long applyStoreStep3(MerchantBankcardCondition condition) {
		MerchantBankcard MerchantBankcard = new MerchantBankcard();
		MerchantBankcard existBean = findByMerchantNo(condition.getMerchantNo());
		MerchantInfo info = merchantInfoService.findByMerchantNo(condition.getMerchantNo());
		condition.setStatus("3");
		condition.setIsRealAccount("Y");
		if(null!=info){
			condition.setIdCard(info.getIdCard());
			condition.setName(info.getName());
		}
		long result = 0L;
		if(existBean==null){//不存在插入
			BeanUtils.copyProperties(condition, MerchantBankcard);
			MerchantBankcard.setId(Strings.getUUID());
			MerchantBankcard.setCreateTime(new Date());
			result = merchantBankcardDAO.insert(MerchantBankcard);
		}else{
			BeanUtils.copyProperties(condition, MerchantBankcard);
			MerchantBankcard.setId(existBean.getId());
			MerchantBankcard.setMerchantNo(condition.getMerchantNo());
			MerchantBankcard.setUpdateTime(new Date());
			result = merchantBankcardDAO.update(MerchantBankcard);
		}
		//将上传到微信的图片下载到本地服务器,包括基本信息和店铺信息图片
		if(result>0){
			MerchantStore store = merchantStoreService.findByMerchantNo(condition.getMerchantNo());
			
			Map<String,String> map = downLoadImg(info, store);
			
			MerchantInfoCondition minfo = new MerchantInfoCondition();
			minfo.setMerchantNo(condition.getMerchantNo());
			minfo.setMobile(condition.getMobile());
			minfo.setStatus("0");
			minfo.setIdcardImg1(map.get("idcardImg1"));
			minfo.setIdcardImg2(map.get("idcardImg2"));
			minfo.setIdcardImg3(map.get("idcardImg3"));
			minfo.setMerchantLicenseImg(map.get("merchantLicenseImg"));
			
			result = merchantInfoService.updateByMerchantNo(minfo);
			MerchantStoreCondition storeContion= new MerchantStoreCondition();
			storeContion.setGroupPhotoImg(map.get("groupPhotoImg"));
			storeContion.setStoreImg(map.get("storeImg"));
			storeContion.setStorePhotosImg(map.get("storePhotosImg"));
			storeContion.setMerchantLicenseImg(map.get("merchantLicenseImg"));
			storeContion.setMerchantNo(condition.getMerchantNo());
			result = merchantStoreService.updateByMerchantNo(storeContion);
		}
		
		return result;
	}
	
	private Map<String,String> downLoadImg(MerchantInfo info,MerchantStore store){
		Map<String,String> map = new HashMap<>();
		String accessToken;
		String filePath = ScanCodeConstants.FILE_UPLOAD_ROOT_PATH+ScanCodeConstants.SPT+
				ScanCodeConstants.WECHAT_IMGUPLOAD_TYPE+ScanCodeConstants.SPT+info.getMerchantNo()+ScanCodeConstants.SPT;
		File fileDir = new File(filePath);
		if (!fileDir.exists()) {
			fileDir.mkdirs();
		}
		try {
			accessToken = merchantBusinessService.getAccessToken(info.getChannelNo());
			logger.info("download img accessToken is "+accessToken+" ===============");
			ApiMappingDicionCondition condition = new ApiMappingDicionCondition();
			condition.setKeyNo(HfepayConfig.WDOWNLOADURL_KEY);
			ApiMappingDicion dic = apiMappingDicionService.getFromRedis(condition);
			if(dic==null||Strings.isEmpty(dic.getParaVal())){
				throw new RuntimeException("getJsApiTicket 获取 access_token url失败");
			}
			//https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APP_ID&secret=SECRET
			String downUrl= dic.getParaVal();
			logger.info("download img downUrl is "+downUrl+" ===============merchantNo="+info.getMerchantNo());
			//String downUrl="https://api.weixin.qq.com/cgi-bin/media/get?access_token=ACCESS_TOKEN&media_id=MEDIA_ID";
			downUrl = downUrl.replace("ACCESS_TOKEN", accessToken);//.replace("MEDIA_ID", mediaId);
			map.put("idcardImg1", getImgUrl(downUrl, info.getIdcardImg1(),filePath));
			map.put("idcardImg2", getImgUrl(downUrl, info.getIdcardImg2(),filePath));
			map.put("idcardImg3", getImgUrl(downUrl, info.getIdcardImg3(),filePath));
			map.put("groupPhotoImg", getImgUrl(downUrl, store.getGroupPhotoImg(),filePath));
			map.put("storeImg", getImgUrl(downUrl, store.getStoreImg(),filePath));
			map.put("storePhotosImg", getImgUrl(downUrl, store.getStorePhotosImg(),filePath));
			map.put("merchantLicenseImg", getImgUrl(downUrl, store.getMerchantLicenseImg(),filePath));
		} catch (Exception e) {
			logger.error("downLoadImg error...",e);
			e.printStackTrace();
		}
		return map;
	}
	
	private String getImgUrl(String downUrl,String mediaId,String filePath){
		logger.info("download img getImgUrl mediaId is "+mediaId+" =============== filepath="+filePath);
		if(Strings.isEmpty(mediaId)){
			return null;
		}
		String imgUrl = "";
		String fileName=Strings.getUUID()+ScanCodeConstants.IMG_EXTEND;
		downUrl = downUrl.replace("MEDIA_ID", mediaId);
		try {
			 byte[] stream = HttpRequestClient.doGet(downUrl);
			 PhotoUtil.writeFile(stream, filePath, fileName);//文件到硬盘
			 imgUrl= filePath+fileName;//返回nginx映射的文件路径，供查看
		} catch (Exception e) {
			logger.error("read file failed.......",e);
			e.printStackTrace();
		}
		return imgUrl;
	}
}

