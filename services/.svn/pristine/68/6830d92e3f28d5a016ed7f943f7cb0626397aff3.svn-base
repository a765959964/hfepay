package com.hfepay.scancode.service.operator.impl;

/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2016
 */

import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hfepay.commons.criteria.Criteria;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.commons.criteria.Cnd;
import com.hfepay.commons.criteria.CriteriaBuilder;
import com.hfepay.commons.criteria.Order;
import com.hfepay.commons.utils.PagingResult;
import com.hfepay.scancode.dao.MerchantInfoDAO;
import com.hfepay.scancode.entity.MerchantInfo;
import com.hfepay.scancode.service.operator.MerchantInfoService;
import com.hfepay.scancode.condition.MerchantInfoCondition;

@Service("merchantInfoService")
public class MerchantInfoServiceImpl implements MerchantInfoService {
	
	@Autowired
    private MerchantInfoDAO merchantInfoDAO;
    
    /**
	 * 列表(分页)
	 * @param merchantInfoCondition 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-13 15:09:11
	 */
    @Override
	public PagingResult<MerchantInfo> findPagingResult(MerchantInfoCondition merchantInfoCondition){
		CriteriaBuilder cb = Cnd.builder(MerchantInfo.class);
		if(!Strings.isEmpty(merchantInfoCondition.getId())){
			cb.andEQ("id", merchantInfoCondition.getId());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelNo())){
			cb.andEQ("channelNo", merchantInfoCondition.getChannelNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelName())){
			cb.andEQ("channelName", merchantInfoCondition.getChannelName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentNo())){
			cb.andEQ("agentNo", merchantInfoCondition.getAgentNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentName())){
			cb.andEQ("agentName", merchantInfoCondition.getAgentName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantNo())){
			cb.andEQ("merchantNo", merchantInfoCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPlatformMerchantNo())){
			cb.andEQ("platformMerchantNo", merchantInfoCondition.getPlatformMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantName())){
			cb.andEQ("merchantName", merchantInfoCondition.getMerchantName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getShortName())){
			cb.andEQ("shortName", merchantInfoCondition.getShortName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getBusType())){
			cb.andEQ("busType", merchantInfoCondition.getBusType());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdCard())){
			cb.andEQ("idCard", merchantInfoCondition.getIdCard());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getName())){
			cb.andEQ("name", merchantInfoCondition.getName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMobile())){
			cb.andEQ("mobile", merchantInfoCondition.getMobile());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getServicePhone())){
			cb.andEQ("servicePhone", merchantInfoCondition.getServicePhone());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPhone())){
			cb.andEQ("phone", merchantInfoCondition.getPhone());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getEmail())){
			cb.andEQ("email", merchantInfoCondition.getEmail());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAddress())){
			cb.andEQ("address", merchantInfoCondition.getAddress());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicense())){
			cb.andEQ("merchantLicense", merchantInfoCondition.getMerchantLicense());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getQrCode())){
			cb.andEQ("qrCode", merchantInfoCondition.getQrCode());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getStatus())){
			cb.andEQ("status", merchantInfoCondition.getStatus());
		}
		if(null != merchantInfoCondition.getCreateTime()){
			cb.andEQ("createTime", merchantInfoCondition.getCreateTime());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getOperater())){
			cb.andEQ("operater", merchantInfoCondition.getOperater());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getRemark())){
			cb.andLike("remark", merchantInfoCondition.getRemark());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp1())){
			cb.andEQ("temp1", merchantInfoCondition.getTemp1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp2())){
			cb.andEQ("temp2", merchantInfoCondition.getTemp2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp3())){
			cb.andEQ("temp3", merchantInfoCondition.getTemp3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp4())){
			cb.andEQ("temp4", merchantInfoCondition.getTemp4());
		}
		cb.orderBy("createTime", Order.DESC);
		//排序
		if(!Strings.isEmpty(merchantInfoCondition.getOrderBy())){
			if(merchantInfoCondition.getOrderBy().indexOf(",")>0){
				String[] orderBys = merchantInfoCondition.getOrderBy().split(",");
				String[] orders = merchantInfoCondition.getOrder().split(",");
				for(int i=0; i<orderBys.length && i<orders.length; i++){
					cb.orderBy(orderBys[i], Order.valueOf(orders[i]));
				}
			}else{
				cb.orderBy(merchantInfoCondition.getOrderBy(), Order.valueOf(merchantInfoCondition.getOrder()));
			}
		}
		Criteria buildCriteria = cb.buildCriteria();
		buildCriteria.limit(Long.valueOf(merchantInfoCondition.getFirst()), Long.valueOf(merchantInfoCondition.getLast()));
		return merchantInfoDAO.findPagingResult(buildCriteria);
	}
	
	/**
	 * 列表
	 * @param merchantInfo 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-13 15:09:11
	 */
	@Override
	public List<MerchantInfo> findAll(MerchantInfoCondition merchantInfoCondition){
		CriteriaBuilder cb = Cnd.builder(MerchantInfo.class);
		if(!Strings.isEmpty(merchantInfoCondition.getId())){
			cb.andEQ("id", merchantInfoCondition.getId());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelNo())){
			cb.andEQ("channelNo", merchantInfoCondition.getChannelNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelName())){
			cb.andEQ("channelName", merchantInfoCondition.getChannelName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentNo())){
			cb.andEQ("agentNo", merchantInfoCondition.getAgentNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentName())){
			cb.andEQ("agentName", merchantInfoCondition.getAgentName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantNo())){
			cb.andEQ("merchantNo", merchantInfoCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPlatformMerchantNo())){
			cb.andEQ("platformMerchantNo", merchantInfoCondition.getPlatformMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantName())){
			cb.andEQ("merchantName", merchantInfoCondition.getMerchantName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getShortName())){
			cb.andEQ("shortName", merchantInfoCondition.getShortName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getBusType())){
			cb.andEQ("busType", merchantInfoCondition.getBusType());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdCard())){
			cb.andEQ("idCard", merchantInfoCondition.getIdCard());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getName())){
			cb.andEQ("name", merchantInfoCondition.getName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMobile())){
			cb.andEQ("mobile", merchantInfoCondition.getMobile());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getServicePhone())){
			cb.andEQ("servicePhone", merchantInfoCondition.getServicePhone());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPhone())){
			cb.andEQ("phone", merchantInfoCondition.getPhone());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getEmail())){
			cb.andEQ("email", merchantInfoCondition.getEmail());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAddress())){
			cb.andEQ("address", merchantInfoCondition.getAddress());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicense())){
			cb.andEQ("merchantLicense", merchantInfoCondition.getMerchantLicense());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getQrCode())){
			cb.andEQ("qrCode", merchantInfoCondition.getQrCode());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getStatus())){
			cb.andEQ("status", merchantInfoCondition.getStatus());
		}
		if(null != merchantInfoCondition.getCreateTime()){
			cb.andEQ("createTime", merchantInfoCondition.getCreateTime());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getOperater())){
			cb.andEQ("operater", merchantInfoCondition.getOperater());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getRemark())){
			cb.andLike("remark", merchantInfoCondition.getRemark());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp1())){
			cb.andEQ("temp1", merchantInfoCondition.getTemp1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp2())){
			cb.andEQ("temp2", merchantInfoCondition.getTemp2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp3())){
			cb.andEQ("temp3", merchantInfoCondition.getTemp3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp4())){
			cb.andEQ("temp4", merchantInfoCondition.getTemp4());
		}
		Criteria buildCriteria = cb.buildCriteria();
		return merchantInfoDAO.findByCriteria(buildCriteria);
	}
	
	/**
	 * 主键查找
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-13 15:09:11
	 */
	@Override
	public MerchantInfo findById(String id){
		return merchantInfoDAO.get(id);
	}
	
	/**
	 * 新增
	 * @param merchantInfoCondition
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-13 15:09:11
	 */
	@Override
	public long insert(MerchantInfoCondition merchantInfoCondition){
		MerchantInfo merchantInfo = new MerchantInfo();
		BeanUtils.copyProperties(merchantInfoCondition, merchantInfo);
		return merchantInfoDAO.insert(merchantInfo);
	}

	/**
	 * 删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-13 15:09:11
	 */
	@Override
	public long deleteById(String id){
		return merchantInfoDAO.deleteById(id);
	}
	
	/**
	 * 条件删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-13 15:09:11
	 */
	@Override
	public long deleteByCriteria(Criteria criteria){
		return merchantInfoDAO.deleteByCriteria(criteria);
	}
	
	/**
	 * 行数汇总
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-13 15:09:11
	 */
	@Override
	public long countByCriteria(Criteria criteria){
		return merchantInfoDAO.countByCriteria(criteria);
	}
	
	/**
	 * 更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-13 15:09:11
	 */
	@Override
	public long update(MerchantInfoCondition merchantInfoCondition){
		MerchantInfo merchantInfo = new MerchantInfo();
		BeanUtils.copyProperties(merchantInfoCondition, merchantInfo);
		return merchantInfoDAO.update(merchantInfo);
	}
	
	/**
	 * 条件更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-13 15:09:11
	 */
	@Override
	public long updateByCriteria(MerchantInfoCondition merchantInfoCondition,Criteria criteria){
		MerchantInfo merchantInfo = new MerchantInfo();
		BeanUtils.copyProperties(merchantInfoCondition, merchantInfo);
		return merchantInfoDAO.updateByCriteria(merchantInfo,criteria);
	}
	
	/**
	 * 状态更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-13 15:09:11
	 */
	@Override
	public long updateStatus(String id,String status){
		return merchantInfoDAO.updateStatus(id,status);
	}	
}

