/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2016
 */
package com.hfepay.scancode.service.operator.impl;

import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hfepay.commons.base.lang.Strings;
import com.hfepay.commons.criteria.Cnd;
import com.hfepay.commons.criteria.Criteria;
import com.hfepay.commons.criteria.CriteriaBuilder;
import com.hfepay.commons.utils.PagingResult;
import com.hfepay.scancode.condition.ChannelWxParamsCondition;
import com.hfepay.scancode.dao.ChannelWxParamsDAO;
import com.hfepay.scancode.entity.ChannelWxParams;
import com.hfepay.scancode.service.operator.ChannelWxParamsService;

@Service("channelWxParamsService")
public class ChannelWxParamsServiceImpl implements ChannelWxParamsService {
	
	@Autowired
    private ChannelWxParamsDAO channelWxParamsDAO;
    
    /**
	 * @Title: findPagingResult
	 * @Description: 列表(分页)
	 * @author: Ricky
	 * @param channelWxParamsCondition
	 * @return: PagingResult<ChannelWxParams>
	 * @date CreateDate : 2016-11-07 14:47:12
	 */
    @Override
	public PagingResult<ChannelWxParams> findPagingResult(ChannelWxParamsCondition channelWxParamsCondition){
		CriteriaBuilder cb = Cnd.builder(ChannelWxParams.class);
		if(!Strings.isEmpty(channelWxParamsCondition.getId())){
			cb.andEQ("id", channelWxParamsCondition.getId());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getChannelNo())){
			cb.andEQ("channelNo", channelWxParamsCondition.getChannelNo());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getAppid())){
			cb.andEQ("appid", channelWxParamsCondition.getAppid());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getSecret())){
			cb.andEQ("secret", channelWxParamsCondition.getSecret());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getStatus())){
			cb.andEQ("status", channelWxParamsCondition.getStatus());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getRecordStatus())){
			cb.andEQ("recordStatus", channelWxParamsCondition.getRecordStatus());
		}
		if(null != channelWxParamsCondition.getCreateTime()){
			cb.andEQ("createTime", channelWxParamsCondition.getCreateTime());
		}

		if(!Strings.isEmpty(channelWxParamsCondition.getOperator())){
			cb.andEQ("operator", channelWxParamsCondition.getOperator());
		}

		if(!Strings.isEmpty(channelWxParamsCondition.getRemark())){
			cb.andLike("remark", channelWxParamsCondition.getRemark());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getTemp1())){
			cb.andEQ("temp1", channelWxParamsCondition.getTemp1());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getTemp2())){
			cb.andEQ("temp2", channelWxParamsCondition.getTemp2());
		}
		Criteria buildCriteria = cb.buildCriteria();
		buildCriteria.limit(Long.valueOf(channelWxParamsCondition.getFirst()), Long.valueOf(channelWxParamsCondition.getLast()));
		return channelWxParamsDAO.findPagingResult(buildCriteria);
	}
	
	/**
	 * @Title: findAll
	 * @Description: 列表
	 * @author: Ricky
	 * @param channelWxParamsCondition
	 * @return: List<ChannelWxParams>
	 * @date CreateDate : 2016-11-07 14:47:12
	 */
	@Override
	public List<ChannelWxParams> findAll(ChannelWxParamsCondition channelWxParamsCondition){
		CriteriaBuilder cb = Cnd.builder(ChannelWxParams.class);
		if(!Strings.isEmpty(channelWxParamsCondition.getId())){
			cb.andEQ("id", channelWxParamsCondition.getId());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getChannelNo())){
			cb.andEQ("channelNo", channelWxParamsCondition.getChannelNo());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getAppid())){
			cb.andEQ("appid", channelWxParamsCondition.getAppid());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getSecret())){
			cb.andEQ("secret", channelWxParamsCondition.getSecret());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getStatus())){
			cb.andEQ("status", channelWxParamsCondition.getStatus());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getRecordStatus())){
			cb.andEQ("recordStatus", channelWxParamsCondition.getRecordStatus());
		}
		if(null != channelWxParamsCondition.getCreateTime()){
			cb.andEQ("createTime", channelWxParamsCondition.getCreateTime());
		}

		if(!Strings.isEmpty(channelWxParamsCondition.getOperator())){
			cb.andEQ("operator", channelWxParamsCondition.getOperator());
		}

		if(!Strings.isEmpty(channelWxParamsCondition.getRemark())){
			cb.andLike("remark", channelWxParamsCondition.getRemark());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getTemp1())){
			cb.andEQ("temp1", channelWxParamsCondition.getTemp1());
		}
		if(!Strings.isEmpty(channelWxParamsCondition.getTemp2())){
			cb.andEQ("temp2", channelWxParamsCondition.getTemp2());
		}
		Criteria buildCriteria = cb.buildCriteria();
		return channelWxParamsDAO.findByCriteria(buildCriteria);
	}
	
	/**
	 * @Title: findById
	 * @Description: 主键查找
	 * @author: Ricky
	 * @param id
	 * @return: ChannelWxParams
	 * @date CreateDate : 2016-11-07 14:47:12
	 */
	@Override
	public ChannelWxParams findById(String id){
		return channelWxParamsDAO.get(id);
	}
	
	/**
	 * @Title: insert
	 * @Description: 新增
	 * @author: Ricky
	 * @param channelWxParamsCondition
	 * @return: long
	 * @date CreateDate : 2016-11-07 14:47:12
	 */
	@Override
	public long insert(ChannelWxParamsCondition channelWxParamsCondition){
		ChannelWxParams channelWxParams = new ChannelWxParams();
		BeanUtils.copyProperties(channelWxParamsCondition, channelWxParams);
		return channelWxParamsDAO.insert(channelWxParams);
	}

	/**
	 * @Title: deleteById
	 * @Description: 删除
	 * @author: Ricky
	 * @param id
	 * @return: long
	 * @date CreateDate : 2016-11-07 14:47:12
	 */
	@Override
	public long deleteById(String id){
		return channelWxParamsDAO.deleteById(id);
	}
	
	/**
	 * @Title: deleteByCriteria
	 * @Description: 条件删除
	 * @author: Ricky
	 * @param Criteria
	 * @return: long
	 * @date CreateDate : 2016-11-07 14:47:12
	 */
	@Override
	public long deleteByCriteria(Criteria criteria){
		return channelWxParamsDAO.deleteByCriteria(criteria);
	}
	
	/**
	 * @Title: countByCriteria
	 * @Description: 行数汇总
	 * @author: Ricky
	 * @param Criteria
	 * @return: long
	 * @date CreateDate : 2016-11-07 14:47:12
	 */
	@Override
	public long countByCriteria(Criteria criteria){
		return channelWxParamsDAO.countByCriteria(criteria);
	}
	
	/**
	 * @Title: update
	 * @Description: 更新
	 * @author: Ricky
	 * @param channelWxParamsCondition
	 * @return: long
	 * @date CreateDate : 2016-11-07 14:47:12
	 */
	@Override
	public long update(ChannelWxParamsCondition channelWxParamsCondition){
		ChannelWxParams channelWxParams = new ChannelWxParams();
		BeanUtils.copyProperties(channelWxParamsCondition, channelWxParams);
		return channelWxParamsDAO.update(channelWxParams);
	}
	
	/**
	 * @Title: updateByCriteria
	 * @Description: 条件更新
	 * @author: Ricky
	 * @param channelWxParamsCondition
	 * @param Criteria
	 * @return: long
	 * @date CreateDate : 2016-11-07 14:47:12
	 */
	@Override
	public long updateByCriteria(ChannelWxParamsCondition channelWxParamsCondition,Criteria criteria){
		ChannelWxParams channelWxParams = new ChannelWxParams();
		BeanUtils.copyProperties(channelWxParamsCondition, channelWxParams);
		return channelWxParamsDAO.updateByCriteria(channelWxParams,criteria);
	}
	
	/**
	 * @Title: updateStatus
	 * @Description: 状态更新
	 * @author: Ricky
	 * @param id
	 * @return: long
	 * @date CreateDate : 2016-11-07 14:47:12
	 */
	@Override
	public long updateStatus(String id,String status){
		return channelWxParamsDAO.updateStatus(id,status);
	}	
}

