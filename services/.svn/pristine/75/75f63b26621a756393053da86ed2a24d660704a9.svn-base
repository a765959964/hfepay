/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2016
 */package com.hfepay.scancode.service.operator.impl;

import java.io.File;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hfepay.cache.jedis.RedisKey;
import com.hfepay.cache.jedis.impl.RedisSharedCache;
import com.hfepay.commons.base.lang.HttpRequestClient;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.commons.criteria.Cnd;
import com.hfepay.commons.criteria.Criteria;
import com.hfepay.commons.criteria.CriteriaBuilder;
import com.hfepay.commons.criteria.Order;
import com.hfepay.commons.utils.PagingResult;
import com.hfepay.scancode.api.condition.ApiMappingDicionCondition;
import com.hfepay.scancode.api.entity.ApiMappingDicion;
import com.hfepay.scancode.api.service.ApiMappingDicionService;
import com.hfepay.scancode.api.service.MerchantBusinessService;
import com.hfepay.scancode.api.service.config.HfepayConfig;
import com.hfepay.scancode.condition.MerchantInfoCondition;
import com.hfepay.scancode.dao.MerchantInfoDAO;
import com.hfepay.scancode.entity.ChannelAdmin;
import com.hfepay.scancode.entity.ChannelExpand;
import com.hfepay.scancode.entity.MerchantInfo;
import com.hfepay.scancode.enumeration.MerchantStatus;
import com.hfepay.scancode.enumeration.RedisKeyEnum;
import com.hfepay.scancode.service.commons.ScanCodeConstants;
import com.hfepay.scancode.service.operator.ChannelExpandService;
import com.hfepay.scancode.service.operator.MerchantInfoService;
import com.hfepay.scancode.service.operator.UserSmsService;
import com.hfepay.scancode.service.utils.PhotoUtil;

import net.sf.json.JSONObject;

@Service("merchantInfoService")
public class MerchantInfoServiceImpl implements MerchantInfoService {
	
	public static final Logger log = LoggerFactory.getLogger(MerchantInfoServiceImpl.class);
	
	@Autowired
    private MerchantInfoDAO merchantInfoDAO;
	
	@Autowired
	private UserSmsService userSmsService;
	
	@Autowired
	private ChannelExpandService channelExpandService;
	
	@Autowired
	private MerchantBusinessService merchantBusinessService;
	
	@Autowired
	private ApiMappingDicionService apiMappingDicionService;
	
	@Autowired
	private RedisSharedCache redisSharedCache;
	
    /**
	 * 列表(分页)
	 * @param merchantInfoCondition 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-20 17:39:26
	 */
    @Override
	public PagingResult<MerchantInfo> findPagingResult(MerchantInfoCondition merchantInfoCondition){
		CriteriaBuilder cb = Cnd.builder(MerchantInfo.class);
		if(!Strings.isEmpty(merchantInfoCondition.getId())){
			cb.andEQ("id", merchantInfoCondition.getId());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelNo())){
			cb.andEQ("channelNo", merchantInfoCondition.getChannelNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelName())){
			cb.andLike("channelName", merchantInfoCondition.getChannelName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentNo())){
			cb.andEQ("agentNo", merchantInfoCondition.getAgentNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentName())){
			cb.andLike("agentName", merchantInfoCondition.getAgentName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantNo())){
			cb.andEQ("merchantNo", merchantInfoCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantName())){
			cb.andLike("merchantName", merchantInfoCondition.getMerchantName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getShortName())){
			cb.andLike("shortName", merchantInfoCondition.getShortName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPlatformMerchantNo())){
			cb.andEQ("platformMerchantNo", merchantInfoCondition.getPlatformMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getBusType())){
			cb.andEQ("busType", merchantInfoCondition.getBusType());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getName())){
			cb.andEQ("name", merchantInfoCondition.getName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdCard())){
			cb.andEQ("idCard", merchantInfoCondition.getIdCard());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg1())){
			cb.andEQ("idcardImg1", merchantInfoCondition.getIdcardImg1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg2())){
			cb.andEQ("idcardImg2", merchantInfoCondition.getIdcardImg2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg3())){
			cb.andEQ("idcardImg3", merchantInfoCondition.getIdcardImg3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMobile())){
			cb.andEQ("mobile", merchantInfoCondition.getMobile());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPhone())){
			cb.andEQ("phone", merchantInfoCondition.getPhone());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getEmail())){
			cb.andEQ("email", merchantInfoCondition.getEmail());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAddress())){
			cb.andEQ("address", merchantInfoCondition.getAddress());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicense())){
			cb.andEQ("merchantLicense", merchantInfoCondition.getMerchantLicense());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicenseImg())){
			cb.andEQ("merchantLicenseImg", merchantInfoCondition.getMerchantLicenseImg());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTaxNo())){
			cb.andEQ("taxNo", merchantInfoCondition.getTaxNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTaxImg())){
			cb.andEQ("taxImg", merchantInfoCondition.getTaxImg());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getOrgNo())){
			cb.andEQ("orgNo", merchantInfoCondition.getOrgNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getQrCode())){
			cb.andEQ("qrCode", merchantInfoCondition.getQrCode());
		}
		if(null != merchantInfoCondition.getAuthenStatus()){
			cb.andEQ("authenStatus", merchantInfoCondition.getAuthenStatus());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getStatus())){
			cb.andEQ("status", merchantInfoCondition.getStatus());
		}
		if(null != merchantInfoCondition.getCreateTime()){
			cb.andEQ("createTime", merchantInfoCondition.getCreateTime());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getOperator())){
			cb.andEQ("operator", merchantInfoCondition.getOperator());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getRemark())){
			cb.andLike("remark", merchantInfoCondition.getRemark());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp1())){
			cb.andEQ("temp1", merchantInfoCondition.getTemp1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp2())){
			cb.andEQ("temp2", merchantInfoCondition.getTemp2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp3())){
			cb.andEQ("temp3", merchantInfoCondition.getTemp3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp4())){
			cb.andEQ("temp4", merchantInfoCondition.getTemp4());
		}
		if(merchantInfoCondition.getChannelAdmin() != null){
			ChannelAdmin admin = merchantInfoCondition.getChannelAdmin();
			channelFilter(cb, admin);
		}
		cb.orderBy("status", Order.ASC);
		cb.orderBy("createTime", Order.DESC);
		//排序
		if(!Strings.isEmpty(merchantInfoCondition.getOrderBy())){
			if(merchantInfoCondition.getOrderBy().indexOf(",")>0){
				String[] orderBys = merchantInfoCondition.getOrderBy().split(",");
				String[] orders = merchantInfoCondition.getOrder().split(",");
				for(int i=0; i<orderBys.length && i<orders.length; i++){
					cb.orderBy(orderBys[i], Order.valueOf(orders[i]));
				}
			}else{
				cb.orderBy(merchantInfoCondition.getOrderBy(), Order.valueOf(merchantInfoCondition.getOrder()));
			}
		}
		Criteria buildCriteria = cb.buildCriteria();
		buildCriteria.limit(Long.valueOf(merchantInfoCondition.getFirst()), Long.valueOf(merchantInfoCondition.getLast()));
		return merchantInfoDAO.findPagingResult(buildCriteria);
	}
	
    private void channelFilter(CriteriaBuilder cb, ChannelAdmin admin) {
		switch (admin.getIdentityFlag()) {
		case "1":
			cb.addParam("type", admin.getIdentityFlag());
			cb.addParam("valueNo", admin.getChannelCode());
			break;
		case "2":
			cb.addParam("type", admin.getIdentityFlag());
			cb.addParam("valueNo", admin.getAgentNo());
			break;
		case "3":
			cb.andEQ("merchantNo", admin.getMerchantNo());
			break;
		default:
			break;
		}
	}
    
	/**
	 * 列表
	 * @param merchantInfo 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-20 17:39:26
	 */
	@Override
	public List<MerchantInfo> findAll(MerchantInfoCondition merchantInfoCondition){
		CriteriaBuilder cb = Cnd.builder(MerchantInfo.class);
		if(!Strings.isEmpty(merchantInfoCondition.getId())){
			cb.andEQ("id", merchantInfoCondition.getId());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelNo())){
			cb.andEQ("channelNo", merchantInfoCondition.getChannelNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelName())){
			cb.andLike("channelName", merchantInfoCondition.getChannelName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentNo())){
			cb.andEQ("agentNo", merchantInfoCondition.getAgentNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentName())){
			cb.andLike("agentName", merchantInfoCondition.getAgentName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantNo())){
			cb.andEQ("merchantNo", merchantInfoCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantName())){
			cb.andLike("merchantName", merchantInfoCondition.getMerchantName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getShortName())){
			cb.andLike("shortName", merchantInfoCondition.getShortName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPlatformMerchantNo())){
			cb.andEQ("platformMerchantNo", merchantInfoCondition.getPlatformMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getBusType())){
			cb.andEQ("busType", merchantInfoCondition.getBusType());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getName())){
			cb.andEQ("name", merchantInfoCondition.getName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdCard())){
			cb.andEQ("idCard", merchantInfoCondition.getIdCard());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg1())){
			cb.andEQ("idcardImg1", merchantInfoCondition.getIdcardImg1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg2())){
			cb.andEQ("idcardImg2", merchantInfoCondition.getIdcardImg2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg3())){
			cb.andEQ("idcardImg3", merchantInfoCondition.getIdcardImg3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMobile())){
			cb.andEQ("mobile", merchantInfoCondition.getMobile());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPhone())){
			cb.andEQ("phone", merchantInfoCondition.getPhone());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getEmail())){
			cb.andEQ("email", merchantInfoCondition.getEmail());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAddress())){
			cb.andEQ("address", merchantInfoCondition.getAddress());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicense())){
			cb.andEQ("merchantLicense", merchantInfoCondition.getMerchantLicense());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicenseImg())){
			cb.andEQ("merchantLicenseImg", merchantInfoCondition.getMerchantLicenseImg());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTaxNo())){
			cb.andEQ("taxNo", merchantInfoCondition.getTaxNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTaxImg())){
			cb.andEQ("taxImg", merchantInfoCondition.getTaxImg());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getOrgNo())){
			cb.andEQ("orgNo", merchantInfoCondition.getOrgNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getQrCode())){
			cb.andEQ("qrCode", merchantInfoCondition.getQrCode());
		}
		if(null != merchantInfoCondition.getAuthenStatus()){
			cb.andEQ("authenStatus", merchantInfoCondition.getAuthenStatus());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getStatus())){
			cb.andEQ("status", merchantInfoCondition.getStatus());
		}
		if(null != merchantInfoCondition.getCreateTime()){
			cb.andEQ("createTime", merchantInfoCondition.getCreateTime());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getOperator())){
			cb.andEQ("operator", merchantInfoCondition.getOperator());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getRemark())){
			cb.andLike("remark", merchantInfoCondition.getRemark());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp1())){
			cb.andEQ("temp1", merchantInfoCondition.getTemp1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp2())){
			cb.andEQ("temp2", merchantInfoCondition.getTemp2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp3())){
			cb.andEQ("temp3", merchantInfoCondition.getTemp3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp4())){
			cb.andEQ("temp4", merchantInfoCondition.getTemp4());
		}
		if(merchantInfoCondition.getChannelAdmin() != null){
			ChannelAdmin admin = merchantInfoCondition.getChannelAdmin();
			channelFilter(cb, admin);
		}
		Criteria buildCriteria = cb.buildCriteria();
		return merchantInfoDAO.findByCriteria(buildCriteria);
	}
	
	/**
	 * 主键查找
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-20 17:39:26
	 */
	@Override
	public MerchantInfo findById(String id){
		return merchantInfoDAO.get(id);
	}
	
	/**
	 * 新增
	 * @param merchantInfoCondition
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-20 17:39:26
	 */
	@Override
	public long insert(MerchantInfoCondition merchantInfoCondition){
		log.info("#######merchantInfoCondition["+JSONObject.fromObject(merchantInfoCondition)+"]######");
		MerchantInfo merchantInfo = new MerchantInfo();
		BeanUtils.copyProperties(merchantInfoCondition, merchantInfo);
		long result = merchantInfoDAO.insert(merchantInfo);
		try {
			List<MerchantInfo> list = this.findAll(merchantInfoCondition);
			redisSharedCache.setObj(new RedisKey(RedisKeyEnum.MERCHANT_BASE.getGroup(), RedisKeyEnum.MERCHANT_BASE.getKey()+list.get(0).getMerchantNo()), list.get(0));
		} catch (Exception e) {
			log.error("#######保存商户数据到redis失败######");
		}
		return result;
	}

	/**
	 * 删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-20 17:39:26
	 */
	@Override
	public long deleteById(String id){
		return merchantInfoDAO.deleteById(id);
	}
	
	/**
	 * 条件删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-20 17:39:26
	 */
	@Override
	public long deleteByCriteria(MerchantInfoCondition merchantInfoCondition){
		CriteriaBuilder cb = Cnd.builder(MerchantInfo.class);
		if(!Strings.isEmpty(merchantInfoCondition.getId())){
			cb.andEQ("id", merchantInfoCondition.getId());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelNo())){
			cb.andEQ("channelNo", merchantInfoCondition.getChannelNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelName())){
			cb.andEQ("channelName", merchantInfoCondition.getChannelName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentNo())){
			cb.andEQ("agentNo", merchantInfoCondition.getAgentNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentName())){
			cb.andEQ("agentName", merchantInfoCondition.getAgentName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantNo())){
			cb.andEQ("merchantNo", merchantInfoCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantName())){
			cb.andEQ("merchantName", merchantInfoCondition.getMerchantName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getShortName())){
			cb.andEQ("shortName", merchantInfoCondition.getShortName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPlatformMerchantNo())){
			cb.andEQ("platformMerchantNo", merchantInfoCondition.getPlatformMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getBusType())){
			cb.andEQ("busType", merchantInfoCondition.getBusType());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getName())){
			cb.andEQ("name", merchantInfoCondition.getName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdCard())){
			cb.andEQ("idCard", merchantInfoCondition.getIdCard());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg1())){
			cb.andEQ("idcardImg1", merchantInfoCondition.getIdcardImg1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg2())){
			cb.andEQ("idcardImg2", merchantInfoCondition.getIdcardImg2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg3())){
			cb.andEQ("idcardImg3", merchantInfoCondition.getIdcardImg3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMobile())){
			cb.andEQ("mobile", merchantInfoCondition.getMobile());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPhone())){
			cb.andEQ("phone", merchantInfoCondition.getPhone());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getEmail())){
			cb.andEQ("email", merchantInfoCondition.getEmail());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAddress())){
			cb.andEQ("address", merchantInfoCondition.getAddress());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicense())){
			cb.andEQ("merchantLicense", merchantInfoCondition.getMerchantLicense());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicenseImg())){
			cb.andEQ("merchantLicenseImg", merchantInfoCondition.getMerchantLicenseImg());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTaxNo())){
			cb.andEQ("taxNo", merchantInfoCondition.getTaxNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTaxImg())){
			cb.andEQ("taxImg", merchantInfoCondition.getTaxImg());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getOrgNo())){
			cb.andEQ("orgNo", merchantInfoCondition.getOrgNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getQrCode())){
			cb.andEQ("qrCode", merchantInfoCondition.getQrCode());
		}
		if(null != merchantInfoCondition.getAuthenStatus()){
			cb.andEQ("authenStatus", merchantInfoCondition.getAuthenStatus());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getStatus())){
			cb.andEQ("status", merchantInfoCondition.getStatus());
		}
		if(null != merchantInfoCondition.getCreateTime()){
			cb.andEQ("createTime", merchantInfoCondition.getCreateTime());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getOperator())){
			cb.andEQ("operator", merchantInfoCondition.getOperator());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getRemark())){
			cb.andLike("remark", merchantInfoCondition.getRemark());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp1())){
			cb.andEQ("temp1", merchantInfoCondition.getTemp1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp2())){
			cb.andEQ("temp2", merchantInfoCondition.getTemp2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp3())){
			cb.andEQ("temp3", merchantInfoCondition.getTemp3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp4())){
			cb.andEQ("temp4", merchantInfoCondition.getTemp4());
		}
		Criteria buildCriteria = cb.buildCriteria();
		MerchantInfo merchantInfo = new MerchantInfo();
		BeanUtils.copyProperties(merchantInfoCondition, merchantInfo);
		return merchantInfoDAO.deleteByCriteria(buildCriteria);
	}
	
	/**
	 * 行数汇总
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-20 17:39:26
	 */
	@Override
	public long countByCriteria(MerchantInfoCondition merchantInfoCondition){
		CriteriaBuilder cb = Cnd.builder(MerchantInfo.class);
		if(!Strings.isEmpty(merchantInfoCondition.getId())){
			cb.andEQ("id", merchantInfoCondition.getId());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelNo())){
			cb.andEQ("channelNo", merchantInfoCondition.getChannelNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelName())){
			cb.andEQ("channelName", merchantInfoCondition.getChannelName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentNo())){
			cb.andEQ("agentNo", merchantInfoCondition.getAgentNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentName())){
			cb.andEQ("agentName", merchantInfoCondition.getAgentName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantNo())){
			cb.andEQ("merchantNo", merchantInfoCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantName())){
			cb.andEQ("merchantName", merchantInfoCondition.getMerchantName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getShortName())){
			cb.andEQ("shortName", merchantInfoCondition.getShortName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPlatformMerchantNo())){
			cb.andEQ("platformMerchantNo", merchantInfoCondition.getPlatformMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getBusType())){
			cb.andEQ("busType", merchantInfoCondition.getBusType());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getName())){
			cb.andEQ("name", merchantInfoCondition.getName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdCard())){
			cb.andEQ("idCard", merchantInfoCondition.getIdCard());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg1())){
			cb.andEQ("idcardImg1", merchantInfoCondition.getIdcardImg1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg2())){
			cb.andEQ("idcardImg2", merchantInfoCondition.getIdcardImg2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg3())){
			cb.andEQ("idcardImg3", merchantInfoCondition.getIdcardImg3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMobile())){
			cb.andEQ("mobile", merchantInfoCondition.getMobile());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPhone())){
			cb.andEQ("phone", merchantInfoCondition.getPhone());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getEmail())){
			cb.andEQ("email", merchantInfoCondition.getEmail());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAddress())){
			cb.andEQ("address", merchantInfoCondition.getAddress());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicense())){
			cb.andEQ("merchantLicense", merchantInfoCondition.getMerchantLicense());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicenseImg())){
			cb.andEQ("merchantLicenseImg", merchantInfoCondition.getMerchantLicenseImg());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTaxNo())){
			cb.andEQ("taxNo", merchantInfoCondition.getTaxNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTaxImg())){
			cb.andEQ("taxImg", merchantInfoCondition.getTaxImg());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getOrgNo())){
			cb.andEQ("orgNo", merchantInfoCondition.getOrgNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getQrCode())){
			cb.andEQ("qrCode", merchantInfoCondition.getQrCode());
		}
		if(null != merchantInfoCondition.getAuthenStatus()){
			cb.andEQ("authenStatus", merchantInfoCondition.getAuthenStatus());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getStatus())){
			cb.andEQ("status", merchantInfoCondition.getStatus());
		}
		if(null != merchantInfoCondition.getCreateTime()){
			cb.andEQ("createTime", merchantInfoCondition.getCreateTime());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getOperator())){
			cb.andEQ("operator", merchantInfoCondition.getOperator());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getRemark())){
			cb.andLike("remark", merchantInfoCondition.getRemark());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp1())){
			cb.andEQ("temp1", merchantInfoCondition.getTemp1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp2())){
			cb.andEQ("temp2", merchantInfoCondition.getTemp2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp3())){
			cb.andEQ("temp3", merchantInfoCondition.getTemp3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp4())){
			cb.andEQ("temp4", merchantInfoCondition.getTemp4());
		}
		Criteria buildCriteria = cb.buildCriteria();
		MerchantInfo merchantInfo = new MerchantInfo();
		BeanUtils.copyProperties(merchantInfoCondition, merchantInfo);
		return merchantInfoDAO.countByCriteria(buildCriteria);
	}
	
	/**
	 * 更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-20 17:39:26
	 */
	@Override
	public long update(MerchantInfoCondition merchantInfoCondition){
		log.info("#######merchantInfoCondition["+JSONObject.fromObject(merchantInfoCondition)+"]######");
		MerchantInfo merchantInfo = new MerchantInfo();
		BeanUtils.copyProperties(merchantInfoCondition, merchantInfo);
		long result = merchantInfoDAO.update(merchantInfo);
		try {
			List<MerchantInfo> list = this.findAll(merchantInfoCondition);
			redisSharedCache.del(new RedisKey(RedisKeyEnum.MERCHANT_BASE.getGroup(), RedisKeyEnum.MERCHANT_BASE.getKey()+list.get(0).getMerchantNo()));
			redisSharedCache.setObj(new RedisKey(RedisKeyEnum.MERCHANT_BASE.getGroup(), RedisKeyEnum.MERCHANT_BASE.getKey()+list.get(0).getMerchantNo()), list.get(0));
		} catch (Exception e) {
			log.error("#######保存商户数据到redis失败######");
		}
		return result;
	}
	
	/**
	 * 更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-20 17:39:26
	 */
	@Override
	public long updateByAudit(MerchantInfoCondition merchantInfoCondition){
		MerchantInfo merchantInfo = new MerchantInfo();
		
		//审核通过发送短信
		if (merchantInfoCondition.getStatus().equals(MerchantStatus.MERCHANT_STATUS_3.getCode())) {
			log.info("#########merchant["+merchantInfoCondition.getMerchantNo()+"]审核通过发送短信########");
			//短信通知商户
			String url = "";
			ChannelExpand channelExpand = channelExpandService.findByChannelNo(merchantInfoCondition.getChannelNo());
			if (null != channelExpand.getDomainName() && !Strings.isEmpty(channelExpand.getDomainName())) {
				url = channelExpand.getDomainName();//使用客户自定义域名
			}else {
				url = channelExpand.getChannelCode()+".qd.huaepay.com";//使用我们自动装配的域名
			}
			
//			String content = "您的商户入驻申请已审核通过。用户名:"+merchantInfoCondition.getMobile()+"，初始密码："+merchantInfoCondition.getTemp1()+"，请尽快登录并修改初始密码！请不要把账户信息泄露给其他人,如有疑问请联系："+channelExpand.getPhone()+"。如非本人操作，可不用理会！";
			String content = "您的商户入驻申请已审核通过。您可通过电脑使用"+url+"地址登录，用户名:"+merchantInfoCondition.getMobile()+"，初始密码："+merchantInfoCondition.getTemp1()+"，请尽快登录并修改初始密码！请不要把账户信息泄露给其他人。如非本人操作，可不用理会！";
			log.info("########商户入驻成功，给["+merchantInfoCondition.getMobile()+"]发送内容["+content+"]#######");
			try {
//				smsService.sendSms(content, merchantInfoCondition.getMobile());
				userSmsService.sendSms(content, merchantInfoCondition.getMobile(), merchantInfoCondition.getMerchantNo());
			} catch (Exception e) {
				log.error("#########merchant["+merchantInfoCondition.getMerchantNo()+"]审核通过发送短信失败########");
				e.printStackTrace();
			}
		}
		
		BeanUtils.copyProperties(merchantInfoCondition, merchantInfo);
		long result = merchantInfoDAO.update(merchantInfo);
		try {
			log.info("#######merchantInfoCondition["+JSONObject.fromObject(merchantInfoCondition)+"]######");
			List<MerchantInfo> list = this.findAll(merchantInfoCondition);
			redisSharedCache.del(new RedisKey(RedisKeyEnum.MERCHANT_BASE.getGroup(), RedisKeyEnum.MERCHANT_BASE.getKey()+merchantInfoCondition.getMerchantNo()));
			redisSharedCache.setObj(new RedisKey(RedisKeyEnum.MERCHANT_BASE.getGroup(), RedisKeyEnum.MERCHANT_BASE.getKey()+merchantInfoCondition.getMerchantNo()), list.get(0));
		} catch (Exception e) {
			log.error("#######保存商户数据到redis失败######");
		}
		return result;
	}
	
	
	/**
	 * 条件更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-20 17:39:26
	 */
	@Override
	public long updateByCriteria(MerchantInfoCondition merchantInfoCondition){
		CriteriaBuilder cb = Cnd.builder(MerchantInfo.class);
		if(!Strings.isEmpty(merchantInfoCondition.getId())){
			cb.andEQ("id", merchantInfoCondition.getId());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelNo())){
			cb.andEQ("channelNo", merchantInfoCondition.getChannelNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelName())){
			cb.andEQ("channelName", merchantInfoCondition.getChannelName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentNo())){
			cb.andEQ("agentNo", merchantInfoCondition.getAgentNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentName())){
			cb.andEQ("agentName", merchantInfoCondition.getAgentName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantNo())){
			cb.andEQ("merchantNo", merchantInfoCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantName())){
			cb.andEQ("merchantName", merchantInfoCondition.getMerchantName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getShortName())){
			cb.andEQ("shortName", merchantInfoCondition.getShortName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPlatformMerchantNo())){
			cb.andEQ("platformMerchantNo", merchantInfoCondition.getPlatformMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getBusType())){
			cb.andEQ("busType", merchantInfoCondition.getBusType());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getName())){
			cb.andEQ("name", merchantInfoCondition.getName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdCard())){
			cb.andEQ("idCard", merchantInfoCondition.getIdCard());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg1())){
			cb.andEQ("idcardImg1", merchantInfoCondition.getIdcardImg1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg2())){
			cb.andEQ("idcardImg2", merchantInfoCondition.getIdcardImg2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg3())){
			cb.andEQ("idcardImg3", merchantInfoCondition.getIdcardImg3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMobile())){
			cb.andEQ("mobile", merchantInfoCondition.getMobile());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPhone())){
			cb.andEQ("phone", merchantInfoCondition.getPhone());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getEmail())){
			cb.andEQ("email", merchantInfoCondition.getEmail());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAddress())){
			cb.andEQ("address", merchantInfoCondition.getAddress());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicense())){
			cb.andEQ("merchantLicense", merchantInfoCondition.getMerchantLicense());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicenseImg())){
			cb.andEQ("merchantLicenseImg", merchantInfoCondition.getMerchantLicenseImg());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTaxNo())){
			cb.andEQ("taxNo", merchantInfoCondition.getTaxNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTaxImg())){
			cb.andEQ("taxImg", merchantInfoCondition.getTaxImg());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getOrgNo())){
			cb.andEQ("orgNo", merchantInfoCondition.getOrgNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getQrCode())){
			cb.andEQ("qrCode", merchantInfoCondition.getQrCode());
		}
		if(null != merchantInfoCondition.getAuthenStatus()){
			cb.andEQ("authenStatus", merchantInfoCondition.getAuthenStatus());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getStatus())){
			cb.andEQ("status", merchantInfoCondition.getStatus());
		}
		if(null != merchantInfoCondition.getCreateTime()){
			cb.andEQ("createTime", merchantInfoCondition.getCreateTime());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getOperator())){
			cb.andEQ("operator", merchantInfoCondition.getOperator());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getRemark())){
			cb.andLike("remark", merchantInfoCondition.getRemark());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp1())){
			cb.andEQ("temp1", merchantInfoCondition.getTemp1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp2())){
			cb.andEQ("temp2", merchantInfoCondition.getTemp2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp3())){
			cb.andEQ("temp3", merchantInfoCondition.getTemp3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp4())){
			cb.andEQ("temp4", merchantInfoCondition.getTemp4());
		}
		Criteria buildCriteria = cb.buildCriteria();
		MerchantInfo merchantInfo = new MerchantInfo();
		BeanUtils.copyProperties(merchantInfoCondition, merchantInfo);
		return merchantInfoDAO.updateByCriteria(merchantInfo,buildCriteria);
	}
	
	/**
	 * 状态更新
	 *
	 * @author husain
	 * @date CreateDate : 2016-10-21 14:04:47
	 */
	@Override
	public long updateStatus(String id,String status){
		return merchantInfoDAO.updateStatus(id,status);
	}	
	
	/**
	 * @Title: findByChannelNo
	 * @Description: 商户编码查找
	 * @author: Ricky
	 * @param MerchantNo
	 * @return: MerchantInfo
	 * @date CreateDate : 2016-10-13 15:19:03
	 */
	@Override
	public MerchantInfo findByMerchantNo(String MerchantNo){
		MerchantInfoCondition merchantInfoCondition = new MerchantInfoCondition();			
		merchantInfoCondition.setMerchantNo(MerchantNo);		
		List<MerchantInfo> list = this.findAll(merchantInfoCondition);
		if(null!=list&&list.size() > 0){
			MerchantInfo entity = list.get(0);
			return entity;
		}
		return null;
	}
	/**
	 * 
	 * @Title: updateByMerchantNo
	 * @Description: 商户申请录入商户信息
	 * @param condition
	 * @return
	 */
	@Override
	public long updateByMerchantNo(MerchantInfoCondition condition) {
		
		// TODO Auto-generated method stub
		//检查是否需要更新
		if(condition.isCheck()){//更新检查
			if(!isUpdate(condition)){
				return 1;
			}
		}
		MerchantInfo merchantInfo = new MerchantInfo();
		BeanUtils.copyProperties(condition, merchantInfo);
		merchantInfo.setShortName(condition.getMerchantName());
		//merchantInfo.setStatus("6");
		merchantInfo.setAuthenStatus(0);
		long result = merchantInfoDAO.updateByMerchantNo(merchantInfo);
		try {
			log.info("#######merchantInfoCondition["+JSONObject.fromObject(condition)+"]######");
			List<MerchantInfo> list = this.findAll(condition);
			redisSharedCache.del(new RedisKey(RedisKeyEnum.MERCHANT_BASE.getGroup(), RedisKeyEnum.MERCHANT_BASE.getKey()+condition.getMerchantNo()));
			redisSharedCache.setObj(new RedisKey(RedisKeyEnum.MERCHANT_BASE.getGroup(), RedisKeyEnum.MERCHANT_BASE.getKey()+condition.getMerchantNo()), list.get(0));
		} catch (Exception e) {
			log.error("#######保存商户数据到redis失败######");
		}
		return result;
	}
	
	private boolean isUpdate(MerchantInfoCondition condition){
		String filePath = ScanCodeConstants.FILE_UPLOAD_ROOT_PATH+ScanCodeConstants.SPT+
				ScanCodeConstants.WECHAT_IMGUPLOAD_TYPE+ScanCodeConstants.SPT+condition.getMerchantNo()+ScanCodeConstants.SPT;
		boolean isUpdate = false;
		MerchantInfo merchantInfo = findByMerchantNo(condition.getMerchantNo());
		if(!condition.getName().equals(merchantInfo.getName())){
			isUpdate = true;
		}
		if(!condition.getMerchantName().equals(merchantInfo.getMerchantName())){
			isUpdate = true;
		}
		if(!condition.getIdCard().equals(merchantInfo.getIdCard())){
			isUpdate = true;
		}
		if(!condition.getIdcardImg1().equals(merchantInfo.getIdcardImg1())){
			log.info("condition.getIdcardImg1() == "+condition.getIdcardImg1());
			String img = downLoadImg(condition.getIdcardImg1(), filePath, merchantInfo.getChannelNo());
			condition.setIdcardImg1(img);
			isUpdate = true;
		}
		if(!condition.getIdcardImg2().equals(merchantInfo.getIdcardImg2())){
			log.info("condition.getIdcardImg2() == "+condition.getIdcardImg2());	
			String img = downLoadImg(condition.getIdcardImg2(), filePath, merchantInfo.getChannelNo());
			condition.setIdcardImg2(img);
			isUpdate = true;
		}
		if(!condition.getIdcardImg3().equals(merchantInfo.getIdcardImg3())){
			log.info("condition.getIdcardImg3() == "+condition.getIdcardImg3());
			String img = downLoadImg(condition.getIdcardImg3(), filePath, merchantInfo.getChannelNo());
			condition.setIdcardImg3(img);
			isUpdate = true;
		}
		return isUpdate;
	}

	/**
	 * 列表
	 * @param merchantInfo 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-20 17:39:26
	 */
	@Override
	public List<MerchantInfo> findAllByAgentNo(MerchantInfoCondition merchantInfoCondition,List<String> list){
		CriteriaBuilder cb = Cnd.builder(MerchantInfo.class);
		if(!Strings.isEmpty(merchantInfoCondition.getId())){
			cb.andEQ("id", merchantInfoCondition.getId());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelNo())){
			cb.andEQ("channelNo", merchantInfoCondition.getChannelNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getChannelName())){
			cb.andLike("channelName", merchantInfoCondition.getChannelName());
		}
		if(list != null && list.size() > 0){
			cb.andIn("agentNo", list);
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAgentName())){
			cb.andLike("agentName", merchantInfoCondition.getAgentName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantNo())){
			cb.andEQ("merchantNo", merchantInfoCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantName())){
			cb.andLike("merchantName", merchantInfoCondition.getMerchantName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getShortName())){
			cb.andLike("shortName", merchantInfoCondition.getShortName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPlatformMerchantNo())){
			cb.andEQ("platformMerchantNo", merchantInfoCondition.getPlatformMerchantNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getBusType())){
			cb.andEQ("busType", merchantInfoCondition.getBusType());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getName())){
			cb.andEQ("name", merchantInfoCondition.getName());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdCard())){
			cb.andEQ("idCard", merchantInfoCondition.getIdCard());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg1())){
			cb.andEQ("idcardImg1", merchantInfoCondition.getIdcardImg1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg2())){
			cb.andEQ("idcardImg2", merchantInfoCondition.getIdcardImg2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getIdcardImg3())){
			cb.andEQ("idcardImg3", merchantInfoCondition.getIdcardImg3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMobile())){
			cb.andEQ("mobile", merchantInfoCondition.getMobile());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getPhone())){
			cb.andEQ("phone", merchantInfoCondition.getPhone());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getEmail())){
			cb.andEQ("email", merchantInfoCondition.getEmail());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getAddress())){
			cb.andEQ("address", merchantInfoCondition.getAddress());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicense())){
			cb.andEQ("merchantLicense", merchantInfoCondition.getMerchantLicense());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getMerchantLicenseImg())){
			cb.andEQ("merchantLicenseImg", merchantInfoCondition.getMerchantLicenseImg());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTaxNo())){
			cb.andEQ("taxNo", merchantInfoCondition.getTaxNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTaxImg())){
			cb.andEQ("taxImg", merchantInfoCondition.getTaxImg());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getOrgNo())){
			cb.andEQ("orgNo", merchantInfoCondition.getOrgNo());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getQrCode())){
			cb.andEQ("qrCode", merchantInfoCondition.getQrCode());
		}
		if(null != merchantInfoCondition.getAuthenStatus()){
			cb.andEQ("authenStatus", merchantInfoCondition.getAuthenStatus());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getStatus())){
			cb.andEQ("status", merchantInfoCondition.getStatus());
		}
		if(null != merchantInfoCondition.getCreateTime()){
			cb.andEQ("createTime", merchantInfoCondition.getCreateTime());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getOperator())){
			cb.andEQ("operator", merchantInfoCondition.getOperator());
		}

		if(!Strings.isEmpty(merchantInfoCondition.getRemark())){
			cb.andLike("remark", merchantInfoCondition.getRemark());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp1())){
			cb.andEQ("temp1", merchantInfoCondition.getTemp1());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp2())){
			cb.andEQ("temp2", merchantInfoCondition.getTemp2());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp3())){
			cb.andEQ("temp3", merchantInfoCondition.getTemp3());
		}
		if(!Strings.isEmpty(merchantInfoCondition.getTemp4())){
			cb.andEQ("temp4", merchantInfoCondition.getTemp4());
		}
		if(merchantInfoCondition.getChannelAdmin() != null){
			ChannelAdmin admin = merchantInfoCondition.getChannelAdmin();
			channelFilter(cb, admin);
		}
		Criteria buildCriteria = cb.buildCriteria();
		return merchantInfoDAO.findByCriteria(buildCriteria);
	}
	
	
	/**下载文件到本地**/
	@Override
	public String downLoadImg(String mediaId, String filePath,String channelNo) {
		//检测文件目录是否存在
		File fileDir = new File(filePath);
		if (!fileDir.exists()) {
			fileDir.mkdirs();
		}
		String accessToken;
		try {
			accessToken = merchantBusinessService.getAccessToken(channelNo);
			log.info("download img accessToken is "+accessToken+" ===============");
			ApiMappingDicionCondition condition = new ApiMappingDicionCondition();
			condition.setKeyNo(HfepayConfig.WDOWNLOADURL_KEY);
			ApiMappingDicion dic = apiMappingDicionService.getFromRedis(condition);
			if(dic==null||Strings.isEmpty(dic.getParaVal())){
				throw new RuntimeException("getJsApiTicket 获取 access_token url失败");
			}
			//https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APP_ID&secret=SECRET
			String downUrl= dic.getParaVal();
			log.info("download img downUrl is "+downUrl);
			//String downUrl="https://api.weixin.qq.com/cgi-bin/media/get?access_token=ACCESS_TOKEN&media_id=MEDIA_ID";
			downUrl = downUrl.replace("ACCESS_TOKEN", accessToken);//.replace("MEDIA_ID", mediaId);
			return getImgUrl(downUrl, mediaId,filePath);
		} catch (Exception e) {
			log.error("downLoadImg error...",e);
			e.printStackTrace();
		}
		return null;
	}
	
	private String getImgUrl(String downUrl,String mediaId,String filePath){
		log.info("download img getImgUrl mediaId is "+mediaId+" =============== filepath="+filePath);
		if(Strings.isEmpty(mediaId)){
			return null;
		}
		String imgUrl = "";
		String fileName=Strings.getUUID()+ScanCodeConstants.IMG_EXTEND;
		downUrl = downUrl.replace("MEDIA_ID", mediaId);
		try {
			 byte[] stream = HttpRequestClient.doGet(downUrl);
			 PhotoUtil.writeFile(stream, filePath, fileName);//文件到硬盘
			 imgUrl= filePath+fileName;//返回nginx映射的文件路径，供查看
		} catch (Exception e) {
			log.error("read file failed.......",e);
			e.printStackTrace();
		}
		return imgUrl;
	}
}

