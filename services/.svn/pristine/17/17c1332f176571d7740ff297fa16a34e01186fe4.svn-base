package com.hfepay.scancode.service.channel.impl;

import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.hfepay.cache.jedis.RedisKey;
import com.hfepay.cache.jedis.impl.RedisSharedCache;
import com.hfepay.common.sms.services.SmsService;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.commons.criteria.Cnd;
import com.hfepay.commons.criteria.Criteria;
import com.hfepay.commons.criteria.CriteriaBuilder;
import com.hfepay.commons.criteria.Order;
import com.hfepay.commons.utils.PagingResult;
import com.hfepay.scancode.condition.AgentBaseCondition;
import com.hfepay.scancode.condition.ChannelAdminCondition;
import com.hfepay.scancode.condition.ChannelExpandCondition;
import com.hfepay.scancode.condition.DataNodeCondition;
import com.hfepay.scancode.condition.MerchantInfoCondition;
import com.hfepay.scancode.dao.channel.ChannelAdminDAO;
import com.hfepay.scancode.entity.AgentBase;
import com.hfepay.scancode.entity.ChannelAdmin;
import com.hfepay.scancode.entity.ChannelBase;
import com.hfepay.scancode.entity.ChannelExpand;
import com.hfepay.scancode.entity.ChannelRole;
import com.hfepay.scancode.entity.ChannelRoleUser;
import com.hfepay.scancode.entity.MerchantInfo;
import com.hfepay.scancode.entity.PlatformQrcode;
import com.hfepay.scancode.enumeration.IdentityType;
import com.hfepay.scancode.enumeration.UseStatus;
import com.hfepay.scancode.service.channel.ChannelAdminService;
import com.hfepay.scancode.service.channel.ChannelRoleUserService;
import com.hfepay.scancode.service.channel.DataNodeService;
import com.hfepay.scancode.service.commons.ScanCodeConstants;
import com.hfepay.scancode.service.contants.ConfigPreCode;
import com.hfepay.scancode.service.operator.AgentBaseService;
import com.hfepay.scancode.service.operator.ChannelBaseService;
import com.hfepay.scancode.service.operator.ChannelExpandService;
import com.hfepay.scancode.service.operator.IdCreateService;
import com.hfepay.scancode.service.operator.MerchantInfoService;
import com.hfepay.scancode.service.operator.PlatformQrcodeService;
import com.hfepay.scancode.service.operator.UserSmsService;
import com.hfepay.scancode.service.operator.impl.MerchantQrcodeServiceImpl;
import com.hfepay.scancode.service.utils.PasswordHelper;
import com.hfepay.scancode.service.utils.StringUtils;

/**
 * 账号管理类
* @author ssd
* @date 2015-4-30 下午4:21:17
 */
@Service
public class ChannelAdminServiceImpl implements ChannelAdminService{
	public static final Logger logger = LoggerFactory.getLogger(MerchantQrcodeServiceImpl.class);
	@Autowired
    private ChannelAdminDAO channelAdminDAO;
	
	@Autowired
	private ChannelRoleUserService channelRoleUserService;
	
	@Autowired
	private UserSmsService userSmsService;
	
	@Autowired
	private RedisSharedCache redisSharedCache;
	
	@Autowired
	private MerchantInfoService merchantInfoService;
	
	@Autowired
	private PlatformQrcodeService platformQrcodeService;
	
	@Autowired
	private DataNodeService dataNodeService;
	
	@Autowired
	private IdCreateService idCreateService;
	@Autowired
	private ChannelExpandService channelExpandService;
	@Autowired
	private AgentBaseService agentBaseService;
	@Autowired
	private ChannelBaseService channelBaseService;
    /**
     * 根据用户名查找用户
     * @param username
     * @return
     * @throws Exception 
     */
    public ChannelAdmin findByUsername(String username,String channelCode) {
		try {
			CriteriaBuilder cb = Cnd.builder(ChannelAdmin.class);
			cb.andEQ("userName", username);
			if(Strings.isNotEmpty(channelCode)){
				cb.andEQ("channelCode", channelCode);
			}
			Criteria buildCriteria = cb.buildCriteria();
			ChannelAdmin info = channelAdminDAO.findOneByCriteria(buildCriteria);
			//ChannelAdmin info = adminMapper.findByUsername(username);
			return info;
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("findByUsername error。。。"+e);
		}
		return null;
    }
    
    /**
     * 根据渠道编号查询渠道信息
     * @param channelNo
     * @return
     * @throws Exception 
     */
    public ChannelBase findByChannelBaseChannelNo(String channelNo) {
		try {
			return channelBaseService.findByChannelNo(channelNo);
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("findByUsername error。。。"+e);
		}
		return null;
    }
    
    /**
     * 根据代理商编号查询代理商信息
     * @param channelNo
     * @return
     * @throws Exception 
     */
    public AgentBase findByAgentBaseAgentNo(String agentNo) {
		try {
			AgentBaseCondition agentBaseCondition = new AgentBaseCondition();
			agentBaseCondition.setAgentNo(agentNo);
			return agentBaseService.findAll(agentBaseCondition).get(0);
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("findByUsername error。。。"+e);
		}
		return null;
    }
    
    /**
     * 根据商户编号查询商户信息
     * @param merchantNo
     * @return
     * @throws Exception 
     */
    public MerchantInfo findByMerchantInfoMerchantNo(String merchantNo) {
		try {
			return merchantInfoService.findByMerchantNo(merchantNo);
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("findByUsername error。。。"+e);
		}
		return null;
    }
    
    /**
	 * 列表(分页)
	 * @param SysAdminCondition 
	 * @param roleLevel  角色类型
	 *
	 * @author panq
	 * @date CreateDate : 2016-06-02 15:35:32
	 */
    @Override
	public PagingResult<ChannelAdmin> findPagingResult(ChannelAdminCondition SysAdminCondition,String roleLevel){
		CriteriaBuilder cb = Cnd.builder(ChannelAdmin.class);
		if(!Strings.isEmpty(SysAdminCondition.getId())){
			cb.andEQ("id", SysAdminCondition.getId());
		}
		if(!Strings.isEmpty(SysAdminCondition.getUserName())){
			cb.andLike("userName", SysAdminCondition.getUserName());
		}else{
			cb.andIsNotNull("userName");
		}
		if(!Strings.isEmpty(SysAdminCondition.getPassword())){
			cb.andEQ("password", SysAdminCondition.getPassword());
		}
		if(!Strings.isEmpty(SysAdminCondition.getSalt())){
			cb.andEQ("salt", SysAdminCondition.getSalt());
		}
		if(!Strings.isEmpty(SysAdminCondition.getEmail())){
			cb.andEQ("email", SysAdminCondition.getEmail());
		}
		if(!Strings.isEmpty(SysAdminCondition.getPhone())){
			cb.andLike("phone", SysAdminCondition.getPhone());
		}
		if(!Strings.isEmpty(SysAdminCondition.getShortName())){
			cb.andLike("shortName", SysAdminCondition.getShortName());
		}
		if(!Strings.isEmpty(SysAdminCondition.getOpenId())){
			cb.andEQ("openId", SysAdminCondition.getOpenId());
		}
		if(!Strings.isEmpty(SysAdminCondition.getIdentityFlag())){
			cb.andEQ("identityFlag", SysAdminCondition.getIdentityFlag());
		}
		if(!Strings.isEmpty(SysAdminCondition.getIdentityNo())){
			cb.andEQ("identityNo", SysAdminCondition.getIdentityNo());
		}
		if(!Strings.isEmpty(SysAdminCondition.getChannelCode())){
			cb.andEQ("channelCode", SysAdminCondition.getChannelCode());
		}
		if(!Strings.isEmpty(SysAdminCondition.getAgentNo())){
			cb.andEQ("agentNo", SysAdminCondition.getAgentNo());
		}
		if(!Strings.isEmpty(SysAdminCondition.getMerchantNo())){
			cb.andEQ("merchantNo", SysAdminCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(roleLevel)){			
			cb.andGroup(Cnd.builder(ChannelRole.class).andEQ("roleLevel2", roleLevel));
		}
		if(null != SysAdminCondition.getStatus()){
			cb.andEQ("status", SysAdminCondition.getStatus());
		}
		if(null != SysAdminCondition.getCreateTime()){
			cb.andEQ("createTime", SysAdminCondition.getCreateTime());
		}
		if(SysAdminCondition.getChannelAdmin() != null){
			ChannelAdmin admin = SysAdminCondition.getChannelAdmin();
			channelFilter(cb, admin);
		}
		cb.orderBy("createTime", Order.DESC);
		//排序
		if(!Strings.isEmpty(SysAdminCondition.getOrderBy())){
			if(SysAdminCondition.getOrderBy().indexOf(",")>0){
				String[] orderBys = SysAdminCondition.getOrderBy().split(",");
				String[] orders = SysAdminCondition.getOrder().split(",");
				for(int i=0; i<orderBys.length && i<orders.length; i++){
					cb.orderBy(orderBys[i], Order.valueOf(orders[i]));
				}
			}else{
				cb.orderBy(SysAdminCondition.getOrderBy(), Order.valueOf(SysAdminCondition.getOrder()));
			}
		}
		Criteria buildCriteria = cb.buildCriteria();
		buildCriteria.limit(Long.valueOf(SysAdminCondition.getFirst()), Long.valueOf(SysAdminCondition.getLast()));
		return channelAdminDAO.findPagingResult(buildCriteria);
	}
	
    private void channelFilter(CriteriaBuilder cb, ChannelAdmin admin) {
		switch (admin.getIdentityFlag()) {
		case "1":
			cb.addParam("type", admin.getIdentityFlag());
			cb.addParam("valueNo", admin.getChannelCode());
			break;
		case "2":
			cb.addParam("type", admin.getIdentityFlag());
			cb.addParam("valueNo", admin.getAgentNo());
			break;
		case "3":
			cb.andEQ("merchantNo", admin.getMerchantNo());
			break;
		default:
			break;
		}
	}
    
	/**
	 * 列表
	 * @param ChannelAdmin 
	 *
	 * @author panq
	 * @date CreateDate : 2016-06-02 15:35:32
	 */
	@Override
	public List<ChannelAdmin> findAll(ChannelAdminCondition SysAdminCondition){
		CriteriaBuilder cb = Cnd.builder(ChannelAdmin.class);
		if(!Strings.isEmpty(SysAdminCondition.getId())){
			cb.andEQ("id", SysAdminCondition.getId());
		}
		if(!Strings.isEmpty(SysAdminCondition.getUserName())){
			cb.andEQ("userName", SysAdminCondition.getUserName());
		}
		if(!Strings.isEmpty(SysAdminCondition.getPassword())){
			cb.andEQ("password", SysAdminCondition.getPassword());
		}
		if(!Strings.isEmpty(SysAdminCondition.getSalt())){
			cb.andEQ("salt", SysAdminCondition.getSalt());
		}
		if(!Strings.isEmpty(SysAdminCondition.getMerchantNo())){
			cb.andEQ("merchantNo", SysAdminCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(SysAdminCondition.getIdentityFlag())){
			cb.andEQ("identityFlag", SysAdminCondition.getIdentityFlag());
		}
		if(!Strings.isEmpty(SysAdminCondition.getIdentityNo())){
			cb.andEQ("identityNo", SysAdminCondition.getIdentityNo());
		}
		if(null != SysAdminCondition.getStatus()){
			cb.andEQ("status", SysAdminCondition.getStatus());
		}
		if(null != SysAdminCondition.getCreateTime()){
			cb.andEQ("createTime", SysAdminCondition.getCreateTime());
		}
		if(null != SysAdminCondition.getOpenId()){
			cb.andEQ("openId", SysAdminCondition.getOpenId());
		}
		if(null != SysAdminCondition.getChannelCode()){
			cb.andEQ("channelCode", SysAdminCondition.getChannelCode());
		}
		if(SysAdminCondition.getChannelAdmin() != null){
			ChannelAdmin admin = SysAdminCondition.getChannelAdmin();
			channelFilter(cb, admin);
		}
		Criteria buildCriteria = cb.buildCriteria();
		return channelAdminDAO.findByCriteria(buildCriteria);
	}
	
	/**
	 * 主键查找
	 *
	 * @author panq
	 * @date CreateDate : 2016-06-02 15:35:32
	 */
	@Override
	public ChannelAdmin findById(String id){
		return channelAdminDAO.get(id);
	}
	
	/**
	 * 新增
	 * @param SysAdminCondition
	 *
	 * @author panq
	 * @date CreateDate : 2016-06-02 15:35:32
	 */
	@Override
	public long insert(ChannelAdminCondition SysAdminCondition){
		ChannelAdmin ChannelAdmin = new ChannelAdmin();
		BeanUtils.copyProperties(SysAdminCondition, ChannelAdmin);
		return channelAdminDAO.insert(ChannelAdmin);
	}

	/**
	 * 删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-06-02 15:35:32
	 */
	@Override
	public long deleteById(String id){
		return channelAdminDAO.deleteById(id);
	}
	
	/**
	 * 条件删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-06-02 15:35:32
	 */
	@Override
	public long deleteByCriteria(Criteria criteria){
		return channelAdminDAO.deleteByCriteria(criteria);
	}
	
	/**
	 * 行数汇总
	 *
	 * @author panq
	 * @date CreateDate : 2016-06-02 15:35:32
	 */
	@Override
	public long countByCriteria(Criteria criteria){
		return channelAdminDAO.countByCriteria(criteria);
	}
	
	/**
	 * 更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-06-02 15:35:32
	 */
	@Override
	public long update(ChannelAdminCondition SysAdminCondition){
		ChannelAdmin ChannelAdmin = new ChannelAdmin();
		BeanUtils.copyProperties(SysAdminCondition, ChannelAdmin);
		return channelAdminDAO.update(ChannelAdmin);
	}
	
	/**
	 * 条件更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-06-02 15:35:32
	 */
	@Override
	public long updateByCriteria(ChannelAdminCondition SysAdminCondition,Criteria criteria){
		ChannelAdmin ChannelAdmin = new ChannelAdmin();
		BeanUtils.copyProperties(SysAdminCondition, ChannelAdmin);
		return channelAdminDAO.updateByCriteria(ChannelAdmin,criteria);
	}
	
	/**
	 * 状态更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-06-02 15:35:32
	 */
	@Override
	public long updateStatus(String id, Integer status){
		return channelAdminDAO.updateStatus(id,status);
	}

	@Override
	@Transactional
	public long updateFix(ChannelAdminCondition SysAdminCondition, String roleId,String number) {
		int nums = 0;
		//判断是否需要更新密码
		if(!Strings.isEmpty(SysAdminCondition.getPassword())){
			PasswordHelper pa = new PasswordHelper();
			ChannelAdmin ad = new ChannelAdmin();
			ad.setPassword(SysAdminCondition.getPassword());
			ad.setUserName(SysAdminCondition.getUserName());
			pa.encryptPassword(ad);
			
			SysAdminCondition.setPassword(ad.getPassword());
			SysAdminCondition.setSalt(ad.getSalt());
		}
		//是否新增用户
		if(Strings.isEmpty(SysAdminCondition.getId())){
			//新增
			SysAdminCondition.setCreateTime(new Date());
			SysAdminCondition.setId(Strings.getUUID());
			SysAdminCondition.setChannelCode(number);
			
			SysAdminCondition.setStatus(Integer.parseInt(ScanCodeConstants.STATUS_ACTIVE));
			this.insert(SysAdminCondition);
		}else{
			this.update(SysAdminCondition);
		}
		if(Strings.isNotEmpty(roleId)){
			//判断是否需要新增用户角色对应关系或者仅更新对应关系
			ChannelRoleUser ChannelAdmin = channelRoleUserService.selectRoleUserByUserId(SysAdminCondition.getId());
			if(ChannelAdmin == null){
				ChannelRoleUser admin = new ChannelRoleUser();
				admin.setAccountId(SysAdminCondition.getId());
				admin.setCreateTime(new Date());
				admin.setId(Strings.getUUID());
				admin.setRoleId(roleId);
				channelRoleUserService.insert(admin);
			}else{
				ChannelAdmin.setRoleId(roleId);
				channelRoleUserService.update(ChannelAdmin);
			}
		}
		return nums;
	}



	@Override
	public boolean getDynamicVerificationVode(String phone,String merchantNo) {
		boolean sendResult = false;
		try {
			String dynamicCode = StringUtils.getRandom();
			logger.info("phone:"+phone+" 短信动态码："+dynamicCode);
			
			String sentMsg = "您的验证码是："+dynamicCode+"。请不要把验证码泄露给其他人。如非本人操作，可不用理会！";
//			sendResult = smsService.sendSms(sentMsg, phone);
			sendResult = userSmsService.sendSms(sentMsg, phone, merchantNo);
			logger.info("phone:"+phone+" 短信发送："+sendResult);
			
			if (sendResult) {
				//将验证码保存至redis中
				redisSharedCache.set(new RedisKey(ScanCodeConstants.REDIS_KEY_MODULE, phone), dynamicCode, 1800);
				
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("getDynamicVerificationVode error。。。"+e);
		}
		return sendResult;
	}



	@Override
	public boolean validateRedisValidateCode(String key, String value) {
		logger.info("*******校验验证码,key:"+key+",value:"+value+"*******");
		
		if(Strings.isBlank(value)){
			return false;
		}
		String validateCode;
		try {
			validateCode = redisSharedCache.get(new RedisKey(ScanCodeConstants.REDIS_KEY_MODULE, key));
			logger.info("*******校验验证码,redisValue:"+validateCode+"*******");
			if(validateCode == null || !validateCode.equals(value)){
				return false;
			}
			//校验成功则清楚缓存中的验证码
			redisSharedCache.del(new RedisKey(ScanCodeConstants.REDIS_KEY_MODULE, key));
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("validateRedisValidateCode error。。。"+e);
			return false;
		}
		return true;
	}

	@Override
	public ChannelAdmin findByPhone(String phone,String channelCode) {
		CriteriaBuilder cb = Cnd.builder(ChannelAdmin.class);
		cb.andEQ("phone", phone);
		cb.andEQ("channelCode", channelCode);
		Criteria buildCriteria = cb.buildCriteria();
		return channelAdminDAO.findOneByCriteria(buildCriteria);
	}


	/**
	 * 
	 * @Title: doRegister
	 * @Description: TODO
	 * @param user
	 * @see com.hfepay.scancode.service.channel.ChannelAdminService#doRegister(com.hfepay.scancode.condition.ChannelAdminCondition)
	 */
	@Override
	public void doRegister(ChannelAdminCondition user) {
		//商户保存
		MerchantInfoCondition merchantInfoCondition = new MerchantInfoCondition();
		
		ChannelExpandCondition channelExpandCondition = new ChannelExpandCondition();
		channelExpandCondition.setChannelNo(user.getChannelCode());
		ChannelExpand channelInfo = channelExpandService.findAll(channelExpandCondition).get(0);
		String merchantNo = idCreateService.createParamNo(channelInfo.getChannelPreCode() + ConfigPreCode.MERCHANT_PRE_CODE);
		logger.info("----------merchantNo====-----"+merchantNo);
		merchantInfoCondition.setMerchantNo(merchantNo);
		merchantInfoCondition.setChannelNo(user.getChannelCode());
		merchantInfoCondition.setChannelName(ScanCodeConstants.DEFAULT_CHANNELNAME);
		//merchantInfoCondition.setAgentName(ScanCodeConstants.DEFAULT_AGENTNAME);
		merchantInfoCondition.setAgentNo(user.getAgentNo());
		merchantInfoCondition.setId(Strings.getUUID());
		merchantInfoCondition.setCreateTime(new Date());
		merchantInfoService.insert(merchantInfoCondition);
		user.setUserName(user.getPhone());
		user.setIdentityFlag(IdentityType.Identity_Merchant.value());
		user.setMerchantNo(merchantNo);//需要生成商户之后传递过来
		user.setAgentNo(ScanCodeConstants.DEFAULE_AGENTNO);
		user.setCreateTime(new Date());
		updateFix(user, ScanCodeConstants.DEFAULE_ROLE,user.getChannelCode());
		
		//节点级联关系
		DataNodeCondition dCondition = new DataNodeCondition();
		dCondition.setIdentityFlag(IdentityType.Identity_Merchant.value());//1渠道2代理商3商户：必需参数
		dCondition.setId(Strings.getUUID());
		dCondition.setParentNode(ScanCodeConstants.DEFAULE_AGENTNO);
		dCondition.setCurrentNode(merchantNo);//当前节点id//必须参数
		//dCondition.setCurrentNodeLevel("0");//当前节点级别：渠道是0级别
		dCondition.setOperator(merchantNo);//操作人
		dataNodeService.doSaveNodeRelations(dCondition);
	}
	
	/**
	 * @Title: updatePassword
	 * @Description: 重置密码
	 * @param channelAdminCondition
	 * @return
	 * @see com.hfepay.scancode.service.channel.ChannelAdminService#updatePassword(com.hfepay.scancode.condition.ChannelAdminCondition)
	 */
	@Override
	public long updatePassword(ChannelAdminCondition channelAdminCondition) {
		long result = -1;
		PasswordHelper pa = new PasswordHelper();
		ChannelAdmin ad = new ChannelAdmin();
		ad.setPassword(channelAdminCondition.getPassword());
		ad.setUserName(channelAdminCondition.getUserName());
		pa.encryptPassword(ad);
		
		channelAdminCondition.setPassword(ad.getPassword());
		channelAdminCondition.setSalt(ad.getSalt());
		
		result = this.update(channelAdminCondition);
		return result;
	}
	
	@Override
	public ChannelAdmin findByCondition(ChannelAdminCondition SysAdminCondition) {
		CriteriaBuilder cb = Cnd.builder(ChannelAdmin.class);
		if(!Strings.isEmpty(SysAdminCondition.getId())){
			cb.andEQ("id", SysAdminCondition.getId());
		}
		if(!Strings.isEmpty(SysAdminCondition.getUserName())){
			cb.andLike("userName", SysAdminCondition.getUserName());
		}
		if(!Strings.isEmpty(SysAdminCondition.getPassword())){
			cb.andEQ("password", SysAdminCondition.getPassword());
		}
		if(!Strings.isEmpty(SysAdminCondition.getSalt())){
			cb.andEQ("salt", SysAdminCondition.getSalt());
		}
		if(!Strings.isEmpty(SysAdminCondition.getEmail())){
			cb.andEQ("email", SysAdminCondition.getEmail());
		}
		if(!Strings.isEmpty(SysAdminCondition.getPhone())){
			cb.andLike("phone", SysAdminCondition.getPhone());
		}
		if(!Strings.isEmpty(SysAdminCondition.getShortName())){
			cb.andEQ("shortName", SysAdminCondition.getShortName());
		}
		if(!Strings.isEmpty(SysAdminCondition.getOpenId())){
			cb.andEQ("openId", SysAdminCondition.getOpenId());
		}
		if(!Strings.isEmpty(SysAdminCondition.getChannelCode())){
			cb.andEQ("channelCode", SysAdminCondition.getChannelCode());
		}
		if(null != SysAdminCondition.getStatus()){
			cb.andEQ("status", SysAdminCondition.getStatus());
		}
		if(null != SysAdminCondition.getCreateTime()){
			cb.andEQ("createTime", SysAdminCondition.getCreateTime());
		}
		
		Criteria buildCriteria = cb.buildCriteria();
		return channelAdminDAO.findOneByCriteria(buildCriteria);
	}
	
	@Override
	public long createMerchantByQrCode(String qrCode, String openId) {
		PlatformQrcode code = platformQrcodeService.findByQrcode(qrCode);
		
		ChannelExpandCondition channelExpandCondition = new ChannelExpandCondition();
		channelExpandCondition.setChannelNo(code.getChannelNo());
		ChannelExpand channelInfo = channelExpandService.findAll(channelExpandCondition).get(0);
		String merchantNo = idCreateService.createParamNo(channelInfo.getChannelPreCode() + ConfigPreCode.MERCHANT_PRE_CODE);
		logger.info("----------merchantNo====-----"+merchantNo);
		//1.登录账号创建
		//String merchantNo = StringUtils.getMerchantNo(code.getChannelNo());
		logger.info("in createMerchantByQrCode start........................openId="+openId);
		//新增
		ChannelAdminCondition conditon = new ChannelAdminCondition();
		conditon.setIdentityFlag(IdentityType.Identity_Merchant.value());
		conditon.setMerchantNo(merchantNo);//需要生成商户之后传递过来
		conditon.setAgentNo(code.getAgentNo());
		conditon.setCreateTime(new Date());
		conditon.setId(Strings.getUUID());
		conditon.setChannelCode(code.getChannelNo());
		conditon.setStatus(Integer.parseInt(ScanCodeConstants.STATUS_ACTIVE));
		conditon.setIdentityNo(merchantNo);
		conditon.setOpenId(openId);
		long result = this.insert(conditon);
		if(result>0){
			//2商户创建
			MerchantInfoCondition merchantInfoCondition = new MerchantInfoCondition();
			merchantInfoCondition.setMerchantNo(merchantNo);
			merchantInfoCondition.setChannelNo(code.getChannelNo());
			merchantInfoCondition.setQrCode(qrCode);
			//merchantInfoCondition.setMerchantName(ScanCodeConstants.DEFAULT_CHANNELNAME);
			//merchantInfoCondition.setAgentName(ScanCodeConstants.DEFAULT_AGENTNAME);
			merchantInfoCondition.setAgentNo(code.getAgentNo());
			merchantInfoCondition.setStatus("6");//初始状态
			merchantInfoCondition.setId(Strings.getUUID());
			merchantInfoCondition.setCreateTime(new Date());
			merchantInfoCondition.setAuthenStatus(0);
			result = merchantInfoService.insert(merchantInfoCondition);
		}
		//3.修改二维码状态为已使用
		if(result>0){
			code.setUseStatus(UseStatus.USED.value());
			code.setMerchantNo(merchantNo);
			code.setUpdateTime(new Date());
			result = platformQrcodeService.update(code);
		}
		//修改二维码数目，
		if(result>0){
			result = agentBaseService.updateUsedTimes(code.getAgentNo());
		}
		//节点级联关系
		DataNodeCondition dCondition = new DataNodeCondition();
		dCondition.setIdentityFlag(IdentityType.Identity_Merchant.value());//1渠道2代理商3商户：必需参数
		dCondition.setId(Strings.getUUID());
		dCondition.setParentNode(code.getAgentNo());
		dCondition.setCurrentNode(merchantNo);//当前节点id//必须参数
		//dCondition.setCurrentNodeLevel("0");//当前节点级别：渠道是0级别
		dCondition.setOperator(merchantNo);//操作人
		dataNodeService.doSaveNodeRelations(dCondition);
				
		if(result<=0){
			throw new RuntimeException("扫码注册商户失败");
		}
		return result;
	}
	
	/**
	 * @Title: findByChannelNo
	 * @Description: 渠道编码查找
	 * @param channelNo
	 * @return: ChannelAdmin
	 */
	public ChannelAdmin findByChannelNo(String channelNo){
		ChannelAdminCondition channelAdminCondition = new ChannelAdminCondition();
		channelAdminCondition.setChannelCode(channelNo);	
		List<ChannelAdmin> list = this.findAll(channelAdminCondition);
		if(null!=list&&list.size() > 0){
			ChannelAdmin entity = list.get(0);
			return entity;
		}
		return null;
	}



	@Override
	public ChannelAdmin findByMerchantNo(String merchantNo) {
		ChannelAdminCondition channelAdminCondition = new ChannelAdminCondition();
		channelAdminCondition.setMerchantNo(merchantNo);	
		List<ChannelAdmin> list = this.findAll(channelAdminCondition);
		if(null!=list&&list.size() == 1){
			ChannelAdmin entity = list.get(0);
			return entity;
		}
		return null;
	}
	
	@Override
	public ChannelAdmin findByMerchantNoByIdentity(String merchantNo) {
		return channelAdminDAO.findByMerchantNoByIdentity(merchantNo, ScanCodeConstants.IDENTITYFLAG_MERCHANT);
	}
	
	/**
	 * 列表(分页)
	 * @param SysAdminCondition 
	 * @param channelCode  角色类型
	 *
	 * @author panq
	 * @date CreateDate : 2016-06-02 15:35:32
	 */
    @Override
	public PagingResult<ChannelAdmin> findPagingResultByAgentNo(ChannelAdminCondition SysAdminCondition,List<String> list){
		CriteriaBuilder cb = Cnd.builder(ChannelAdmin.class);
		if(!Strings.isEmpty(SysAdminCondition.getId())){
			cb.andEQ("id", SysAdminCondition.getId());
		}
		if(list != null && list.size() > 0){
			cb.andIn("agentNo", list);
		}
		if(!Strings.isEmpty(SysAdminCondition.getAgentNo())){
			cb.andEQ("agentNo", SysAdminCondition.getAgentNo());
		}
		if(!Strings.isEmpty(SysAdminCondition.getUserName())){
			cb.andLike("userName", SysAdminCondition.getUserName());
		}
		if(!Strings.isEmpty(SysAdminCondition.getPassword())){
			cb.andEQ("password", SysAdminCondition.getPassword());
		}
		if(!Strings.isEmpty(SysAdminCondition.getSalt())){
			cb.andEQ("salt", SysAdminCondition.getSalt());
		}
		if(!Strings.isEmpty(SysAdminCondition.getEmail())){
			cb.andEQ("email", SysAdminCondition.getEmail());
		}
		if(!Strings.isEmpty(SysAdminCondition.getPhone())){
			cb.andLike("phone", SysAdminCondition.getPhone());
		}
		if(!Strings.isEmpty(SysAdminCondition.getShortName())){
			cb.andLike("shortName", SysAdminCondition.getShortName());
		}
		if(!Strings.isEmpty(SysAdminCondition.getOpenId())){
			cb.andEQ("openId", SysAdminCondition.getOpenId());
		}
		if(!Strings.isEmpty(SysAdminCondition.getIdentityFlag())){
			cb.andEQ("identityFlag", SysAdminCondition.getIdentityFlag());
		}
		if(!Strings.isEmpty(SysAdminCondition.getIdentityNo())){
			cb.andEQ("identityNo", SysAdminCondition.getIdentityNo());
		}
		if(!Strings.isEmpty(SysAdminCondition.getChannelCode())){
			cb.andEQ("channelCode", SysAdminCondition.getChannelCode());
		}
		if(null != SysAdminCondition.getStatus()){
			cb.andEQ("status", SysAdminCondition.getStatus());
		}
		if(null != SysAdminCondition.getCreateTime()){
			cb.andEQ("createTime", SysAdminCondition.getCreateTime());
		}
		if(SysAdminCondition.getChannelAdmin() != null){
			ChannelAdmin admin = SysAdminCondition.getChannelAdmin();
			channelFilter(cb, admin);
		}
		cb.orderBy("createTime", Order.DESC);
		//排序
		if(!Strings.isEmpty(SysAdminCondition.getOrderBy())){
			if(SysAdminCondition.getOrderBy().indexOf(",")>0){
				String[] orderBys = SysAdminCondition.getOrderBy().split(",");
				String[] orders = SysAdminCondition.getOrder().split(",");
				for(int i=0; i<orderBys.length && i<orders.length; i++){
					cb.orderBy(orderBys[i], Order.valueOf(orders[i]));
				}
			}else{
				cb.orderBy(SysAdminCondition.getOrderBy(), Order.valueOf(SysAdminCondition.getOrder()));
			}
		}
		Criteria buildCriteria = cb.buildCriteria();
		buildCriteria.limit(Long.valueOf(SysAdminCondition.getFirst()), Long.valueOf(SysAdminCondition.getLast()));
		return channelAdminDAO.findPagingResult(buildCriteria);
	}
	
}
