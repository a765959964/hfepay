/*
 * Powered By [华付通]
 * Web Site: http://www.huaepay.com/
 * Since 2016 - 2016
 */package com.hfepay.scancode.service.order.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.hfepay.commons.criteria.Criteria;
import com.hfepay.commons.base.lang.Dates;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.commons.criteria.Cnd;
import com.hfepay.commons.criteria.CriteriaBuilder;
import com.hfepay.commons.criteria.Order;
import com.hfepay.commons.utils.PagingResult;

import com.hfepay.scancode.dao.OrderPaymentDAO;
import com.hfepay.scancode.entity.OrderPayment;
import com.hfepay.scancode.enumeration.IndexType;
import com.hfepay.scancode.service.order.OrderPaymentService;
import com.hfepay.scancode.service.utils.OrderIDUtils;
import com.hfepay.scancode.condition.OrderPaymentCondition;

@Service("orderPaymentService")
public class OrderPaymentServiceImpl implements OrderPaymentService {
	
	@Autowired
    private OrderPaymentDAO orderPaymentDAO;
	
	@Autowired
	private OrderIDUtils orderUtils;
    
    /**
	 * 列表(分页)
	 * @param orderPaymentCondition 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 11:37:55
	 */
    @Override
	public PagingResult<OrderPayment> findPagingResult(OrderPaymentCondition orderPaymentCondition){
		CriteriaBuilder cb = Cnd.builder(OrderPayment.class);
		if(!Strings.isEmpty(orderPaymentCondition.getId())){
			cb.andEQ("id", orderPaymentCondition.getId());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getTradeNo())){
			cb.andEQ("tradeNo", orderPaymentCondition.getTradeNo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getChannelNo())){
			cb.andEQ("channelNo", orderPaymentCondition.getChannelNo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getAgentNo())){
			cb.andEQ("agentNo", orderPaymentCondition.getAgentNo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getMerchantNo())){
			cb.andEQ("merchantNo", orderPaymentCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getQrCode())){
			cb.andEQ("qrCode", orderPaymentCondition.getQrCode());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getPayCode())){
			cb.andEQ("payCode", orderPaymentCondition.getPayCode());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getBusinessType())){
			cb.andEQ("businessType", orderPaymentCondition.getBusinessType());
		}
		if(null != orderPaymentCondition.getOrderAmt()){
			cb.andEQ("orderAmt", orderPaymentCondition.getOrderAmt());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getProductName())){
			cb.andEQ("productName", orderPaymentCondition.getProductName());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getProductDesc())){
			cb.andEQ("productDesc", orderPaymentCondition.getProductDesc());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getBuyerId())){
			cb.andEQ("buyerId", orderPaymentCondition.getBuyerId());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getBuyerAccount())){
			cb.andEQ("buyerAccount", orderPaymentCondition.getBuyerAccount());
		}
		if(null != orderPaymentCondition.getTotalAmount()){
			cb.andEQ("totalAmount", orderPaymentCondition.getTotalAmount());
		}
		if(null != orderPaymentCondition.getBuyerPayAmount()){
			cb.andEQ("buyerPayAmount", orderPaymentCondition.getBuyerPayAmount());
		}
		if(null != orderPaymentCondition.getPointAmount()){
			cb.andEQ("pointAmount", orderPaymentCondition.getPointAmount());
		}
		if(null != orderPaymentCondition.getMerchantRate()){
			cb.andEQ("merchantRate", orderPaymentCondition.getMerchantRate());
		}
		if(null != orderPaymentCondition.getChannelRate()){
			cb.andEQ("channelRate", orderPaymentCondition.getChannelRate());
		}
		if(null != orderPaymentCondition.getPayRate()){
			cb.andEQ("payRate", orderPaymentCondition.getPayRate());
		}
		if(null != orderPaymentCondition.getAgentRate()){
			cb.andEQ("agentRate", orderPaymentCondition.getAgentRate());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getFeeStatus())){
			cb.andEQ("feeStatus", orderPaymentCondition.getFeeStatus());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getFeeType())){
			cb.andEQ("feeType", orderPaymentCondition.getFeeType());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getPaymentInfo())){
			cb.andEQ("paymentInfo", orderPaymentCondition.getPaymentInfo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getBatchId())){
			cb.andEQ("batchId", orderPaymentCondition.getBatchId());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getResultCode())){
			cb.andEQ("resultCode", orderPaymentCondition.getResultCode());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getResultInfo())){
			cb.andEQ("resultInfo", orderPaymentCondition.getResultInfo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getPayTradeNo())){
			cb.andEQ("payTradeNo", orderPaymentCondition.getPayTradeNo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getPaymentType())){
			cb.andEQ("paymentType", orderPaymentCondition.getPaymentType());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getNotifyUrl())){
			cb.andEQ("notifyUrl", orderPaymentCondition.getNotifyUrl());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getReturnUrl())){
			cb.andEQ("returnUrl", orderPaymentCondition.getReturnUrl());
		} 
		if(!Strings.isEmpty(orderPaymentCondition.getBeginTime())){
			cb.andGE("beginTime", orderPaymentCondition.getBeginTime());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getEndTime())){
			cb.andLE("endTime", orderPaymentCondition.getEndTime());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getSettleTime())){
			cb.andEQ("settleTime", orderPaymentCondition.getSettleTime());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getSettleMerchant())){
			cb.andEQ("settleMerchant", orderPaymentCondition.getSettleMerchant());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getRefundStatus())){
			cb.andEQ("refundStatus", orderPaymentCondition.getRefundStatus());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getOrderStatus())){
			cb.andEQ("orderStatus", orderPaymentCondition.getOrderStatus());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getOptCode())){
			cb.andEQ("optCode", orderPaymentCondition.getOptCode());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getRecordStatus())){
			cb.andEQ("recordStatus", orderPaymentCondition.getRecordStatus());
		}

		if(!Strings.isEmpty(orderPaymentCondition.getOperator())){
			cb.andEQ("operator", orderPaymentCondition.getOperator());
		}

		if(!Strings.isEmpty(orderPaymentCondition.getRemark())){
			cb.andLike("remark", orderPaymentCondition.getRemark());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getTemp1())){
			cb.andEQ("temp1", orderPaymentCondition.getTemp1());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getTemp2())){
			cb.andEQ("temp2", orderPaymentCondition.getTemp2());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getTemp3())){
			cb.andEQ("temp3", orderPaymentCondition.getTemp3());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getTemp4())){
			cb.andEQ("temp4", orderPaymentCondition.getTemp4());
		}
		
		//排序
		if(!Strings.isEmpty(orderPaymentCondition.getOrderBy())){
			if(orderPaymentCondition.getOrderBy().indexOf(",")>0){
				String[] orderBys = orderPaymentCondition.getOrderBy().split(",");
				String[] orders = orderPaymentCondition.getOrder().split(",");
				for(int i=0; i<orderBys.length && i<orders.length; i++){
					cb.orderBy(orderBys[i], Order.valueOf(orders[i]));
				}
			}else{
				cb.orderBy(orderPaymentCondition.getOrderBy(), Order.valueOf(orderPaymentCondition.getOrder()));
			}
		}
		Criteria buildCriteria = cb.buildCriteria();
		buildCriteria.limit(Long.valueOf(orderPaymentCondition.getFirst()), Long.valueOf(orderPaymentCondition.getLast()));
		return orderPaymentDAO.findPagingResult(buildCriteria);
	}
	
	/**
	 * 列表
	 * @param orderPayment 
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 11:37:55
	 */
	@Override
	public List<OrderPayment> findAll(OrderPaymentCondition orderPaymentCondition){
		CriteriaBuilder cb = Cnd.builder(OrderPayment.class);
		if(!Strings.isEmpty(orderPaymentCondition.getId())){
			cb.andEQ("id", orderPaymentCondition.getId());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getTradeNo())){
			cb.andEQ("tradeNo", orderPaymentCondition.getTradeNo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getChannelNo())){
			cb.andEQ("channelNo", orderPaymentCondition.getChannelNo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getAgentNo())){
			cb.andEQ("agentNo", orderPaymentCondition.getAgentNo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getMerchantNo())){
			cb.andEQ("merchantNo", orderPaymentCondition.getMerchantNo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getQrCode())){
			cb.andEQ("qrCode", orderPaymentCondition.getQrCode());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getPayCode())){
			cb.andEQ("payCode", orderPaymentCondition.getPayCode());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getBusinessType())){
			cb.andEQ("businessType", orderPaymentCondition.getBusinessType());
		}
		if(null != orderPaymentCondition.getOrderAmt()){
			cb.andEQ("orderAmt", orderPaymentCondition.getOrderAmt());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getProductName())){
			cb.andEQ("productName", orderPaymentCondition.getProductName());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getProductDesc())){
			cb.andEQ("productDesc", orderPaymentCondition.getProductDesc());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getBuyerId())){
			cb.andEQ("buyerId", orderPaymentCondition.getBuyerId());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getBuyerAccount())){
			cb.andEQ("buyerAccount", orderPaymentCondition.getBuyerAccount());
		}
		if(null != orderPaymentCondition.getTotalAmount()){
			cb.andEQ("totalAmount", orderPaymentCondition.getTotalAmount());
		}
		if(null != orderPaymentCondition.getBuyerPayAmount()){
			cb.andEQ("buyerPayAmount", orderPaymentCondition.getBuyerPayAmount());
		}
		if(null != orderPaymentCondition.getPointAmount()){
			cb.andEQ("pointAmount", orderPaymentCondition.getPointAmount());
		}
		if(null != orderPaymentCondition.getMerchantRate()){
			cb.andEQ("merchantRate", orderPaymentCondition.getMerchantRate());
		}
		if(null != orderPaymentCondition.getChannelRate()){
			cb.andEQ("channelRate", orderPaymentCondition.getChannelRate());
		}
		if(null != orderPaymentCondition.getPayRate()){
			cb.andEQ("payRate", orderPaymentCondition.getPayRate());
		}
		if(null != orderPaymentCondition.getAgentRate()){
			cb.andEQ("agentRate", orderPaymentCondition.getAgentRate());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getFeeStatus())){
			cb.andEQ("feeStatus", orderPaymentCondition.getFeeStatus());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getFeeType())){
			cb.andEQ("feeType", orderPaymentCondition.getFeeType());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getPaymentInfo())){
			cb.andEQ("paymentInfo", orderPaymentCondition.getPaymentInfo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getBatchId())){
			cb.andEQ("batchId", orderPaymentCondition.getBatchId());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getResultCode())){
			cb.andEQ("resultCode", orderPaymentCondition.getResultCode());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getResultInfo())){
			cb.andEQ("resultInfo", orderPaymentCondition.getResultInfo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getPayTradeNo())){
			cb.andEQ("payTradeNo", orderPaymentCondition.getPayTradeNo());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getPaymentType())){
			cb.andEQ("paymentType", orderPaymentCondition.getPaymentType());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getNotifyUrl())){
			cb.andEQ("notifyUrl", orderPaymentCondition.getNotifyUrl());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getReturnUrl())){
			cb.andEQ("returnUrl", orderPaymentCondition.getReturnUrl());
		}
		if(null != orderPaymentCondition.getBeginTime()){
			cb.andEQ("beginTime", orderPaymentCondition.getBeginTime());
		}
		if(null != orderPaymentCondition.getEndTime()){
			cb.andEQ("endTime", orderPaymentCondition.getEndTime());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getSettleTime())){
			cb.andEQ("settleTime", orderPaymentCondition.getSettleTime());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getSettleMerchant())){
			cb.andEQ("settleMerchant", orderPaymentCondition.getSettleMerchant());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getRefundStatus())){
			cb.andEQ("refundStatus", orderPaymentCondition.getRefundStatus());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getOrderStatus())){
			cb.andEQ("orderStatus", orderPaymentCondition.getOrderStatus());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getOptCode())){
			cb.andEQ("optCode", orderPaymentCondition.getOptCode());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getRecordStatus())){
			cb.andEQ("recordStatus", orderPaymentCondition.getRecordStatus());
		}

		if(!Strings.isEmpty(orderPaymentCondition.getOperator())){
			cb.andEQ("operator", orderPaymentCondition.getOperator());
		}

		if(!Strings.isEmpty(orderPaymentCondition.getRemark())){
			cb.andLike("remark", orderPaymentCondition.getRemark());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getTemp1())){
			cb.andEQ("temp1", orderPaymentCondition.getTemp1());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getTemp2())){
			cb.andEQ("temp2", orderPaymentCondition.getTemp2());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getTemp3())){
			cb.andEQ("temp3", orderPaymentCondition.getTemp3());
		}
		if(!Strings.isEmpty(orderPaymentCondition.getTemp4())){
			cb.andEQ("temp4", orderPaymentCondition.getTemp4());
		}
		Criteria buildCriteria = cb.buildCriteria();
		return orderPaymentDAO.findByCriteria(buildCriteria);
	}
	
	/**
	 * 主键查找
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 11:37:55
	 */
	@Override
	public OrderPayment findById(String id){
		return orderPaymentDAO.get(id);
	}
	
	/**
	 * 新增
	 * @param orderPaymentCondition
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 11:37:55
	 */
	@Override
	public long insert(OrderPaymentCondition orderPaymentCondition){
		OrderPayment orderPayment = new OrderPayment();
		BeanUtils.copyProperties(orderPaymentCondition, orderPayment);
		return orderPaymentDAO.insert(orderPayment);
	}

	/**
	 * 删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 11:37:55
	 */
	@Override
	public long deleteById(String id){
		return orderPaymentDAO.deleteById(id);
	}
	
	/**
	 * 条件删除
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 11:37:55
	 */
	@Override
	public long deleteByCriteria(Criteria criteria){
		return orderPaymentDAO.deleteByCriteria(criteria);
	}
	
	/**
	 * 行数汇总
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 11:37:55
	 */
	@Override
	public long countByCriteria(Criteria criteria){
		return orderPaymentDAO.countByCriteria(criteria);
	}
	
	/**
	 * 更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 11:37:55
	 */
	@Override
	public long update(OrderPaymentCondition orderPaymentCondition){
		OrderPayment orderPayment = new OrderPayment();
		BeanUtils.copyProperties(orderPaymentCondition, orderPayment);
		return orderPaymentDAO.update(orderPayment);
	}
	
	/**
	 * 条件更新
	 *
	 * @author panq
	 * @date CreateDate : 2016-10-17 11:37:55
	 */
	@Override
	public long updateByCriteria(OrderPaymentCondition orderPaymentCondition,Criteria criteria){
		OrderPayment orderPayment = new OrderPayment();
		BeanUtils.copyProperties(orderPaymentCondition, orderPayment);
		return orderPaymentDAO.updateByCriteria(orderPayment,criteria);
	}

	//保存交易订单
	@Override
	public OrderPayment saveOrderPayment(OrderPaymentCondition orderPaymentCondition) {
		//生成交易订单编号
		orderPaymentCondition.setTradeNo(orderUtils.getOrderID(Dates.format(Dates.DF.yyyyMMdd,new Date()), IndexType.Index32.value(), "HF"));
		
		OrderPayment orderPayment = new OrderPayment();
		BeanUtils.copyProperties(orderPaymentCondition, orderPayment);
		orderPaymentDAO.insert(orderPayment);
		return orderPayment;
	}
	
}

