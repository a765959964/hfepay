package com.hfepay.scancode.api.webank.httputil;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;

import javax.net.ssl.SSLContext;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLContexts;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class HttpGetRequest {

	public String httpGet(String url,String client_cet,String trust_cet,String key_store_password,String key_store_trust_password){
		
		HttpGet httpGet = new HttpGet(url);

		System.out.println("发送地址：" + url);

		httpGet.setHeader("ssl-s-dn", "CN=107100000000003");

		KeyStore keyStore = null;
		KeyStore trustStore = null;
		try {
			keyStore = KeyStore.getInstance("PKCS12");
			trustStore = KeyStore.getInstance("JKS");
		} catch (KeyStoreException e1) {
			e1.printStackTrace();
		}

		InputStream ksIn = null;
		InputStream tsIn = null;
		try {
			ksIn = new FileInputStream(client_cet);
			tsIn = new FileInputStream(trust_cet);
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}

		try {
			keyStore.load(ksIn, key_store_password.toCharArray());
			trustStore.load(tsIn, key_store_trust_password.toCharArray());
		} catch (Exception e) {
			System.out.println("got a exception" + e.getMessage());
		} finally {
			try {
				ksIn.close();
				tsIn.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		SSLContext sslcontext = null;
		try {
			sslcontext = SSLContexts.custom().loadKeyMaterial(keyStore, key_store_password.toCharArray())
					.loadTrustMaterial(trustStore, new TrustSelfSignedStrategy()).build();
		} catch (KeyManagementException e) {
			e.printStackTrace();
		} catch (UnrecoverableKeyException e) {
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (KeyStoreException e) {
			e.printStackTrace();
		}

		SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslcontext, new String[] { "TLSv1" },
				null, SSLConnectionSocketFactory.getDefaultHostnameVerifier());

		CloseableHttpClient httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();

		HttpResponse response = null;
		try {
			response = httpclient.execute(httpGet);
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		HttpEntity entity = response.getEntity();

		String respContent = "";
		try {
			respContent = EntityUtils.toString(entity, "UTF-8").trim();
			System.out.println("服务器返回:"+respContent);
		} catch (ParseException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return respContent;
	}
}
