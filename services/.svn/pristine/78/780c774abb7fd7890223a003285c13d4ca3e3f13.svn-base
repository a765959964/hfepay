package com.hfepay.scancode.service.timer;

import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;

import com.hfepay.commons.base.lang.Dates;
import com.hfepay.commons.utils.Springs;
import com.hfepay.scancode.condition.MerchantPaywayCondition;
import com.hfepay.scancode.condition.MerchantPaywayTmpCondition;
import com.hfepay.scancode.entity.MerchantPayway;
import com.hfepay.scancode.entity.MerchantPaywayTmp;
import com.hfepay.scancode.service.operator.MerchantPaywayService;
import com.hfepay.scancode.service.operator.MerchantPaywayTmpService;

import net.sf.json.JSONSerializer;

public class MerchantPaywayJob implements Job {
	
	Logger logger = LoggerFactory.getLogger(MerchantPaywayJob.class);
	
	private static MerchantPaywayTmpService merchantPaywayTmpService = Springs.getBean("merchantPaywayTmpService");
	private static MerchantPaywayService merchantPaywayService = Springs.getBean("merchantPaywayService");

	/**
	 * 定时将当日商户费率修改后，从商户费率临时表更新到商户费率表
	 */
	@Override
	public void execute(JobExecutionContext context) throws JobExecutionException {

		logger.info("开始执行商户费率修改定时任务："+Dates.format(Dates.DF.yyyy_MM_dd_HH_mm_ss, new Date()));
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, -1);		
		String yesterday = Dates.format(Dates.DF.yyyy_MM_dd, cal.getTime());
		logger.info("更新商户费率的时间为："+yesterday);
		MerchantPaywayTmpCondition merchantPaywayTmpCondition = new MerchantPaywayTmpCondition();
		MerchantPaywayCondition merchantPaywayCondition = new MerchantPaywayCondition();
		try {
			merchantPaywayTmpCondition.setUpdateTime(Dates.parse("yyyy-MM-dd", yesterday));
			List<MerchantPaywayTmp> merchantPaywayTmps = merchantPaywayTmpService.findAll(merchantPaywayTmpCondition);
			logger.info("共更新商户费率："+merchantPaywayTmps.size() + "条");
			for (MerchantPaywayTmp merchantPaywayTmp : merchantPaywayTmps) {
				MerchantPayway merchantPayway = merchantPaywayService.findByPayCode(merchantPaywayTmp.getPayCode(), merchantPaywayTmp.getMerchantNo());
				if(merchantPayway != null){	
					merchantPaywayTmp.setId(merchantPayway.getId());
					merchantPaywayTmp.setCreateTime(null);
					BeanUtils.copyProperties(merchantPaywayTmp, merchantPaywayCondition);
					merchantPaywayService.update(merchantPaywayCondition);
					logger.info("更新商户费率成功："+JSONSerializer.toJSON(merchantPaywayCondition));
				}else{
					logger.info("更新商户费率失败："+JSONSerializer.toJSON(merchantPaywayTmp));
				}
			}
			
			logger.info("完成执行商户费率修改定时任务："+Dates.format(Dates.DF.yyyy_MM_dd_HH_mm_ss, new Date()));
		} catch (ParseException e) {
			logger.info("执行商户费率修改定时任务失败："+Dates.format(Dates.DF.yyyy_MM_dd_HH_mm_ss, new Date()));
		}
		
	}

}
