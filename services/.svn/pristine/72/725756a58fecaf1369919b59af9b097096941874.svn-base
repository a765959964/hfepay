package com.hfepay.scancode.api.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.apache.zookeeper.KeeperException.APIErrorException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.hfepay.cache.jedis.RedisKey;
import com.hfepay.cache.jedis.impl.RedisSharedCache;
import com.hfepay.commons.base.collection.Maps;
import com.hfepay.commons.base.lang.HttpRequestClient;
import com.hfepay.commons.base.lang.SnowflakeIdGenerator;
import com.hfepay.commons.base.lang.Strings;
import com.hfepay.scancode.api.common.PushMessageErrorCode;
import com.hfepay.scancode.api.condition.ApiLogCondition;
import com.hfepay.scancode.api.config.HfepayConfig;
import com.hfepay.scancode.api.entity.PlatformSecretKey;
import com.hfepay.scancode.api.entity.message.PaySuccessMessage;
import com.hfepay.scancode.api.entity.message.RegistSuccessMessage;
import com.hfepay.scancode.api.entity.vo.BankCardAuthVo;
import com.hfepay.scancode.api.entity.vo.HeaderMessage;
import com.hfepay.scancode.api.entity.vo.MerchantAccountsVo;
import com.hfepay.scancode.api.entity.vo.MerchantInfoVo;
import com.hfepay.scancode.api.entity.vo.MerchantPayInfoVo;
import com.hfepay.scancode.api.entity.vo.MerchantRateVo;
import com.hfepay.scancode.api.entity.vo.MerchantUpdateCardVo;
import com.hfepay.scancode.api.entity.vo.Message;
import com.hfepay.scancode.api.entity.vo.ParamsMessage;
import com.hfepay.scancode.api.exception.ValidatException;
import com.hfepay.scancode.api.httpClient.HttpProtocolHandler;
import com.hfepay.scancode.api.httpClient.HttpRequest;
import com.hfepay.scancode.api.httpClient.HttpResponse;
import com.hfepay.scancode.api.httpClient.HttpResultType;
import com.hfepay.scancode.api.httputil.Dates;
import com.hfepay.scancode.api.service.ApiLogService;
import com.hfepay.scancode.api.service.MerchantBusinessService;
import com.hfepay.scancode.api.service.PlatformSecretKeyService;
import com.hfepay.scancode.api.signature.EncrypterUtil;

@Service
public class MerchantBusinessServiceImpl implements MerchantBusinessService{

	Logger logger = LoggerFactory.getLogger(getClass());
	
	@Autowired
	PlatformSecretKeyService platformSecretKeyService;
	
	@Autowired
	SnowflakeIdGenerator idGenerator;
	
	@Autowired
	private RedisSharedCache redisSharedCache;
	
	@Autowired
	private ApiLogService apiLogService;
	
	/**
	 * 商户入网
	 */
	@Override
	public Map<String, String> merchantJoin(MerchantInfoVo info, MerchantAccountsVo accounts, List<MerchantRateVo> payTypes) throws Exception{
		Map<String, String> respValue = null;
		// 商户基本信息
		Map<String, Object> body = new HashMap<String, Object>();
		body.put("info", info);
		logger.error("商户基本信息："+ JSON.toJSONString(info));
		// 商户账号信息
		body.put("account", accounts);
		logger.error("商户账户信息："+JSON.toJSONString(accounts));
		// 支付通道信息
		body.put("payType", payTypes);
		logger.error("商户支付通道信息："+JSON.toJSONString(payTypes));
		Map<String, String> response = null;
		response = requestHandle(HfepayConfig.join_service_method, body,info.getMerchantNo());
		logger.error("响应报文（解密）, response="+JSON.toJSONString(response));
		//处理响应报文
		respValue = responseHandle(response);
		return respValue;
	}
	
	/**
	 * 扫码付预订单
	 */
	@SuppressWarnings("unchecked")
	@Override
	public Map<String,String> merchantOrder(MerchantPayInfoVo payInfo) throws Exception {
		Map<String, Object> body = new HashMap<String, Object>();
		//将对象转为JSON字符串
		String json = JSON.toJSONString(payInfo);
		//将json字符串转为map
		body = JSON.parseObject(json, Map.class);
		Map<String,String> response = requestHandle(HfepayConfig.trade_order, body,payInfo.getMerchantNo());
		Map<String,String> respValue = responseHandle(response);
		return respValue;
	}
	
	
	/**
	 * 微信公众号支付
	 */
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String, String> merchantWechatOfficial(MerchantPayInfoVo payInfo) throws Exception {
		Map<String, Object> body = new HashMap<String, Object>();
		//将对象转为JSON字符串
		String json = JSON.toJSONString(payInfo);
		//将json字符串转为map
		body = JSON.parseObject(json, Map.class);
		Map<String,String> response = requestHandle(HfepayConfig.trade_order_official, body,payInfo.getMerchantNo());
		Map<String,String> resValue = responseHandle(response);
		return resValue;
	}
	
	/**
	 * 银行卡四要素校验
	 */
	@Override
	public Map<String, String> bankCardAuthFour(BankCardAuthVo bankCard) throws Exception {
		logger.debug("============银行卡四要素校验==============");
		//1、组装请求报文
		JSONObject headerJson = new JSONObject();
		JSONObject conditionJson = new JSONObject();
		headerJson.put("qryBatchNo", idGenerator.generate());  //验证批次号  用户生成的唯一编号
		headerJson.put("userCode", HfepayConfig.userCode);   //商户编号，即用户编号
		headerJson.put("sysCode", HfepayConfig.sysCode); //应用编号
		//必填
		conditionJson.put("realName", bankCard.getRealName());
		conditionJson.put("idCard", bankCard.getIdCard());
		conditionJson.put("bankCard", bankCard.getBankCard());
		conditionJson.put("mobile", bankCard.getMobile());
		
		JSONObject allJson = new JSONObject();
		allJson.put("header", headerJson);
		allJson.put("condition", conditionJson);
		logger.debug(allJson.toString());
		String data = allJson.toString();
		logger.debug("请求报文："+data);
		ApiLogCondition condition = new ApiLogCondition();
		condition.setChannelNo(HfepayConfig.channelNo);
		condition.setRequestParams(data);
		/**
		 * 组装请求参数 调用实名认证接口
		 */
		//2、请求API对应的接口
		List<NameValuePair> parameters = new ArrayList<NameValuePair>();
		parameters.add(new BasicNameValuePair("condition", data));
		parameters.add(new BasicNameValuePair("userCode", HfepayConfig.userCode));
		parameters.add(new BasicNameValuePair("appKey", HfepayConfig.appKey));
		condition.setCreateTime(new Date());
		String result = HttpRequestClient.invoke_http(HfepayConfig.bank_card_auth_uri,parameters,"UTF-8");
		condition.setResponseParams(result);
		condition.setUpdateTime(new Date());
		try{
			saveApiLog(condition);
		}catch(Exception e){
			logger.error("保存日志异常："+e);
		}
		logger.debug("返回报文："+result);
		logger.debug("============银行卡四要素校验完成==============");
		JSONObject resValue = JSONObject.fromObject(result);
		Map<String, String> returnMap = Maps.newMap();
		if(resValue.get("msg")!=null){
			JSONObject msg = JSONObject.fromObject(resValue.get("msg"));
			returnMap.put("respCode", msg.getString("code"));
			returnMap.put("respDesc", msg.getString("codeDesc"));
		}else{
			JSONArray dataArray = JSONArray.fromObject(resValue.get("data"));
			JSONObject jsonObj = (JSONObject) dataArray.get(0);
			JSONArray recordArray = jsonObj.getJSONArray("record");
			JSONObject recordObj = (JSONObject)recordArray.get(0);
			String resCode = recordObj.getString("resCode");
			returnMap.put("respCode", resCode.equals("00")?"000000":resCode);
			returnMap.put("respDesc", recordObj.getString("resDesc"));
		}
		return returnMap;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String, String> merchantUpdateCard(MerchantUpdateCardVo updateCardVo) throws Exception {
		Map<String, Object> body = new HashMap<String, Object>();
		//将对象转为JSON字符串
		String json = JSON.toJSONString(updateCardVo);
		//将json字符串转为map
		body = JSON.parseObject(json, Map.class);
		Map<String,String> response = requestHandle(HfepayConfig.merchant_card_update_method, body,updateCardVo.getMerchantNo());
		Map<String,String> resValue = responseHandle(response);
		return resValue;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String, String> merchantUpdateRate(String merchantNo,
			MerchantRateVo merchantRateVo) throws Exception {
		Map<String, Object> body = new HashMap<String, Object>();
		//将对象转为JSON字符串
		String json = JSON.toJSONString(merchantRateVo);
		//将json字符串转为map
		body = JSON.parseObject(json, Map.class);
		body.put("merchantNo", merchantNo);
		Map<String,String> response = requestHandle(HfepayConfig.update_rate_service_method, body,merchantNo);
		Map<String,String> resValue = responseHandle(response);
		return resValue;
	}
	
	
	
	@Override
	public Map<String, String> merchantWallet(String merchantNo)
			throws Exception {
		Map<String, Object> body = new HashMap<String, Object>();
		body.put("merchantNo", merchantNo);
		Map<String,String> response = requestHandle(HfepayConfig.merchant_wallet_query_method, body,merchantNo);
		Map<String,String> resValue = responseHandle(response);
		return resValue;
	}
	
	/**
	 * 推送注册成功消息
	 * @throws Exception
	 */
	@Override
	public Map<String, String> pushRegistSuccess(RegistSuccessMessage message) throws Exception{
		String access_token = getAccessToken();
		String uri ="https://api.weixin.qq.com/cgi-bin/message/template/send?access_token="+access_token;
		Map<String, Object> request = Maps.newMap();
		request.put("touser", message.getTouser());
		request.put("template_id", "06BNA6sYMwgwkanKyrP0R-SpkwXaxsNABmEHaJ5lPKo");
		request.put("url", message.getUrl());
		Map<String, Object> data = Maps.newMap();
		Map<String, String> first = Maps.newMap();
		first.put("value", message.getTitle());
		first.put("color", "#173177");
		data.put("first", first);
		Map<String, String> keyword1 = Maps.newMap(); 
		keyword1.put("value", message.getCompanyType());
		keyword1.put("color", "#173177");
		data.put("keyword1", keyword1);
		Map<String, String> keyword2 = Maps.newMap();
		keyword2.put("value", message.getCompanyName());
		keyword2.put("color", "#173177");
		data.put("keyword2", keyword2);
		Map<String, String> keyword3 = Maps.newMap();
		keyword3.put("value", message.getName());
		keyword3.put("color", "#173177");
		data.put("keyword3", keyword3);
		Map<String, String> keyword4 = Maps.newMap();
		keyword4.put("value", message.getAddress());
		keyword4.put("color", "#173177");
		data.put("keyword4", keyword4);
		Map<String, String> keyword5 = Maps.newMap();
		keyword5.put("value", Dates.format("yyyy年MM月dd日 HH:mm:ss", message.getRegistTime()));
		keyword5.put("color", "#173177");
		data.put("keyword5", keyword5);
		Map<String, String> remark = Maps.newMap();
		remark.put("value", message.getRemark());
		remark.put("color", "#173177");
		data.put("remark", remark);
		request.put("data", data);
		logger.debug("推送消息内容："+JSON.toJSON(request));
		String resultJSON = buildRequestJsonPost(uri,JSON.toJSONString(request));
		JSONObject jsonObj = JSONObject.fromObject(resultJSON);
		return pushMessageResponseHandle(jsonObj);
	}
	
	/**
	 * 推送支付成功消息
	 */
	@Override
	public Map<String, String> pushPaySuccess(PaySuccessMessage message) throws Exception{
		String access_token = getAccessToken();
		String uri ="https://api.weixin.qq.com/cgi-bin/message/template/send?access_token="+access_token;
		Map<String, Object> request = Maps.newMap();
		request.put("touser", message.getTouser());
		request.put("template_id", "6AW_6iaTxQ0_iILlz67VtYPqpsV1VQXhXYrDy5WvxUE");
		request.put("url", message.getUrl());
		Map<String, Object> data = Maps.newMap();
		Map<String, String> first = Maps.newMap();
		first.put("value", message.getTitle());
		first.put("color", "#173177");
		data.put("first", first);
		Map<String, String> keyword1 = Maps.newMap(); 
		keyword1.put("value", message.getOrderName());
		keyword1.put("color", "#173177");
		data.put("keyword1", keyword1);
		Map<String, String> keyword2 = Maps.newMap();
		keyword2.put("value", message.getOrderNo());
		keyword2.put("color", "#173177");
		data.put("keyword2", keyword2);
		Map<String, String> keyword3 = Maps.newMap();
		keyword3.put("value", message.getOrderAmt());
		keyword3.put("color", "#173177");
		data.put("keyword3", keyword3);
		Map<String, String> remark = Maps.newMap();
		remark.put("value", message.getRemark());
		remark.put("color", "#173177");
		data.put("remark", remark);
		request.put("data", data);
		logger.debug("推送消息内容："+JSON.toJSON(request));
		String resultJSON = buildRequestJsonPost(uri,JSON.toJSONString(request));
		JSONObject jsonObj = JSONObject.fromObject(resultJSON);
		return pushMessageResponseHandle(jsonObj);
	}
	
	/**
	 * 获取密钥
	 * @param payCode
	 * @return
	 */
	private PlatformSecretKey getSecretKey(String payCode) throws ValidatException, Exception{
		PlatformSecretKey platformSecretKey = platformSecretKeyService.findByPayCode(payCode);
		if(platformSecretKey == null){
			throw new ValidatException("100010","密钥不存在");
		}
		return platformSecretKey;
	}
	
	/**
	 * http请求处理方法
	 * @param method 服务名称
	 * @param body 报文体
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	private Map<String,String> requestHandle(String method,Map<String, Object> body,String merchantNo) throws ValidatException, Exception {
		//日志
		ApiLogCondition condition = new ApiLogCondition();
		condition.setPayCode(method);
		condition.setRequestParams(JSON.toJSONString(body));
		condition.setChannelNo(HfepayConfig.channelNo);
		condition.setMerchantNo(merchantNo);
		//获取密钥
		PlatformSecretKey secretKey = getSecretKey(method);
		Map<String, Object> message = Maps.newMap();
		logger.debug("请求body(未加密)："+JSON.toJSONString(body));
		message.put("body", body);
		//加密报文体
		Message data = EncrypterUtil.encode(JSON.toJSONString(message),secretKey.getJoinPublicKey(), secretKey.getJoinPrivateKey());
		//添加头部信息
		HeaderMessage head = new HeaderMessage();
		head.setVersion("V1.0.0");
		head.setReqTime(Dates.format("yyyyMMddHHmmss", new Date()));
		String userReqNo = Dates.format("yyyyMMddHHmmss", new Date());
		condition.setTradeNo(userReqNo);
		head.setUserReqNo(userReqNo);
		head.setChannelNo(HfepayConfig.channelNo);//渠道编号
		head.setMethod(method);
		head.setSign(data.getSign());
		head.setEncryptKey(data.getKey());
		//设置参数消息对象
		ParamsMessage params = new ParamsMessage();
		//设置渠道编号
		params.setHead(head);
		params.setBody(data.getContent());
		message.put("params", params);
		String str = JSON.toJSONString(params);
		JSONObject obj = JSONObject.fromObject(str);
		logger.debug("请求报文,request = "+obj.toString());
		//post请求服务器
		String resJson = buildRequestJsonPost(HfepayConfig.gateway_uri,obj.toString());
		logger.debug("响应报文（加密）,response = "+resJson);
		Map<String, String> response = JSON.parseObject(resJson, Map.class);
		if(response.get("body")!=null) {
			HeaderMessage header = JSON.parseObject(JSON.toJSONString(response.get("head")), HeaderMessage.class);
			String content = response.get("body");
			String sign = header.getSign();
			String encryptKey = header.getEncryptKey();
			if (content != null && sign != null && encryptKey != null) {
				//解密报文
				response.put("body", EncrypterUtil.decode(content, sign, encryptKey,secretKey.getJoinPublicKey(), secretKey.getJoinPrivateKey()));
				logger.debug("响应报文（解密）,response = "+JSON.toJSONString(response));
			}
		}else {
			response.put("body","");
		}
		condition.setResponseParams(JSON.toJSONString(response));
		condition.setUpdateTime(new Date());
		try{
			saveApiLog(condition);
		}catch(Exception e){
			logger.error("保存日志异常："+e);
		}
		return response;
	}
	
	/**
	 * POST 请求
	 * @param URL
	 * @param objectString
	 * @return
	 * @throws Exception
	 */
	private String buildRequestJsonPost(String URL,String objectString) throws Exception {
        HttpProtocolHandler httpProtocolHandler = HttpProtocolHandler.getInstance();
        HttpRequest request = new HttpRequest(HttpResultType.BYTES);
        //设置编码集
        request.setMethod("POST");
        request.setCharset(HfepayConfig.input_charset);
        request.setUrl(URL);
        HttpResponse response = httpProtocolHandler.execute(request,objectString,"","");
        if (response == null) {
            return null;
        }
        String strResult = response.getStringResult();
        return strResult;
    }
	
	
	/**
	 * 响应报文处理
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	private Map<String, String> responseHandle(Map<String, String> response){
		Map<String, String> respValue = null;
		Map<String, String> headMap = JSON.parseObject(JSON.toJSONString(response.get("head")), Map.class);
		String respCode = headMap.get("respCode");
		if("000000".equals(respCode)){
			//如果返回码为交易成功
			respValue = JSON.parseObject(response.get("body"), Map.class);
			respValue.put("respCode", respCode);
			return respValue;
		}else{
			respValue = Maps.newMap();
			respValue.put("respCode", respCode);
			respValue.put("respDesc", headMap.get("respDesc"));
			return respValue;
		}
	}
	
	/**
	 * 响应报文处理（微信消息推送）
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	private Map<String, String> pushMessageResponseHandle(JSONObject jsonObj){
		Map<String, String> respValue = Maps.newMap();
		String respCode = jsonObj.getString("errcode");
		try{
			if("-1".equals(respCode)){
				respCode = "1";
			}
			respCode = "PUSH_CODE_"+respCode;
			respValue.put("respCode",PushMessageErrorCode.valueOf(respCode).getCode());
			respValue.put("respDesc",PushMessageErrorCode.valueOf(respCode).getDesc() );
		}catch(Exception e){//错误码不存在
			respCode = "PUSH_CODE_1";
			respValue.put("respCode",PushMessageErrorCode.valueOf(respCode).getCode());
			respValue.put("respDesc",PushMessageErrorCode.valueOf(respCode).getDesc() );
		}
		return respValue;
	}
	
	/**
	 * 获取access_token
	 * @return
	 */
	public String getAccessToken() throws Exception{
		String access_token = "";
		RedisKey redisKey = new RedisKey(HfepayConfig.ACCESS_TOKEN, HfepayConfig.ACCESS_TOKEN);
		access_token = redisSharedCache.get(redisKey);
		if(Strings.isNotBlank(access_token)){
			return access_token;
		}
		//1、先从缓存中获取,如果缓存中没有，则通过请求获取access_token
		String access_token_uri = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid="+HfepayConfig.appid+"&secret="+HfepayConfig.secret;
		Map<String, String> sParaTemp = new HashMap<String, String>();
		sParaTemp.put("appid", HfepayConfig.appid);
		sParaTemp.put("secret", HfepayConfig.secret);
		String resultJson = HttpRequestClient.invoke_http(access_token_uri, generatNameValuePair(sParaTemp), "utf-8");
		Map<String, String> result = JSON.parseObject(resultJson, Map.class);
		//将access_token保存至缓存中，有效时间7200秒（两小时）
		access_token = result.get("access_token");
		redisSharedCache.set(redisKey, access_token,HfepayConfig.ACCESS_TOKEN_TIME);
		return access_token;
	}

	 private static List<NameValuePair> generatNameValuePair(Map<String, String> properties) {
	        List<NameValuePair> list = new ArrayList<NameValuePair>();
	        for (Map.Entry<String, String> entry : properties.entrySet()) {
	        	NameValuePair nameValuePair = new BasicNameValuePair(entry.getKey(),entry.getValue());
	        	list.add(nameValuePair);
	        }
	        return list;
	    }
	 
	 @Async
	 public void saveApiLog(ApiLogCondition condition){
		 condition.setId(Strings.getUUID());
		 apiLogService.insert(condition);
	 }
}
